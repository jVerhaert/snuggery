diff --git a/index.d.ts b/index.d.ts
index e5995176b7b48454483783c5bcfccedd43d2b752..80a6e7c1dadfc1041ef97aeeda39fc959476873f 100755
--- a/index.d.ts
+++ b/index.d.ts
@@ -1,14 +1,14 @@
 /// <amd-module name="@angular/compiler-cli" />
-export { VERSION } from './src/version';
-export * from './src/transformers/api';
-export * from './src/transformers/entry_points';
-export * from './src/perform_compile';
-export { CompilerOptions as AngularCompilerOptions } from './src/transformers/api';
-export * from './private/tooling';
-export * from './src/ngtsc/logging';
-export * from './src/ngtsc/file_system';
-export { NgTscPlugin } from './src/ngtsc/tsc_plugin';
-export { NgtscProgram } from './src/ngtsc/program';
-export { OptimizeFor } from './src/ngtsc/typecheck/api';
-export { ConsoleLogger, Logger, LogLevel } from './src/ngtsc/logging';
-export { NodeJSFileSystem } from './src/ngtsc/file_system';
+export { VERSION } from './src/version.js';
+export * from './src/transformers/api.js';
+export * from './src/transformers/entry_points.js';
+export * from './src/perform_compile.js';
+export { CompilerOptions as AngularCompilerOptions } from './src/transformers/api.js';
+export * from './private/tooling.js';
+export * from './src/ngtsc/logging/index.js';
+export * from './src/ngtsc/file_system/index.js';
+export { NgTscPlugin } from './src/ngtsc/tsc_plugin.js';
+export { NgtscProgram } from './src/ngtsc/program.js';
+export { OptimizeFor } from './src/ngtsc/typecheck/api/index.js';
+export { ConsoleLogger, Logger, LogLevel } from './src/ngtsc/logging/index.js';
+export { NodeJSFileSystem } from './src/ngtsc/file_system/index.js';
diff --git a/linker/babel/index.d.ts b/linker/babel/index.d.ts
index b739293951f42b8e8f4b1c45155103b39e336e30..6ef33d604ee87ef2c12a26e505fff7761427edfd 100755
--- a/linker/babel/index.d.ts
+++ b/linker/babel/index.d.ts
@@ -6,6 +6,6 @@
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
  */
-import { defaultLinkerPlugin } from './src/babel_plugin';
-export { createEs2015LinkerPlugin } from './src/es2015_linker_plugin';
+import { defaultLinkerPlugin } from './src/babel_plugin.js';
+export { createEs2015LinkerPlugin } from './src/es2015_linker_plugin.js';
 export default defaultLinkerPlugin;
diff --git a/linker/babel/src/ast/babel_ast_factory.d.ts b/linker/babel/src/ast/babel_ast_factory.d.ts
index a94cdfc0bcdf1b88c6219d1b311795716ee1b5d8..d88d3f055ff5ec961459c7beb207e4d39a1220c3 100755
--- a/linker/babel/src/ast/babel_ast_factory.d.ts
+++ b/linker/babel/src/ast/babel_ast_factory.d.ts
@@ -1,6 +1,6 @@
 /// <amd-module name="@angular/compiler-cli/linker/babel/src/ast/babel_ast_factory" />
-import { AstFactory, BinaryOperator, LeadingComment, ObjectLiteralProperty, SourceMapRange, TemplateLiteral, VariableDeclarationType } from '../../../../src/ngtsc/translator';
-import { types as t } from '../babel_core';
+import { AstFactory, BinaryOperator, LeadingComment, ObjectLiteralProperty, SourceMapRange, TemplateLiteral, VariableDeclarationType } from '../../../../src/ngtsc/translator/index.js';
+import { types as t } from '../babel_core.js';
 /**
  * A Babel flavored implementation of the AstFactory.
  */
diff --git a/linker/babel/src/ast/babel_ast_host.d.ts b/linker/babel/src/ast/babel_ast_host.d.ts
index 746f3c7ea99bc1e9dbaf0f64b03e1633cd929c39..eb83cc7e6fd9405f9b1e37d123492ea2b7d6289f 100755
--- a/linker/babel/src/ast/babel_ast_host.d.ts
+++ b/linker/babel/src/ast/babel_ast_host.d.ts
@@ -6,8 +6,8 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/linker/babel/src/ast/babel_ast_host" />
-import { AstHost, Range } from '../../../../linker';
-import { types as t } from '../babel_core';
+import { AstHost, Range } from '../../../../linker/index.js';
+import { types as t } from '../babel_core.js';
 /**
  * This implementation of `AstHost` is able to get information from Babel AST nodes.
  */
diff --git a/linker/babel/src/babel_declaration_scope.d.ts b/linker/babel/src/babel_declaration_scope.d.ts
index 000f0c2b99095609fd4cc31b3791f4c28888df57..bb904a1c69ec7459b4b8d217a1164fe3616641f3 100755
--- a/linker/babel/src/babel_declaration_scope.d.ts
+++ b/linker/babel/src/babel_declaration_scope.d.ts
@@ -7,8 +7,8 @@
  * found in the LICENSE file at https://angular.io/license
  */
 import { NodePath, Scope } from '@babel/traverse';
-import { DeclarationScope } from '../../../linker';
-import { types as t } from './babel_core';
+import { DeclarationScope } from '../../../linker/index.js';
+import { types as t } from './babel_core.js';
 export declare type ConstantScopePath = NodePath<t.FunctionDeclaration> | NodePath<t.FunctionExpression> | NodePath<t.Program>;
 /**
  * This class represents the lexical scope of a partial declaration in Babel source code.
diff --git a/linker/babel/src/babel_plugin.d.ts b/linker/babel/src/babel_plugin.d.ts
index abc3fa5b2976af933dbf8c2206e5239a3e383e81..222652d5ddbfddc08f114aba6ec90b1ddc00ccf1 100755
--- a/linker/babel/src/babel_plugin.d.ts
+++ b/linker/babel/src/babel_plugin.d.ts
@@ -1,6 +1,6 @@
 /// <amd-module name="@angular/compiler-cli/linker/babel/src/babel_plugin" />
-import { LinkerOptions } from '../../src/file_linker/linker_options';
-import { ConfigAPI, PluginObj } from './babel_core';
+import { LinkerOptions } from '../../src/file_linker/linker_options.js';
+import { ConfigAPI, PluginObj } from './babel_core.js';
 /**
  * This is the Babel plugin definition that is provided as a default export from the package, such
  * that the plugin can be used using the module specifier of the package. This is the recommended
diff --git a/linker/babel/src/es2015_linker_plugin.d.ts b/linker/babel/src/es2015_linker_plugin.d.ts
index ba6fdc4270ed9a654d16e80fcf0d2496e7ed058c..5265712d634980a6cee3513490ace14dea7cacaa 100755
--- a/linker/babel/src/es2015_linker_plugin.d.ts
+++ b/linker/babel/src/es2015_linker_plugin.d.ts
@@ -6,8 +6,8 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/linker/babel/src/es2015_linker_plugin" />
-import { PluginObj } from './babel_core';
-import { LinkerPluginOptions } from './linker_plugin_options';
+import { PluginObj } from './babel_core.js';
+import { LinkerPluginOptions } from './linker_plugin_options.js';
 /**
  * Create a Babel plugin that visits the program, identifying and linking partial declarations.
  *
diff --git a/linker/babel/src/linker_plugin_options.d.ts b/linker/babel/src/linker_plugin_options.d.ts
index 7068acabc0573775d950be207565cbc13990e98c..65ab456f263a96ab5bd70028a8abffebb99f6c16 100755
--- a/linker/babel/src/linker_plugin_options.d.ts
+++ b/linker/babel/src/linker_plugin_options.d.ts
@@ -6,9 +6,9 @@
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
  */
-import { LinkerOptions } from '../..';
-import { ReadonlyFileSystem } from '../../../src/ngtsc/file_system';
-import { Logger } from '../../../src/ngtsc/logging';
+import { LinkerOptions } from '../../index.js';
+import { ReadonlyFileSystem } from '../../../src/ngtsc/file_system/index.js';
+import { Logger } from '../../../src/ngtsc/logging/index.js';
 export interface LinkerPluginOptions extends Partial<LinkerOptions> {
     /**
      * File-system, used to load up the input source-map and content.
diff --git a/linker/index.d.ts b/linker/index.d.ts
index 5fc0e5d86fa70570e2c9266ae85763631f9551e0..808d53df5d5a76a33523a1697b95d5e9b32d39f8 100755
--- a/linker/index.d.ts
+++ b/linker/index.d.ts
@@ -6,11 +6,11 @@
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
  */
-export { AstHost, Range } from './src/ast/ast_host';
-export { assert } from './src/ast/utils';
-export { FatalLinkerError, isFatalLinkerError } from './src/fatal_linker_error';
-export { DeclarationScope } from './src/file_linker/declaration_scope';
-export { FileLinker } from './src/file_linker/file_linker';
-export { LinkerEnvironment } from './src/file_linker/linker_environment';
-export { DEFAULT_LINKER_OPTIONS, LinkerOptions } from './src/file_linker/linker_options';
-export { needsLinking } from './src/file_linker/needs_linking';
+export { AstHost, Range } from './src/ast/ast_host.js';
+export { assert } from './src/ast/utils.js';
+export { FatalLinkerError, isFatalLinkerError } from './src/fatal_linker_error.js';
+export { DeclarationScope } from './src/file_linker/declaration_scope.js';
+export { FileLinker } from './src/file_linker/file_linker.js';
+export { LinkerEnvironment } from './src/file_linker/linker_environment.js';
+export { DEFAULT_LINKER_OPTIONS, LinkerOptions } from './src/file_linker/linker_options.js';
+export { needsLinking } from './src/file_linker/needs_linking.js';
diff --git a/linker/src/ast/ast_value.d.ts b/linker/src/ast/ast_value.d.ts
index 79ee03a1c55f353dd55b0f06ddddc9e04894a248..b8e93f918957420ab19ff5c9d6676d566b00de33 100755
--- a/linker/src/ast/ast_value.d.ts
+++ b/linker/src/ast/ast_value.d.ts
@@ -7,7 +7,7 @@
  * found in the LICENSE file at https://angular.io/license
  */
 import * as o from '@angular/compiler';
-import { AstHost, Range } from './ast_host';
+import { AstHost, Range } from './ast_host.js';
 /**
  * Represents only those types in `T` that are object types.
  */
diff --git a/linker/src/ast/typescript/typescript_ast_host.d.ts b/linker/src/ast/typescript/typescript_ast_host.d.ts
index 3faee9fb69c44df2795ccffa4df51ee87e29329f..80bf66a1bdae29e2ee1e1edf32c2e857419e573b 100755
--- a/linker/src/ast/typescript/typescript_ast_host.d.ts
+++ b/linker/src/ast/typescript/typescript_ast_host.d.ts
@@ -7,7 +7,7 @@
  */
 /// <amd-module name="@angular/compiler-cli/linker/src/ast/typescript/typescript_ast_host" />
 import ts from 'typescript';
-import { AstHost, Range } from '../ast_host';
+import { AstHost, Range } from '../ast_host.js';
 /**
  * This implementation of `AstHost` is able to get information from TypeScript AST nodes.
  *
diff --git a/linker/src/file_linker/emit_scopes/emit_scope.d.ts b/linker/src/file_linker/emit_scopes/emit_scope.d.ts
index 39ab2c997be2be52c515a89d9f83f317dc2fde2a..4b5d6c2feb3e176c9e3f4ee9e098404fe900d1a0 100755
--- a/linker/src/file_linker/emit_scopes/emit_scope.d.ts
+++ b/linker/src/file_linker/emit_scopes/emit_scope.d.ts
@@ -7,9 +7,9 @@
  * found in the LICENSE file at https://angular.io/license
  */
 import { ConstantPool } from '@angular/compiler';
-import { AstFactory } from '../../../../src/ngtsc/translator';
-import { LinkedDefinition } from '../partial_linkers/partial_linker';
-import { Translator } from '../translator';
+import { AstFactory } from '../../../../src/ngtsc/translator/index.js';
+import { LinkedDefinition } from '../partial_linkers/partial_linker.js';
+import { Translator } from '../translator.js';
 /**
  * This class represents (from the point of view of the `FileLinker`) the scope in which
  * statements and expressions related to a linked partial declaration will be emitted.
diff --git a/linker/src/file_linker/emit_scopes/local_emit_scope.d.ts b/linker/src/file_linker/emit_scopes/local_emit_scope.d.ts
index 8a63fa97b465acc7db2a125e6343def5c56cbb44..334d5f2f84dfa815fc3233fcd36e76e1900dfa51 100755
--- a/linker/src/file_linker/emit_scopes/local_emit_scope.d.ts
+++ b/linker/src/file_linker/emit_scopes/local_emit_scope.d.ts
@@ -6,8 +6,8 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/linker/src/file_linker/emit_scopes/local_emit_scope" />
-import { LinkedDefinition } from '../partial_linkers/partial_linker';
-import { EmitScope } from './emit_scope';
+import { LinkedDefinition } from '../partial_linkers/partial_linker.js';
+import { EmitScope } from './emit_scope.js';
 /**
  * This class is a specialization of the `EmitScope` class that is designed for the situation where
  * there is no clear shared scope for constant statements. In this case they are bundled with the
diff --git a/linker/src/file_linker/file_linker.d.ts b/linker/src/file_linker/file_linker.d.ts
index 3feca71ecbf3cdaec9ffc7358227d8343a0bef3d..99096cf3e9398fa35a8c1dda756a6c6ce62d2903 100755
--- a/linker/src/file_linker/file_linker.d.ts
+++ b/linker/src/file_linker/file_linker.d.ts
@@ -1,7 +1,7 @@
 /// <amd-module name="@angular/compiler-cli/linker/src/file_linker/file_linker" />
-import { AbsoluteFsPath } from '../../../src/ngtsc/file_system';
-import { DeclarationScope } from './declaration_scope';
-import { LinkerEnvironment } from './linker_environment';
+import { AbsoluteFsPath } from '../../../src/ngtsc/file_system/index.js';
+import { DeclarationScope } from './declaration_scope.js';
+import { LinkerEnvironment } from './linker_environment.js';
 export declare const NO_STATEMENTS: Readonly<any[]>;
 /**
  * This class is responsible for linking all the partial declarations found in a single file.
diff --git a/linker/src/file_linker/get_source_file.d.ts b/linker/src/file_linker/get_source_file.d.ts
index 4412966a286eb000d86cffdf8cd8b08040b8494e..86d3e608c8d4e3a996206ac0ae2942df7b383707 100755
--- a/linker/src/file_linker/get_source_file.d.ts
+++ b/linker/src/file_linker/get_source_file.d.ts
@@ -6,8 +6,8 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/linker/src/file_linker/get_source_file" />
-import { AbsoluteFsPath } from '../../../src/ngtsc/file_system';
-import { SourceFile, SourceFileLoader } from '../../../src/ngtsc/sourcemaps';
+import { AbsoluteFsPath } from '../../../src/ngtsc/file_system/index.js';
+import { SourceFile, SourceFileLoader } from '../../../src/ngtsc/sourcemaps/index.js';
 /**
  * A function that will return a `SourceFile` object (or null) for the current file being linked.
  */
diff --git a/linker/src/file_linker/linker_environment.d.ts b/linker/src/file_linker/linker_environment.d.ts
index 2b54e40a9ad75df92301b1047f75dffb80d8e3bf..0d98c4af651afaecd2a804c5d844f1594888e2e1 100755
--- a/linker/src/file_linker/linker_environment.d.ts
+++ b/linker/src/file_linker/linker_environment.d.ts
@@ -6,13 +6,13 @@
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
  */
-import { ReadonlyFileSystem } from '../../../src/ngtsc/file_system';
-import { Logger } from '../../../src/ngtsc/logging';
-import { SourceFileLoader } from '../../../src/ngtsc/sourcemaps';
-import { AstFactory } from '../../../src/ngtsc/translator';
-import { AstHost } from '../ast/ast_host';
-import { LinkerOptions } from './linker_options';
-import { Translator } from './translator';
+import { ReadonlyFileSystem } from '../../../src/ngtsc/file_system/index.js';
+import { Logger } from '../../../src/ngtsc/logging/index.js';
+import { SourceFileLoader } from '../../../src/ngtsc/sourcemaps/index.js';
+import { AstFactory } from '../../../src/ngtsc/translator/index.js';
+import { AstHost } from '../ast/ast_host.js';
+import { LinkerOptions } from './linker_options.js';
+import { Translator } from './translator.js';
 export declare class LinkerEnvironment<TStatement, TExpression> {
     readonly fileSystem: ReadonlyFileSystem;
     readonly logger: Logger;
diff --git a/linker/src/file_linker/partial_linkers/partial_class_metadata_linker_1.d.ts b/linker/src/file_linker/partial_linkers/partial_class_metadata_linker_1.d.ts
index d15c74730679c341135eb7f3d35cd335ddb8f794..b3695df8ee1558b48d54c5d368fc381e40c1d3ff 100755
--- a/linker/src/file_linker/partial_linkers/partial_class_metadata_linker_1.d.ts
+++ b/linker/src/file_linker/partial_linkers/partial_class_metadata_linker_1.d.ts
@@ -7,8 +7,8 @@
  * found in the LICENSE file at https://angular.io/license
  */
 import { ConstantPool, R3ClassMetadata, R3DeclareClassMetadata, R3PartialDeclaration } from '@angular/compiler';
-import { AstObject } from '../../ast/ast_value';
-import { LinkedDefinition, PartialLinker } from './partial_linker';
+import { AstObject } from '../../ast/ast_value.js';
+import { LinkedDefinition, PartialLinker } from './partial_linker.js';
 /**
  * A `PartialLinker` that is designed to process `ɵɵngDeclareClassMetadata()` call expressions.
  */
diff --git a/linker/src/file_linker/partial_linkers/partial_component_linker_1.d.ts b/linker/src/file_linker/partial_linkers/partial_component_linker_1.d.ts
index e5d39eb685d3f5a131d1a0f0846b5a82f23db2d0..39b20b0c5496a32ed81d6412a16f1b8f426a3d79 100755
--- a/linker/src/file_linker/partial_linkers/partial_component_linker_1.d.ts
+++ b/linker/src/file_linker/partial_linkers/partial_component_linker_1.d.ts
@@ -7,10 +7,10 @@
  * found in the LICENSE file at https://angular.io/license
  */
 import { ConstantPool, R3PartialDeclaration } from '@angular/compiler';
-import { AbsoluteFsPath } from '../../../../src/ngtsc/file_system';
-import { AstObject } from '../../ast/ast_value';
-import { GetSourceFileFn } from '../get_source_file';
-import { LinkedDefinition, PartialLinker } from './partial_linker';
+import { AbsoluteFsPath } from '../../../../src/ngtsc/file_system/index.js';
+import { AstObject } from '../../ast/ast_value.js';
+import { GetSourceFileFn } from '../get_source_file.js';
+import { LinkedDefinition, PartialLinker } from './partial_linker.js';
 /**
  * A `PartialLinker` that is designed to process `ɵɵngDeclareComponent()` call expressions.
  */
diff --git a/linker/src/file_linker/partial_linkers/partial_directive_linker_1.d.ts b/linker/src/file_linker/partial_linkers/partial_directive_linker_1.d.ts
index b8ec1e4d73da77ad62a92a02670ece5e239feffb..623e5582de53a08d5094ac669298a4aaa5f5fea8 100755
--- a/linker/src/file_linker/partial_linkers/partial_directive_linker_1.d.ts
+++ b/linker/src/file_linker/partial_linkers/partial_directive_linker_1.d.ts
@@ -7,10 +7,10 @@
  * found in the LICENSE file at https://angular.io/license
  */
 import { ConstantPool, ParseSourceSpan, R3DeclareDirectiveMetadata, R3DirectiveMetadata, R3PartialDeclaration } from '@angular/compiler';
-import { AbsoluteFsPath } from '../../../../src/ngtsc/file_system';
-import { Range } from '../../ast/ast_host';
-import { AstObject } from '../../ast/ast_value';
-import { LinkedDefinition, PartialLinker } from './partial_linker';
+import { AbsoluteFsPath } from '../../../../src/ngtsc/file_system/index.js';
+import { Range } from '../../ast/ast_host.js';
+import { AstObject } from '../../ast/ast_value.js';
+import { LinkedDefinition, PartialLinker } from './partial_linker.js';
 /**
  * A `PartialLinker` that is designed to process `ɵɵngDeclareDirective()` call expressions.
  */
diff --git a/linker/src/file_linker/partial_linkers/partial_factory_linker_1.d.ts b/linker/src/file_linker/partial_linkers/partial_factory_linker_1.d.ts
index cfb693484b00fd3451bc23346c75e7449371f99e..2e7a9ef6f54607e2a6935fde62fc772431947e3a 100755
--- a/linker/src/file_linker/partial_linkers/partial_factory_linker_1.d.ts
+++ b/linker/src/file_linker/partial_linkers/partial_factory_linker_1.d.ts
@@ -7,8 +7,8 @@
  * found in the LICENSE file at https://angular.io/license
  */
 import { ConstantPool, R3DeclareFactoryMetadata, R3FactoryMetadata, R3PartialDeclaration } from '@angular/compiler';
-import { AstObject } from '../../ast/ast_value';
-import { LinkedDefinition, PartialLinker } from './partial_linker';
+import { AstObject } from '../../ast/ast_value.js';
+import { LinkedDefinition, PartialLinker } from './partial_linker.js';
 /**
  * A `PartialLinker` that is designed to process `ɵɵngDeclareFactory()` call expressions.
  */
diff --git a/linker/src/file_linker/partial_linkers/partial_injectable_linker_1.d.ts b/linker/src/file_linker/partial_linkers/partial_injectable_linker_1.d.ts
index 798c8f78c7253abb2f125f66d28f695910efb6f2..29466eb4c955b916ec711df4d982dc5321af046c 100755
--- a/linker/src/file_linker/partial_linkers/partial_injectable_linker_1.d.ts
+++ b/linker/src/file_linker/partial_linkers/partial_injectable_linker_1.d.ts
@@ -7,8 +7,8 @@
  * found in the LICENSE file at https://angular.io/license
  */
 import { ConstantPool, R3DeclareInjectableMetadata, R3InjectableMetadata, R3PartialDeclaration } from '@angular/compiler';
-import { AstObject } from '../../ast/ast_value';
-import { LinkedDefinition, PartialLinker } from './partial_linker';
+import { AstObject } from '../../ast/ast_value.js';
+import { LinkedDefinition, PartialLinker } from './partial_linker.js';
 /**
  * A `PartialLinker` that is designed to process `ɵɵngDeclareInjectable()` call expressions.
  */
diff --git a/linker/src/file_linker/partial_linkers/partial_injector_linker_1.d.ts b/linker/src/file_linker/partial_linkers/partial_injector_linker_1.d.ts
index f4430c39b258a9ab2cc00eb9bc7f2e8f601d1137..ec4077a903d06adc832ec2a06265fc3dfc70598d 100755
--- a/linker/src/file_linker/partial_linkers/partial_injector_linker_1.d.ts
+++ b/linker/src/file_linker/partial_linkers/partial_injector_linker_1.d.ts
@@ -7,8 +7,8 @@
  * found in the LICENSE file at https://angular.io/license
  */
 import { ConstantPool, R3DeclareInjectorMetadata, R3InjectorMetadata, R3PartialDeclaration } from '@angular/compiler';
-import { AstObject } from '../../ast/ast_value';
-import { LinkedDefinition, PartialLinker } from './partial_linker';
+import { AstObject } from '../../ast/ast_value.js';
+import { LinkedDefinition, PartialLinker } from './partial_linker.js';
 /**
  * A `PartialLinker` that is designed to process `ɵɵngDeclareInjector()` call expressions.
  */
diff --git a/linker/src/file_linker/partial_linkers/partial_linker.d.ts b/linker/src/file_linker/partial_linkers/partial_linker.d.ts
index b32883d9a820b87bb3cdf5d7ed6efe5c8e7c9865..4ce6479a54b852510bdf3ff519492b3083a6a949 100755
--- a/linker/src/file_linker/partial_linkers/partial_linker.d.ts
+++ b/linker/src/file_linker/partial_linkers/partial_linker.d.ts
@@ -7,7 +7,7 @@
  * found in the LICENSE file at https://angular.io/license
  */
 import { ConstantPool, outputAst as o, R3PartialDeclaration } from '@angular/compiler';
-import { AstObject } from '../../ast/ast_value';
+import { AstObject } from '../../ast/ast_value.js';
 /**
  * A definition generated by a `PartialLinker`, ready to emit.
  */
diff --git a/linker/src/file_linker/partial_linkers/partial_linker_selector.d.ts b/linker/src/file_linker/partial_linkers/partial_linker_selector.d.ts
index e070c5ead11bd16360c6a0f1e26e7a97be42aa6c..2ae9ff3af45afca8aa7dce6f6a3ae8781eb1ce88 100755
--- a/linker/src/file_linker/partial_linkers/partial_linker_selector.d.ts
+++ b/linker/src/file_linker/partial_linkers/partial_linker_selector.d.ts
@@ -7,10 +7,10 @@
  * found in the LICENSE file at https://angular.io/license
  */
 import semver from 'semver';
-import { AbsoluteFsPath } from '../../../../src/ngtsc/file_system';
-import { Logger } from '../../../../src/ngtsc/logging';
-import { LinkerEnvironment } from '../linker_environment';
-import { PartialLinker } from './partial_linker';
+import { AbsoluteFsPath } from '../../../../src/ngtsc/file_system/index.js';
+import { Logger } from '../../../../src/ngtsc/logging/index.js';
+import { LinkerEnvironment } from '../linker_environment.js';
+import { PartialLinker } from './partial_linker.js';
 export declare const ɵɵngDeclareDirective = "\u0275\u0275ngDeclareDirective";
 export declare const ɵɵngDeclareClassMetadata = "\u0275\u0275ngDeclareClassMetadata";
 export declare const ɵɵngDeclareComponent = "\u0275\u0275ngDeclareComponent";
diff --git a/linker/src/file_linker/partial_linkers/partial_ng_module_linker_1.d.ts b/linker/src/file_linker/partial_linkers/partial_ng_module_linker_1.d.ts
index 0137d19a24a8d5a8cb2430501fa2a92ee4433398..d75ee5ef786661fa6cf32bd07c10cbdb9f4cee33 100755
--- a/linker/src/file_linker/partial_linkers/partial_ng_module_linker_1.d.ts
+++ b/linker/src/file_linker/partial_linkers/partial_ng_module_linker_1.d.ts
@@ -7,8 +7,8 @@
  * found in the LICENSE file at https://angular.io/license
  */
 import { ConstantPool, R3DeclareNgModuleMetadata, R3NgModuleMetadata, R3PartialDeclaration } from '@angular/compiler';
-import { AstObject } from '../../ast/ast_value';
-import { LinkedDefinition, PartialLinker } from './partial_linker';
+import { AstObject } from '../../ast/ast_value.js';
+import { LinkedDefinition, PartialLinker } from './partial_linker.js';
 /**
  * A `PartialLinker` that is designed to process `ɵɵngDeclareNgModule()` call expressions.
  */
diff --git a/linker/src/file_linker/partial_linkers/partial_pipe_linker_1.d.ts b/linker/src/file_linker/partial_linkers/partial_pipe_linker_1.d.ts
index b7479a16b2af45428fc4f437adbb68abb030479c..a616bd0fee2fe75d4f084fb3399853377bc5b12d 100755
--- a/linker/src/file_linker/partial_linkers/partial_pipe_linker_1.d.ts
+++ b/linker/src/file_linker/partial_linkers/partial_pipe_linker_1.d.ts
@@ -7,8 +7,8 @@
  * found in the LICENSE file at https://angular.io/license
  */
 import { ConstantPool, R3DeclarePipeMetadata, R3PartialDeclaration, R3PipeMetadata } from '@angular/compiler';
-import { AstObject } from '../../ast/ast_value';
-import { LinkedDefinition, PartialLinker } from './partial_linker';
+import { AstObject } from '../../ast/ast_value.js';
+import { LinkedDefinition, PartialLinker } from './partial_linker.js';
 /**
  * A `PartialLinker` that is designed to process `ɵɵngDeclarePipe()` call expressions.
  */
diff --git a/linker/src/file_linker/partial_linkers/util.d.ts b/linker/src/file_linker/partial_linkers/util.d.ts
index 6c6ee4697ac82200c8b1c3ed66487fdaf852d8b5..bf1d403ac66cc7853612d7dcb7439a427caaa239 100755
--- a/linker/src/file_linker/partial_linkers/util.d.ts
+++ b/linker/src/file_linker/partial_linkers/util.d.ts
@@ -7,7 +7,7 @@
  * found in the LICENSE file at https://angular.io/license
  */
 import { MaybeForwardRefExpression, outputAst as o, R3DeclareDependencyMetadata, R3DependencyMetadata, R3Reference } from '@angular/compiler';
-import { AstObject, AstValue } from '../../ast/ast_value';
+import { AstObject, AstValue } from '../../ast/ast_value.js';
 export declare function wrapReference<TExpression>(wrapped: o.WrappedNodeExpr<TExpression>): R3Reference;
 /**
  * Parses the value of an enum from the AST value's symbol name.
diff --git a/linker/src/file_linker/translator.d.ts b/linker/src/file_linker/translator.d.ts
index ef84d27357dba893f57fb203318c387311f3aec7..a5a603ba89b687928368992137483f456ba5ad5e 100755
--- a/linker/src/file_linker/translator.d.ts
+++ b/linker/src/file_linker/translator.d.ts
@@ -7,7 +7,7 @@
  * found in the LICENSE file at https://angular.io/license
  */
 import * as o from '@angular/compiler';
-import { AstFactory, ImportGenerator, TranslatorOptions } from '../../../src/ngtsc/translator';
+import { AstFactory, ImportGenerator, TranslatorOptions } from '../../../src/ngtsc/translator/index.js';
 /**
  * Generic translator helper class, which exposes methods for translating expressions and
  * statements.
diff --git a/linker/src/linker_import_generator.d.ts b/linker/src/linker_import_generator.d.ts
index 9f488d3d91fbd3e616bf81fd7ef8ee2005db3fe0..fc66b762eb70509d22192b30ac8e033a2c8e59da 100755
--- a/linker/src/linker_import_generator.d.ts
+++ b/linker/src/linker_import_generator.d.ts
@@ -6,7 +6,7 @@
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
  */
-import { ImportGenerator, NamedImport } from '../../src/ngtsc/translator';
+import { ImportGenerator, NamedImport } from '../../src/ngtsc/translator/index.js';
 /**
  * A class that is used to generate imports when translating from Angular Output AST to an AST to
  * render, such as Babel.
diff --git a/ngcc/index.d.ts b/ngcc/index.d.ts
index f88e55cab4f76f357734e59d4001a08ad7429706..61435cdf22609bead42b903fc8e05b1fbe289dbe 100755
--- a/ngcc/index.d.ts
+++ b/ngcc/index.d.ts
@@ -6,10 +6,10 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/ngcc" />
-import { AsyncNgccOptions, SyncNgccOptions } from './src/ngcc_options';
-export { ConsoleLogger, Logger, LogLevel } from '../src/ngtsc/logging';
-export { AsyncNgccOptions, clearTsConfigCache, NgccOptions, SyncNgccOptions } from './src/ngcc_options';
-export { PathMappings } from './src/path_mappings';
+import { AsyncNgccOptions, SyncNgccOptions } from './src/ngcc_options.js';
+export { ConsoleLogger, Logger, LogLevel } from '../src/ngtsc/logging/index.js';
+export { AsyncNgccOptions, clearTsConfigCache, NgccOptions, SyncNgccOptions } from './src/ngcc_options.js';
+export { PathMappings } from './src/path_mappings.js';
 export declare function process<T extends AsyncNgccOptions | SyncNgccOptions>(options: T): T extends AsyncNgccOptions ? Promise<void> : void;
 export declare const containingDirPath: string;
 /**
diff --git a/ngcc/src/analysis/decoration_analyzer.d.ts b/ngcc/src/analysis/decoration_analyzer.d.ts
index 94adda642032b42d1cbb1dc7eeb2acb77636a255..90d7e6918cb80cb9df0b76c5feac93c9fc940bc7 100755
--- a/ngcc/src/analysis/decoration_analyzer.d.ts
+++ b/ngcc/src/analysis/decoration_analyzer.d.ts
@@ -1,20 +1,20 @@
 /// <amd-module name="@angular/compiler-cli/ngcc/src/analysis/decoration_analyzer" />
 import ts from 'typescript';
-import { ParsedConfiguration } from '../../..';
-import { ReferencesRegistry, ResourceLoader } from '../../../src/ngtsc/annotations';
-import { CycleAnalyzer, ImportGraph } from '../../../src/ngtsc/cycles';
-import { ReadonlyFileSystem } from '../../../src/ngtsc/file_system';
-import { ModuleResolver, PrivateExportAliasingHost, ReferenceEmitter } from '../../../src/ngtsc/imports';
-import { SemanticSymbol } from '../../../src/ngtsc/incremental/semantic_graph';
-import { CompoundMetadataReader, CompoundMetadataRegistry, DtsMetadataReader, InjectableClassRegistry, LocalMetadataRegistry } from '../../../src/ngtsc/metadata';
-import { PartialEvaluator } from '../../../src/ngtsc/partial_evaluator';
-import { LocalModuleScopeRegistry, MetadataDtsModuleScopeResolver, TypeCheckScopeRegistry } from '../../../src/ngtsc/scope';
-import { DecoratorHandler } from '../../../src/ngtsc/transform';
-import { NgccReflectionHost } from '../host/ngcc_host';
-import { Migration } from '../migrations/migration';
-import { EntryPointBundle } from '../packages/entry_point_bundle';
-import { NgccTraitCompiler } from './ngcc_trait_compiler';
-import { CompiledFile, DecorationAnalyses } from './types';
+import { ParsedConfiguration } from '../../../index.js';
+import { ReferencesRegistry, ResourceLoader } from '../../../src/ngtsc/annotations/index.js';
+import { CycleAnalyzer, ImportGraph } from '../../../src/ngtsc/cycles/index.js';
+import { ReadonlyFileSystem } from '../../../src/ngtsc/file_system/index.js';
+import { ModuleResolver, PrivateExportAliasingHost, ReferenceEmitter } from '../../../src/ngtsc/imports/index.js';
+import { SemanticSymbol } from '../../../src/ngtsc/incremental/semantic_graph/index.js';
+import { CompoundMetadataReader, CompoundMetadataRegistry, DtsMetadataReader, InjectableClassRegistry, LocalMetadataRegistry } from '../../../src/ngtsc/metadata/index.js';
+import { PartialEvaluator } from '../../../src/ngtsc/partial_evaluator/index.js';
+import { LocalModuleScopeRegistry, MetadataDtsModuleScopeResolver, TypeCheckScopeRegistry } from '../../../src/ngtsc/scope/index.js';
+import { DecoratorHandler } from '../../../src/ngtsc/transform/index.js';
+import { NgccReflectionHost } from '../host/ngcc_host.js';
+import { Migration } from '../migrations/migration.js';
+import { EntryPointBundle } from '../packages/entry_point_bundle.js';
+import { NgccTraitCompiler } from './ngcc_trait_compiler.js';
+import { CompiledFile, DecorationAnalyses } from './types.js';
 /**
  * Simple class that resolves and loads files directly from the filesystem.
  */
diff --git a/ngcc/src/analysis/migration_host.d.ts b/ngcc/src/analysis/migration_host.d.ts
index 56f7d8852d79ccb79ef1cfa6ba2f6fdc8755adb6..fcd48b8ff95c0d9494a8594f9078b8c19d50b3d6 100755
--- a/ngcc/src/analysis/migration_host.d.ts
+++ b/ngcc/src/analysis/migration_host.d.ts
@@ -1,12 +1,12 @@
 /// <amd-module name="@angular/compiler-cli/ngcc/src/analysis/migration_host" />
-import { AbsoluteFsPath } from '../../../src/ngtsc/file_system';
-import { MetadataReader } from '../../../src/ngtsc/metadata';
-import { PartialEvaluator } from '../../../src/ngtsc/partial_evaluator';
-import { ClassDeclaration, Decorator } from '../../../src/ngtsc/reflection';
-import { HandlerFlags } from '../../../src/ngtsc/transform';
-import { NgccReflectionHost } from '../host/ngcc_host';
-import { MigrationHost } from '../migrations/migration';
-import { NgccTraitCompiler } from './ngcc_trait_compiler';
+import { AbsoluteFsPath } from '../../../src/ngtsc/file_system/index.js';
+import { MetadataReader } from '../../../src/ngtsc/metadata/index.js';
+import { PartialEvaluator } from '../../../src/ngtsc/partial_evaluator/index.js';
+import { ClassDeclaration, Decorator } from '../../../src/ngtsc/reflection/index.js';
+import { HandlerFlags } from '../../../src/ngtsc/transform/index.js';
+import { NgccReflectionHost } from '../host/ngcc_host.js';
+import { MigrationHost } from '../migrations/migration.js';
+import { NgccTraitCompiler } from './ngcc_trait_compiler.js';
 /**
  * The standard implementation of `MigrationHost`, which is created by the `DecorationAnalyzer`.
  */
diff --git a/ngcc/src/analysis/module_with_providers_analyzer.d.ts b/ngcc/src/analysis/module_with_providers_analyzer.d.ts
index e5217d6e7c14fd2e381e34cd1839424685232f55..ae49b187e59ca28365a89790001a189c62a0cc90 100755
--- a/ngcc/src/analysis/module_with_providers_analyzer.d.ts
+++ b/ngcc/src/analysis/module_with_providers_analyzer.d.ts
@@ -7,10 +7,10 @@
  * found in the LICENSE file at https://angular.io/license
  */
 import ts from 'typescript';
-import { ReferencesRegistry } from '../../../src/ngtsc/annotations';
-import { Reference } from '../../../src/ngtsc/imports';
-import { ClassDeclaration, DeclarationNode } from '../../../src/ngtsc/reflection';
-import { NgccReflectionHost } from '../host/ngcc_host';
+import { ReferencesRegistry } from '../../../src/ngtsc/annotations/index.js';
+import { Reference } from '../../../src/ngtsc/imports/index.js';
+import { ClassDeclaration, DeclarationNode } from '../../../src/ngtsc/reflection/index.js';
+import { NgccReflectionHost } from '../host/ngcc_host.js';
 /**
  * A structure returned from `getModuleWithProvidersFunctions()` that describes functions
  * that return ModuleWithProviders objects.
diff --git a/ngcc/src/analysis/ngcc_references_registry.d.ts b/ngcc/src/analysis/ngcc_references_registry.d.ts
index e8b9ff875b4c204d4fb55e78da71d455244999a9..10396b598a347a988c0af5cf3859dd914b1766e3 100755
--- a/ngcc/src/analysis/ngcc_references_registry.d.ts
+++ b/ngcc/src/analysis/ngcc_references_registry.d.ts
@@ -7,9 +7,9 @@
  */
 /// <amd-module name="@angular/compiler-cli/ngcc/src/analysis/ngcc_references_registry" />
 import ts from 'typescript';
-import { ReferencesRegistry } from '../../../src/ngtsc/annotations';
-import { Reference } from '../../../src/ngtsc/imports';
-import { Declaration, DeclarationNode, ReflectionHost } from '../../../src/ngtsc/reflection';
+import { ReferencesRegistry } from '../../../src/ngtsc/annotations/index.js';
+import { Reference } from '../../../src/ngtsc/imports/index.js';
+import { Declaration, DeclarationNode, ReflectionHost } from '../../../src/ngtsc/reflection/index.js';
 /**
  * This is a place for DecoratorHandlers to register references that they
  * find in their analysis of the code.
diff --git a/ngcc/src/analysis/ngcc_trait_compiler.d.ts b/ngcc/src/analysis/ngcc_trait_compiler.d.ts
index 5889592461b831ecdfa6ef2f146f96ae13806a1d..3ca35470d30b43e263e15303a7e7edd00848bd97 100755
--- a/ngcc/src/analysis/ngcc_trait_compiler.d.ts
+++ b/ngcc/src/analysis/ngcc_trait_compiler.d.ts
@@ -7,10 +7,10 @@
  * found in the LICENSE file at https://angular.io/license
  */
 import ts from 'typescript';
-import { SemanticSymbol } from '../../../src/ngtsc/incremental/semantic_graph';
-import { ClassDeclaration, Decorator } from '../../../src/ngtsc/reflection';
-import { DecoratorHandler, HandlerFlags, Trait, TraitCompiler } from '../../../src/ngtsc/transform';
-import { NgccReflectionHost } from '../host/ngcc_host';
+import { SemanticSymbol } from '../../../src/ngtsc/incremental/semantic_graph/index.js';
+import { ClassDeclaration, Decorator } from '../../../src/ngtsc/reflection/index.js';
+import { DecoratorHandler, HandlerFlags, Trait, TraitCompiler } from '../../../src/ngtsc/transform/index.js';
+import { NgccReflectionHost } from '../host/ngcc_host.js';
 /**
  * Specializes the `TraitCompiler` for ngcc purposes. Mainly, this includes an alternative way of
  * scanning for classes to compile using the reflection host's `findClassSymbols`, together with
diff --git a/ngcc/src/analysis/private_declarations_analyzer.d.ts b/ngcc/src/analysis/private_declarations_analyzer.d.ts
index f9152b1d1c293bb0628bf2862a75d8295a3087b1..ce443cfe0844d1fc9cab4a42fc92984c56b451a0 100755
--- a/ngcc/src/analysis/private_declarations_analyzer.d.ts
+++ b/ngcc/src/analysis/private_declarations_analyzer.d.ts
@@ -7,9 +7,9 @@
  * found in the LICENSE file at https://angular.io/license
  */
 import ts from 'typescript';
-import { AbsoluteFsPath } from '../../../src/ngtsc/file_system';
-import { NgccReflectionHost } from '../host/ngcc_host';
-import { NgccReferencesRegistry } from './ngcc_references_registry';
+import { AbsoluteFsPath } from '../../../src/ngtsc/file_system/index.js';
+import { NgccReflectionHost } from '../host/ngcc_host.js';
+import { NgccReferencesRegistry } from './ngcc_references_registry.js';
 export interface ExportInfo {
     identifier: string;
     from: AbsoluteFsPath;
diff --git a/ngcc/src/analysis/types.d.ts b/ngcc/src/analysis/types.d.ts
index 4e0fc48d76b51abcbf782137bfd21ae682044985..8bf2e853a78848b56d8036b71cb19640018e9473 100755
--- a/ngcc/src/analysis/types.d.ts
+++ b/ngcc/src/analysis/types.d.ts
@@ -8,9 +8,9 @@
  */
 import { ConstantPool } from '@angular/compiler';
 import ts from 'typescript';
-import { Reexport } from '../../../src/ngtsc/imports';
-import { ClassDeclaration, Decorator } from '../../../src/ngtsc/reflection';
-import { CompileResult } from '../../../src/ngtsc/transform';
+import { Reexport } from '../../../src/ngtsc/imports/index.js';
+import { ClassDeclaration, Decorator } from '../../../src/ngtsc/reflection/index.js';
+import { CompileResult } from '../../../src/ngtsc/transform/index.js';
 export interface CompiledClass {
     name: string;
     decorators: Decorator[] | null;
diff --git a/ngcc/src/analysis/util.d.ts b/ngcc/src/analysis/util.d.ts
index 0b56dc3f697f6808a4d18f1e370877b95a0bf37a..fdcf7656635bbf2b6cf81e5c1286d7887d7d812f 100755
--- a/ngcc/src/analysis/util.d.ts
+++ b/ngcc/src/analysis/util.d.ts
@@ -6,7 +6,7 @@
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
  */
-import { AbsoluteFsPath } from '../../../src/ngtsc/file_system';
-import { DependencyTracker } from '../../../src/ngtsc/incremental/api';
+import { AbsoluteFsPath } from '../../../src/ngtsc/file_system/index.js';
+import { DependencyTracker } from '../../../src/ngtsc/incremental/api.js';
 export declare function isWithinPackage(packagePath: AbsoluteFsPath, filePath: AbsoluteFsPath): boolean;
 export declare const NOOP_DEPENDENCY_TRACKER: DependencyTracker;
diff --git a/ngcc/src/command_line_options.d.ts b/ngcc/src/command_line_options.d.ts
index ec06447e95accc85f118e396285996b45d78e47b..fc6db43f891ced677d427443dac46902c4e32439 100755
--- a/ngcc/src/command_line_options.d.ts
+++ b/ngcc/src/command_line_options.d.ts
@@ -1,4 +1,4 @@
 #!/usr/bin/env node
 /// <amd-module name="@angular/compiler-cli/ngcc/src/command_line_options" />
-import { NgccOptions } from './ngcc_options';
+import { NgccOptions } from './ngcc_options.js';
 export declare function parseCommandLineOptions(args: string[]): NgccOptions;
diff --git a/ngcc/src/dependencies/commonjs_dependency_host.d.ts b/ngcc/src/dependencies/commonjs_dependency_host.d.ts
index 5760d1d8fab9ffb23f3a20a5e9cb5fd0f30287c7..d18d81bdfb02763423c90933fe251a1813a18a91 100755
--- a/ngcc/src/dependencies/commonjs_dependency_host.d.ts
+++ b/ngcc/src/dependencies/commonjs_dependency_host.d.ts
@@ -1,6 +1,6 @@
 /// <amd-module name="@angular/compiler-cli/ngcc/src/dependencies/commonjs_dependency_host" />
-import { AbsoluteFsPath } from '../../../src/ngtsc/file_system';
-import { DependencyHostBase } from './dependency_host';
+import { AbsoluteFsPath } from '../../../src/ngtsc/file_system/index.js';
+import { DependencyHostBase } from './dependency_host.js';
 /**
  * Helper functions for computing dependencies.
  */
diff --git a/ngcc/src/dependencies/dependency_host.d.ts b/ngcc/src/dependencies/dependency_host.d.ts
index 34f49e89024cd3421c743b62f1a0fe2c21650487..1f38bdff4283ab1309f0541f97fd0eececb70ac1 100755
--- a/ngcc/src/dependencies/dependency_host.d.ts
+++ b/ngcc/src/dependencies/dependency_host.d.ts
@@ -6,9 +6,9 @@
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
  */
-import { AbsoluteFsPath, PathSegment, ReadonlyFileSystem } from '../../../src/ngtsc/file_system';
-import { EntryPoint } from '../packages/entry_point';
-import { ModuleResolver } from './module_resolver';
+import { AbsoluteFsPath, PathSegment, ReadonlyFileSystem } from '../../../src/ngtsc/file_system/index.js';
+import { EntryPoint } from '../packages/entry_point.js';
+import { ModuleResolver } from './module_resolver.js';
 export interface DependencyHost {
     collectDependencies(entryPointPath: AbsoluteFsPath, { dependencies, missing, deepImports }: DependencyInfo): void;
 }
diff --git a/ngcc/src/dependencies/dependency_resolver.d.ts b/ngcc/src/dependencies/dependency_resolver.d.ts
index 4b062ac109c815ff3385821752959ff1a5a46b37..93becc4f479cbfb304f8a896202fe950fcd964b6 100755
--- a/ngcc/src/dependencies/dependency_resolver.d.ts
+++ b/ngcc/src/dependencies/dependency_resolver.d.ts
@@ -7,12 +7,12 @@
  */
 /// <amd-module name="@angular/compiler-cli/ngcc/src/dependencies/dependency_resolver" />
 import { DepGraph } from 'dependency-graph';
-import { ReadonlyFileSystem } from '../../../src/ngtsc/file_system';
-import { Logger } from '../../../src/ngtsc/logging';
-import { NgccConfiguration } from '../packages/configuration';
-import { EntryPoint, EntryPointFormat } from '../packages/entry_point';
-import { PartiallyOrderedList } from '../utils';
-import { DependencyHost, EntryPointWithDependencies } from './dependency_host';
+import { ReadonlyFileSystem } from '../../../src/ngtsc/file_system/index.js';
+import { Logger } from '../../../src/ngtsc/logging/index.js';
+import { NgccConfiguration } from '../packages/configuration.js';
+import { EntryPoint, EntryPointFormat } from '../packages/entry_point.js';
+import { PartiallyOrderedList } from '../utils.js';
+import { DependencyHost, EntryPointWithDependencies } from './dependency_host.js';
 /**
  * Holds information about entry points that are removed because
  * they have dependencies that are missing (directly or transitively).
diff --git a/ngcc/src/dependencies/dts_dependency_host.d.ts b/ngcc/src/dependencies/dts_dependency_host.d.ts
index cea137336bb354249db463fc6f8ad57a5a14e58f..e28404d4f96d4409ef3cbd422a91f1fb86ac12fc 100755
--- a/ngcc/src/dependencies/dts_dependency_host.d.ts
+++ b/ngcc/src/dependencies/dts_dependency_host.d.ts
@@ -6,9 +6,9 @@
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
  */
-import { AbsoluteFsPath, ReadonlyFileSystem } from '../../../src/ngtsc/file_system';
-import { PathMappings } from '../path_mappings';
-import { EsmDependencyHost } from './esm_dependency_host';
+import { AbsoluteFsPath, ReadonlyFileSystem } from '../../../src/ngtsc/file_system/index.js';
+import { PathMappings } from '../path_mappings.js';
+import { EsmDependencyHost } from './esm_dependency_host.js';
 /**
  * Helper functions for computing dependencies via typings files.
  */
diff --git a/ngcc/src/dependencies/esm_dependency_host.d.ts b/ngcc/src/dependencies/esm_dependency_host.d.ts
index 6b0eca022e18742881dc6ed5d800b53f8834ace6..383b19d7330fcdd1877569c43c92c7f9abc6aa41 100755
--- a/ngcc/src/dependencies/esm_dependency_host.d.ts
+++ b/ngcc/src/dependencies/esm_dependency_host.d.ts
@@ -7,9 +7,9 @@
  * found in the LICENSE file at https://angular.io/license
  */
 import ts from 'typescript';
-import { AbsoluteFsPath, ReadonlyFileSystem } from '../../../src/ngtsc/file_system';
-import { DependencyHostBase } from './dependency_host';
-import { ModuleResolver } from './module_resolver';
+import { AbsoluteFsPath, ReadonlyFileSystem } from '../../../src/ngtsc/file_system/index.js';
+import { DependencyHostBase } from './dependency_host.js';
+import { ModuleResolver } from './module_resolver.js';
 /**
  * Helper functions for computing dependencies.
  */
diff --git a/ngcc/src/dependencies/module_resolver.d.ts b/ngcc/src/dependencies/module_resolver.d.ts
index 6d6c09c402c0beb51dc5c81c6ff73ba91534ba6d..ef7a51614d6f51f6a10342e39790d1cee0c1b9f2 100755
--- a/ngcc/src/dependencies/module_resolver.d.ts
+++ b/ngcc/src/dependencies/module_resolver.d.ts
@@ -6,8 +6,8 @@
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
  */
-import { AbsoluteFsPath, ReadonlyFileSystem } from '../../../src/ngtsc/file_system';
-import { PathMappings } from '../path_mappings';
+import { AbsoluteFsPath, ReadonlyFileSystem } from '../../../src/ngtsc/file_system/index.js';
+import { PathMappings } from '../path_mappings.js';
 /**
  * This is a very cut-down implementation of the TypeScript module resolution strategy.
  *
diff --git a/ngcc/src/dependencies/umd_dependency_host.d.ts b/ngcc/src/dependencies/umd_dependency_host.d.ts
index e462bbe41a614ed86681cac507300f1bf63c593b..f53d9e4ce5c8f92383d7fa6d96ef148dd5a03606 100755
--- a/ngcc/src/dependencies/umd_dependency_host.d.ts
+++ b/ngcc/src/dependencies/umd_dependency_host.d.ts
@@ -1,6 +1,6 @@
 /// <amd-module name="@angular/compiler-cli/ngcc/src/dependencies/umd_dependency_host" />
-import { AbsoluteFsPath } from '../../../src/ngtsc/file_system';
-import { DependencyHostBase } from './dependency_host';
+import { AbsoluteFsPath } from '../../../src/ngtsc/file_system/index.js';
+import { DependencyHostBase } from './dependency_host.js';
 /**
  * Helper functions for computing dependencies.
  */
diff --git a/ngcc/src/entry_point_finder/directory_walker_entry_point_finder.d.ts b/ngcc/src/entry_point_finder/directory_walker_entry_point_finder.d.ts
index 25f3f9a2d4f6456c144bbc10542859131ad556df..62c786b04971809ec56470b56f754566e85aa720 100755
--- a/ngcc/src/entry_point_finder/directory_walker_entry_point_finder.d.ts
+++ b/ngcc/src/entry_point_finder/directory_walker_entry_point_finder.d.ts
@@ -6,14 +6,14 @@
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
  */
-import { AbsoluteFsPath } from '../../../src/ngtsc/file_system';
-import { Logger } from '../../../src/ngtsc/logging';
-import { EntryPointWithDependencies } from '../dependencies/dependency_host';
-import { DependencyResolver, SortedEntryPointsInfo } from '../dependencies/dependency_resolver';
-import { EntryPointManifest } from '../packages/entry_point_manifest';
-import { PathMappings } from '../path_mappings';
-import { EntryPointCollector } from './entry_point_collector';
-import { EntryPointFinder } from './interface';
+import { AbsoluteFsPath } from '../../../src/ngtsc/file_system/index.js';
+import { Logger } from '../../../src/ngtsc/logging/index.js';
+import { EntryPointWithDependencies } from '../dependencies/dependency_host.js';
+import { DependencyResolver, SortedEntryPointsInfo } from '../dependencies/dependency_resolver.js';
+import { EntryPointManifest } from '../packages/entry_point_manifest.js';
+import { PathMappings } from '../path_mappings.js';
+import { EntryPointCollector } from './entry_point_collector.js';
+import { EntryPointFinder } from './interface.js';
 /**
  * An EntryPointFinder that searches for all entry-points that can be found given a `basePath` and
  * `pathMappings`.
diff --git a/ngcc/src/entry_point_finder/entry_point_collector.d.ts b/ngcc/src/entry_point_finder/entry_point_collector.d.ts
index e73e01dca68db3b17251e7dd7b0434164360a321..dab981242cabab2ebecbc49e5e86a63002bc46f9 100755
--- a/ngcc/src/entry_point_finder/entry_point_collector.d.ts
+++ b/ngcc/src/entry_point_finder/entry_point_collector.d.ts
@@ -6,11 +6,11 @@
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
  */
-import { AbsoluteFsPath, ReadonlyFileSystem } from '../../../src/ngtsc/file_system';
-import { Logger } from '../../../src/ngtsc/logging';
-import { EntryPointWithDependencies } from '../dependencies/dependency_host';
-import { DependencyResolver } from '../dependencies/dependency_resolver';
-import { NgccConfiguration } from '../packages/configuration';
+import { AbsoluteFsPath, ReadonlyFileSystem } from '../../../src/ngtsc/file_system/index.js';
+import { Logger } from '../../../src/ngtsc/logging/index.js';
+import { EntryPointWithDependencies } from '../dependencies/dependency_host.js';
+import { DependencyResolver } from '../dependencies/dependency_resolver.js';
+import { NgccConfiguration } from '../packages/configuration.js';
 /**
  * A class that traverses a file-tree, starting at a given path, looking for all entry-points,
  * also capturing the dependencies of each entry-point that is found.
diff --git a/ngcc/src/entry_point_finder/interface.d.ts b/ngcc/src/entry_point_finder/interface.d.ts
index 47ca9f9a7a2e8b11cea6ba08903a379a3dc0a588..40c3b908b1eba66f108ab6f48489136f14eebc71 100755
--- a/ngcc/src/entry_point_finder/interface.d.ts
+++ b/ngcc/src/entry_point_finder/interface.d.ts
@@ -6,7 +6,7 @@
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
  */
-import { SortedEntryPointsInfo } from '../dependencies/dependency_resolver';
+import { SortedEntryPointsInfo } from '../dependencies/dependency_resolver.js';
 export interface EntryPointFinder {
     /**
      * Search for Angular package entry-points.
diff --git a/ngcc/src/entry_point_finder/program_based_entry_point_finder.d.ts b/ngcc/src/entry_point_finder/program_based_entry_point_finder.d.ts
index 09b438fe967564ffdcbd676ae037b9134563d219..45c54dff499e67c8fcc7e47eb956ecd29f67431d 100755
--- a/ngcc/src/entry_point_finder/program_based_entry_point_finder.d.ts
+++ b/ngcc/src/entry_point_finder/program_based_entry_point_finder.d.ts
@@ -6,15 +6,15 @@
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
  */
-import { AbsoluteFsPath, ReadonlyFileSystem } from '../../../src/ngtsc/file_system';
-import { Logger } from '../../../src/ngtsc/logging';
-import { ParsedConfiguration } from '../../../src/perform_compile';
-import { EntryPointWithDependencies } from '../dependencies/dependency_host';
-import { DependencyResolver } from '../dependencies/dependency_resolver';
-import { NgccConfiguration } from '../packages/configuration';
-import { EntryPointManifest } from '../packages/entry_point_manifest';
-import { EntryPointCollector } from './entry_point_collector';
-import { TracingEntryPointFinder } from './tracing_entry_point_finder';
+import { AbsoluteFsPath, ReadonlyFileSystem } from '../../../src/ngtsc/file_system/index.js';
+import { Logger } from '../../../src/ngtsc/logging/index.js';
+import { ParsedConfiguration } from '../../../src/perform_compile.js';
+import { EntryPointWithDependencies } from '../dependencies/dependency_host.js';
+import { DependencyResolver } from '../dependencies/dependency_resolver.js';
+import { NgccConfiguration } from '../packages/configuration.js';
+import { EntryPointManifest } from '../packages/entry_point_manifest.js';
+import { EntryPointCollector } from './entry_point_collector.js';
+import { TracingEntryPointFinder } from './tracing_entry_point_finder.js';
 /**
  * An EntryPointFinder that starts from the files in the program defined by the given tsconfig.json
  * and only returns entry-points that are dependencies of these files.
diff --git a/ngcc/src/entry_point_finder/targeted_entry_point_finder.d.ts b/ngcc/src/entry_point_finder/targeted_entry_point_finder.d.ts
index b3bc9b44cbfef0986d1ab3df54df29159827803e..81c404a369dba065b3f675ec268d0af656ac5ae2 100755
--- a/ngcc/src/entry_point_finder/targeted_entry_point_finder.d.ts
+++ b/ngcc/src/entry_point_finder/targeted_entry_point_finder.d.ts
@@ -6,14 +6,14 @@
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
  */
-import { AbsoluteFsPath, ReadonlyFileSystem } from '../../../src/ngtsc/file_system';
-import { Logger } from '../../../src/ngtsc/logging';
-import { EntryPointWithDependencies } from '../dependencies/dependency_host';
-import { DependencyResolver, SortedEntryPointsInfo } from '../dependencies/dependency_resolver';
-import { NgccConfiguration } from '../packages/configuration';
-import { EntryPointJsonProperty } from '../packages/entry_point';
-import { PathMappings } from '../path_mappings';
-import { TracingEntryPointFinder } from './tracing_entry_point_finder';
+import { AbsoluteFsPath, ReadonlyFileSystem } from '../../../src/ngtsc/file_system/index.js';
+import { Logger } from '../../../src/ngtsc/logging/index.js';
+import { EntryPointWithDependencies } from '../dependencies/dependency_host.js';
+import { DependencyResolver, SortedEntryPointsInfo } from '../dependencies/dependency_resolver.js';
+import { NgccConfiguration } from '../packages/configuration.js';
+import { EntryPointJsonProperty } from '../packages/entry_point.js';
+import { PathMappings } from '../path_mappings.js';
+import { TracingEntryPointFinder } from './tracing_entry_point_finder.js';
 /**
  * An EntryPointFinder that starts from a target entry-point and only finds
  * entry-points that are dependencies of the target.
diff --git a/ngcc/src/entry_point_finder/tracing_entry_point_finder.d.ts b/ngcc/src/entry_point_finder/tracing_entry_point_finder.d.ts
index 9811439a11f5270eb71d7b946534816713b0085c..d3f8f30ccf06da3eda1e381e85d0e913bb75c5ab 100755
--- a/ngcc/src/entry_point_finder/tracing_entry_point_finder.d.ts
+++ b/ngcc/src/entry_point_finder/tracing_entry_point_finder.d.ts
@@ -6,13 +6,13 @@
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
  */
-import { AbsoluteFsPath, ReadonlyFileSystem } from '../../../src/ngtsc/file_system';
-import { Logger } from '../../../src/ngtsc/logging';
-import { EntryPointWithDependencies } from '../dependencies/dependency_host';
-import { DependencyResolver, SortedEntryPointsInfo } from '../dependencies/dependency_resolver';
-import { NgccConfiguration } from '../packages/configuration';
-import { PathMappings } from '../path_mappings';
-import { EntryPointFinder } from './interface';
+import { AbsoluteFsPath, ReadonlyFileSystem } from '../../../src/ngtsc/file_system/index.js';
+import { Logger } from '../../../src/ngtsc/logging/index.js';
+import { EntryPointWithDependencies } from '../dependencies/dependency_host.js';
+import { DependencyResolver, SortedEntryPointsInfo } from '../dependencies/dependency_resolver.js';
+import { NgccConfiguration } from '../packages/configuration.js';
+import { PathMappings } from '../path_mappings.js';
+import { EntryPointFinder } from './interface.js';
 /**
  * An EntryPointFinder that starts from a set of initial files and only returns entry-points that
  * are dependencies of these files.
diff --git a/ngcc/src/entry_point_finder/utils.d.ts b/ngcc/src/entry_point_finder/utils.d.ts
index 12684847c4d39ffa8b30e58dd90290000446d911..80185c473ca134dc7970afba5e052b61e5ef238e 100755
--- a/ngcc/src/entry_point_finder/utils.d.ts
+++ b/ngcc/src/entry_point_finder/utils.d.ts
@@ -6,9 +6,9 @@
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
  */
-import { AbsoluteFsPath } from '../../../src/ngtsc/file_system';
-import { Logger } from '../../../src/ngtsc/logging';
-import { PathMappings } from '../path_mappings';
+import { AbsoluteFsPath } from '../../../src/ngtsc/file_system/index.js';
+import { Logger } from '../../../src/ngtsc/logging/index.js';
+import { PathMappings } from '../path_mappings.js';
 /**
  * Extract all the base-paths that we need to search for entry-points.
  *
diff --git a/ngcc/src/execution/analyze_entry_points.d.ts b/ngcc/src/execution/analyze_entry_points.d.ts
index 55374c382013920004655312bb1ec52e54b85cc2..5f34f6b66f37f23a411ab013f6a7518dd7e24bff 100755
--- a/ngcc/src/execution/analyze_entry_points.d.ts
+++ b/ngcc/src/execution/analyze_entry_points.d.ts
@@ -1,9 +1,9 @@
 /// <amd-module name="@angular/compiler-cli/ngcc/src/execution/analyze_entry_points" />
-import { FileSystem } from '../../../src/ngtsc/file_system';
-import { Logger } from '../../../src/ngtsc/logging';
-import { EntryPointFinder } from '../entry_point_finder/interface';
-import { EntryPointJsonProperty } from '../packages/entry_point';
-import { AnalyzeEntryPointsFn } from './api';
+import { FileSystem } from '../../../src/ngtsc/file_system/index.js';
+import { Logger } from '../../../src/ngtsc/logging/index.js';
+import { EntryPointFinder } from '../entry_point_finder/interface.js';
+import { EntryPointJsonProperty } from '../packages/entry_point.js';
+import { AnalyzeEntryPointsFn } from './api.js';
 /**
  * Create the function for performing the analysis of the entry-points.
  */
diff --git a/ngcc/src/execution/api.d.ts b/ngcc/src/execution/api.d.ts
index aab3e6ec74655509f67d06c416cfed9220de07c5..6ca9836a044c8bcf9df0abbf3b8ecc46b8aef1ec 100755
--- a/ngcc/src/execution/api.d.ts
+++ b/ngcc/src/execution/api.d.ts
@@ -6,8 +6,8 @@
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
  */
-import { FileToWrite } from '../rendering/utils';
-import { Task, TaskCompletedCallback, TaskQueue } from './tasks/api';
+import { FileToWrite } from '../rendering/utils.js';
+import { Task, TaskCompletedCallback, TaskQueue } from './tasks/api.js';
 /**
  * The type of the function that analyzes entry-points and creates the list of tasks.
  *
diff --git a/ngcc/src/execution/cluster/api.d.ts b/ngcc/src/execution/cluster/api.d.ts
index 7b7a6726b596ff8844bccc3d65342d7901cc3544..0af91cbae8c39c79f03154a8da88d3db6ed5fe39 100755
--- a/ngcc/src/execution/cluster/api.d.ts
+++ b/ngcc/src/execution/cluster/api.d.ts
@@ -6,10 +6,10 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/ngcc/src/execution/cluster/api" />
-import { AbsoluteFsPath } from '../../../../src/ngtsc/file_system';
-import { JsonObject } from '../../utils';
-import { PackageJsonChange } from '../../writing/package_json_updater';
-import { Task, TaskProcessingOutcome } from '../tasks/api';
+import { AbsoluteFsPath } from '../../../../src/ngtsc/file_system/index.js';
+import { JsonObject } from '../../utils.js';
+import { PackageJsonChange } from '../../writing/package_json_updater.js';
+import { Task, TaskProcessingOutcome } from '../tasks/api.js';
 /** A message reporting that the worker is ready for retrieving tasks. */
 export interface ReadyMessage extends JsonObject {
     type: 'ready';
diff --git a/ngcc/src/execution/cluster/executor.d.ts b/ngcc/src/execution/cluster/executor.d.ts
index 96fb3e8779630513f498c936bbcec372b7a589dc..c513cb5c2d828b6f871f7ff952c3346bac8f1d21 100755
--- a/ngcc/src/execution/cluster/executor.d.ts
+++ b/ngcc/src/execution/cluster/executor.d.ts
@@ -6,13 +6,13 @@
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
  */
-import { PathManipulation } from '../../../../src/ngtsc/file_system';
-import { Logger } from '../../../../src/ngtsc/logging';
-import { AsyncLocker } from '../../locking/async_locker';
-import { FileWriter } from '../../writing/file_writer';
-import { PackageJsonUpdater } from '../../writing/package_json_updater';
-import { AnalyzeEntryPointsFn, CreateCompileFn, Executor } from '../api';
-import { CreateTaskCompletedCallback } from '../tasks/api';
+import { PathManipulation } from '../../../../src/ngtsc/file_system/index.js';
+import { Logger } from '../../../../src/ngtsc/logging/index.js';
+import { AsyncLocker } from '../../locking/async_locker.js';
+import { FileWriter } from '../../writing/file_writer.js';
+import { PackageJsonUpdater } from '../../writing/package_json_updater.js';
+import { AnalyzeEntryPointsFn, CreateCompileFn, Executor } from '../api.js';
+import { CreateTaskCompletedCallback } from '../tasks/api.js';
 /**
  * An `Executor` that processes tasks in parallel (on multiple processes) and completes
  * asynchronously.
diff --git a/ngcc/src/execution/cluster/master.d.ts b/ngcc/src/execution/cluster/master.d.ts
index 14b1d6d524b193ff259c3bbcff45b3272e28e1a4..d5a6428eca1d4fc9bf0eca04b27d086c78f19b25 100755
--- a/ngcc/src/execution/cluster/master.d.ts
+++ b/ngcc/src/execution/cluster/master.d.ts
@@ -6,12 +6,12 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/ngcc/src/execution/cluster/master" />
-import { AbsoluteFsPath, PathManipulation } from '../../../../src/ngtsc/file_system';
-import { Logger } from '../../../../src/ngtsc/logging';
-import { FileWriter } from '../../writing/file_writer';
-import { PackageJsonUpdater } from '../../writing/package_json_updater';
-import { AnalyzeEntryPointsFn } from '../api';
-import { CreateTaskCompletedCallback } from '../tasks/api';
+import { AbsoluteFsPath, PathManipulation } from '../../../../src/ngtsc/file_system/index.js';
+import { Logger } from '../../../../src/ngtsc/logging/index.js';
+import { FileWriter } from '../../writing/file_writer.js';
+import { PackageJsonUpdater } from '../../writing/package_json_updater.js';
+import { AnalyzeEntryPointsFn } from '../api.js';
+import { CreateTaskCompletedCallback } from '../tasks/api.js';
 /**
  * The cluster master is responsible for analyzing all entry-points, planning the work that needs to
  * be done, distributing it to worker-processes and collecting/post-processing the results.
diff --git a/ngcc/src/execution/cluster/package_json_updater.d.ts b/ngcc/src/execution/cluster/package_json_updater.d.ts
index d17be15e6c10956c8bc732b9e71f07daa5c13f95..c91c62637533b62d48b59c9117289caebddfeb5a 100755
--- a/ngcc/src/execution/cluster/package_json_updater.d.ts
+++ b/ngcc/src/execution/cluster/package_json_updater.d.ts
@@ -6,9 +6,9 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/ngcc/src/execution/cluster/package_json_updater" />
-import { AbsoluteFsPath } from '../../../../src/ngtsc/file_system';
-import { JsonObject } from '../../utils';
-import { PackageJsonChange, PackageJsonUpdate, PackageJsonUpdater } from '../../writing/package_json_updater';
+import { AbsoluteFsPath } from '../../../../src/ngtsc/file_system/index.js';
+import { JsonObject } from '../../utils.js';
+import { PackageJsonChange, PackageJsonUpdate, PackageJsonUpdater } from '../../writing/package_json_updater.js';
 /**
  * A `PackageJsonUpdater` for cluster workers that will send update changes to the master process so
  * that it can safely handle update operations on multiple processes.
diff --git a/ngcc/src/execution/cluster/utils.d.ts b/ngcc/src/execution/cluster/utils.d.ts
index 9712da2a560c7c87f6765158feb55c4167da4968..0ef94f6b34a4417bd79adafb85ab358b29509b27 100755
--- a/ngcc/src/execution/cluster/utils.d.ts
+++ b/ngcc/src/execution/cluster/utils.d.ts
@@ -6,7 +6,7 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/ngcc/src/execution/cluster/utils" />
-import { MessageFromWorker, MessageToWorker } from './api';
+import { MessageFromWorker, MessageToWorker } from './api.js';
 /** Expose a `Promise` instance as well as APIs for resolving/rejecting it. */
 export declare class Deferred<T> {
     /**
diff --git a/ngcc/src/execution/cluster/worker.d.ts b/ngcc/src/execution/cluster/worker.d.ts
index 95227c7eb8f617451c53fb76068e83fbb1be0ab5..a682ba618dd1cd4c054348e2d692ebd4016e7623 100755
--- a/ngcc/src/execution/cluster/worker.d.ts
+++ b/ngcc/src/execution/cluster/worker.d.ts
@@ -6,6 +6,6 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/ngcc/src/execution/cluster/worker" />
-import { Logger } from '../../../../src/ngtsc/logging';
-import { CreateCompileFn } from '../api';
+import { Logger } from '../../../../src/ngtsc/logging/index.js';
+import { CreateCompileFn } from '../api.js';
 export declare function startWorker(logger: Logger, createCompileFn: CreateCompileFn): Promise<void>;
diff --git a/ngcc/src/execution/create_compile_function.d.ts b/ngcc/src/execution/create_compile_function.d.ts
index 86424ce5ed0eaa70539d61fad2cfd9d626df5195..ff94d1f068a24c74bb0c8760c07387a0340a8e6a 100755
--- a/ngcc/src/execution/create_compile_function.d.ts
+++ b/ngcc/src/execution/create_compile_function.d.ts
@@ -1,10 +1,10 @@
 /// <amd-module name="@angular/compiler-cli/ngcc/src/execution/create_compile_function" />
-import { FileSystem } from '../../../src/ngtsc/file_system';
-import { Logger } from '../../../src/ngtsc/logging';
-import { ParsedConfiguration } from '../../../src/perform_compile';
-import { PathMappings } from '../path_mappings';
-import { FileWriter } from '../writing/file_writer';
-import { CreateCompileFn } from './api';
+import { FileSystem } from '../../../src/ngtsc/file_system/index.js';
+import { Logger } from '../../../src/ngtsc/logging/index.js';
+import { ParsedConfiguration } from '../../../src/perform_compile.js';
+import { PathMappings } from '../path_mappings.js';
+import { FileWriter } from '../writing/file_writer.js';
+import { CreateCompileFn } from './api.js';
 /**
  * The function for creating the `compile()` function.
  */
diff --git a/ngcc/src/execution/single_process_executor.d.ts b/ngcc/src/execution/single_process_executor.d.ts
index ea8287689458642ad7b785c1d56f8699fc975ba5..abd80fd79f1d4e19952ec54e1f84330981a5e385 100755
--- a/ngcc/src/execution/single_process_executor.d.ts
+++ b/ngcc/src/execution/single_process_executor.d.ts
@@ -6,11 +6,11 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/ngcc/src/execution/single_process_executor" />
-import { Logger } from '../../../src/ngtsc/logging';
-import { AsyncLocker } from '../locking/async_locker';
-import { SyncLocker } from '../locking/sync_locker';
-import { AnalyzeEntryPointsFn, CreateCompileFn, Executor } from './api';
-import { CreateTaskCompletedCallback } from './tasks/api';
+import { Logger } from '../../../src/ngtsc/logging/index.js';
+import { AsyncLocker } from '../locking/async_locker.js';
+import { SyncLocker } from '../locking/sync_locker.js';
+import { AnalyzeEntryPointsFn, CreateCompileFn, Executor } from './api.js';
+import { CreateTaskCompletedCallback } from './tasks/api.js';
 export declare abstract class SingleProcessorExecutorBase {
     private logger;
     private createTaskCompletedCallback;
diff --git a/ngcc/src/execution/tasks/api.d.ts b/ngcc/src/execution/tasks/api.d.ts
index 0110ba4d5225cd18c6779a4d9b0ed73735da4c0c..edd5d056b2ed88d6d651bbd9e3f7f04176198236 100755
--- a/ngcc/src/execution/tasks/api.d.ts
+++ b/ngcc/src/execution/tasks/api.d.ts
@@ -6,8 +6,8 @@
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
  */
-import { EntryPoint, EntryPointJsonProperty } from '../../packages/entry_point';
-import { JsonObject, PartiallyOrderedList } from '../../utils';
+import { EntryPoint, EntryPointJsonProperty } from '../../packages/entry_point.js';
+import { JsonObject, PartiallyOrderedList } from '../../utils.js';
 /**
  * Represents a unit of work to be undertaken by an `Executor`.
  *
diff --git a/ngcc/src/execution/tasks/completion.d.ts b/ngcc/src/execution/tasks/completion.d.ts
index 28c9bf7ecd58f65b4d7fd359456d6c4ebc9832cf..24a3c8a250f16c80bdbfae0e4e6470a6346aabe8 100755
--- a/ngcc/src/execution/tasks/completion.d.ts
+++ b/ngcc/src/execution/tasks/completion.d.ts
@@ -6,10 +6,10 @@
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
  */
-import { PathManipulation, ReadonlyFileSystem } from '../../../../src/ngtsc/file_system';
-import { Logger } from '../../../../src/ngtsc/logging';
-import { PackageJsonUpdater } from '../../writing/package_json_updater';
-import { Task, TaskCompletedCallback, TaskProcessingOutcome, TaskQueue } from './api';
+import { PathManipulation, ReadonlyFileSystem } from '../../../../src/ngtsc/file_system/index.js';
+import { Logger } from '../../../../src/ngtsc/logging/index.js';
+import { PackageJsonUpdater } from '../../writing/package_json_updater.js';
+import { Task, TaskCompletedCallback, TaskProcessingOutcome, TaskQueue } from './api.js';
 /**
  * A function that can handle a specific outcome of a task completion.
  *
diff --git a/ngcc/src/execution/tasks/queues/base_task_queue.d.ts b/ngcc/src/execution/tasks/queues/base_task_queue.d.ts
index bf581abfef7ee33ff2466a771ae56d6a74ac4be4..5f96749d8aff159db151435bcbef9b7a5dec5239 100755
--- a/ngcc/src/execution/tasks/queues/base_task_queue.d.ts
+++ b/ngcc/src/execution/tasks/queues/base_task_queue.d.ts
@@ -6,8 +6,8 @@
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
  */
-import { Logger } from '../../../../../src/ngtsc/logging';
-import { PartiallyOrderedTasks, Task, TaskDependencies, TaskQueue } from '../api';
+import { Logger } from '../../../../../src/ngtsc/logging/index.js';
+import { PartiallyOrderedTasks, Task, TaskDependencies, TaskQueue } from '../api.js';
 /**
  * A base `TaskQueue` implementation to be used as base for concrete implementations.
  */
diff --git a/ngcc/src/execution/tasks/queues/parallel_task_queue.d.ts b/ngcc/src/execution/tasks/queues/parallel_task_queue.d.ts
index e5d785ceefc8e57feb93f8295bcf945e1905f7b1..1df36639ab706e5101f7bfbfc574c1e546b85b35 100755
--- a/ngcc/src/execution/tasks/queues/parallel_task_queue.d.ts
+++ b/ngcc/src/execution/tasks/queues/parallel_task_queue.d.ts
@@ -6,9 +6,9 @@
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
  */
-import { Logger } from '../../../../../src/ngtsc/logging';
-import { PartiallyOrderedTasks, Task, TaskDependencies } from '../api';
-import { BaseTaskQueue } from './base_task_queue';
+import { Logger } from '../../../../../src/ngtsc/logging/index.js';
+import { PartiallyOrderedTasks, Task, TaskDependencies } from '../api.js';
+import { BaseTaskQueue } from './base_task_queue.js';
 /**
  * A `TaskQueue` implementation that assumes tasks are processed in parallel, thus has to ensure a
  * task's dependencies have been processed before processing the task.
diff --git a/ngcc/src/execution/tasks/queues/serial_task_queue.d.ts b/ngcc/src/execution/tasks/queues/serial_task_queue.d.ts
index e36d570a1d511a0ae239019268f588dc036b4a77..f7fef212c1148feb7ac8b39c18305bf1dfd74ae1 100755
--- a/ngcc/src/execution/tasks/queues/serial_task_queue.d.ts
+++ b/ngcc/src/execution/tasks/queues/serial_task_queue.d.ts
@@ -6,8 +6,8 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/ngcc/src/execution/tasks/queues/serial_task_queue" />
-import { Task } from '../api';
-import { BaseTaskQueue } from './base_task_queue';
+import { Task } from '../api.js';
+import { BaseTaskQueue } from './base_task_queue.js';
 /**
  * A `TaskQueue` implementation that assumes tasks are processed serially and each one is completed
  * before requesting the next one.
diff --git a/ngcc/src/execution/tasks/utils.d.ts b/ngcc/src/execution/tasks/utils.d.ts
index 7adfe3c3043b24c4e2a6b795705577356a7da123..700003344e71246f2796246bf3800324db23dbab 100755
--- a/ngcc/src/execution/tasks/utils.d.ts
+++ b/ngcc/src/execution/tasks/utils.d.ts
@@ -7,8 +7,8 @@
  * found in the LICENSE file at https://angular.io/license
  */
 import { DepGraph } from 'dependency-graph';
-import { EntryPoint } from '../../packages/entry_point';
-import { PartiallyOrderedTasks, Task, TaskDependencies } from './api';
+import { EntryPoint } from '../../packages/entry_point.js';
+import { PartiallyOrderedTasks, Task, TaskDependencies } from './api.js';
 /** Stringify a task for debugging purposes. */
 export declare const stringifyTask: (task: Task) => string;
 /**
diff --git a/ngcc/src/host/commonjs_host.d.ts b/ngcc/src/host/commonjs_host.d.ts
index 7299eaa62ec3bb4c9566f2f3b1ebaf4304dd6961..8aa5d4b695130062cd748fa99d82696ef9974fc1 100755
--- a/ngcc/src/host/commonjs_host.d.ts
+++ b/ngcc/src/host/commonjs_host.d.ts
@@ -7,12 +7,12 @@
  */
 /// <amd-module name="@angular/compiler-cli/ngcc/src/host/commonjs_host" />
 import ts from 'typescript';
-import { Logger } from '../../../src/ngtsc/logging';
-import { Declaration, Import } from '../../../src/ngtsc/reflection';
-import { BundleProgram } from '../packages/bundle_program';
-import { FactoryMap } from '../utils';
-import { Esm5ReflectionHost } from './esm5_host';
-import { NgccClassSymbol } from './ngcc_host';
+import { Logger } from '../../../src/ngtsc/logging/index.js';
+import { Declaration, Import } from '../../../src/ngtsc/reflection/index.js';
+import { BundleProgram } from '../packages/bundle_program.js';
+import { FactoryMap } from '../utils.js';
+import { Esm5ReflectionHost } from './esm5_host.js';
+import { NgccClassSymbol } from './ngcc_host.js';
 export declare class CommonJsReflectionHost extends Esm5ReflectionHost {
     protected commonJsExports: FactoryMap<ts.SourceFile, Map<string, Declaration<ts.Declaration>> | null>;
     protected topLevelHelperCalls: FactoryMap<string, FactoryMap<ts.SourceFile, ts.CallExpression[]>>;
diff --git a/ngcc/src/host/commonjs_umd_utils.d.ts b/ngcc/src/host/commonjs_umd_utils.d.ts
index 94373b8ac7031c447a7e85b7679a8bbe3789f02b..6aac3983e11087e5aa345cf0f4d461d5d40430a7 100755
--- a/ngcc/src/host/commonjs_umd_utils.d.ts
+++ b/ngcc/src/host/commonjs_umd_utils.d.ts
@@ -7,7 +7,7 @@
  */
 /// <amd-module name="@angular/compiler-cli/ngcc/src/host/commonjs_umd_utils" />
 import ts from 'typescript';
-import { Declaration } from '../../../src/ngtsc/reflection';
+import { Declaration } from '../../../src/ngtsc/reflection/index.js';
 export interface ExportDeclaration {
     name: string;
     declaration: Declaration;
diff --git a/ngcc/src/host/delegating_host.d.ts b/ngcc/src/host/delegating_host.d.ts
index 24715fd93fb7c899fcb11ca84a08ad454b017f2d..4a9a95ca9ac55d34b84c301862c98fff18233eff 100755
--- a/ngcc/src/host/delegating_host.d.ts
+++ b/ngcc/src/host/delegating_host.d.ts
@@ -7,8 +7,8 @@
  */
 /// <amd-module name="@angular/compiler-cli/ngcc/src/host/delegating_host" />
 import ts from 'typescript';
-import { ClassDeclaration, ClassMember, CtorParameter, Declaration, DeclarationNode, Decorator, FunctionDefinition, Import, ReflectionHost } from '../../../src/ngtsc/reflection';
-import { NgccClassSymbol, NgccReflectionHost } from './ngcc_host';
+import { ClassDeclaration, ClassMember, CtorParameter, Declaration, DeclarationNode, Decorator, FunctionDefinition, Import, ReflectionHost } from '../../../src/ngtsc/reflection/index.js';
+import { NgccClassSymbol, NgccReflectionHost } from './ngcc_host.js';
 /**
  * A reflection host implementation that delegates reflector queries depending on whether they
  * reflect on declaration files (for dependent libraries) or source files within the entry-point
diff --git a/ngcc/src/host/esm2015_host.d.ts b/ngcc/src/host/esm2015_host.d.ts
index 132fd9c051ffe5dc2495ad73f47bf95006572793..3927b095007aae412ce4546042032264467c69d2 100755
--- a/ngcc/src/host/esm2015_host.d.ts
+++ b/ngcc/src/host/esm2015_host.d.ts
@@ -7,10 +7,10 @@
  */
 /// <amd-module name="@angular/compiler-cli/ngcc/src/host/esm2015_host" />
 import ts from 'typescript';
-import { Logger } from '../../../src/ngtsc/logging';
-import { ClassDeclaration, ClassMember, ClassMemberKind, CtorParameter, Declaration, DeclarationNode, Decorator, EnumMember, TypeScriptReflectionHost } from '../../../src/ngtsc/reflection';
-import { BundleProgram } from '../packages/bundle_program';
-import { NgccClassSymbol, NgccReflectionHost } from './ngcc_host';
+import { Logger } from '../../../src/ngtsc/logging/index.js';
+import { ClassDeclaration, ClassMember, ClassMemberKind, CtorParameter, Declaration, DeclarationNode, Decorator, EnumMember, TypeScriptReflectionHost } from '../../../src/ngtsc/reflection/index.js';
+import { BundleProgram } from '../packages/bundle_program.js';
+import { NgccClassSymbol, NgccReflectionHost } from './ngcc_host.js';
 export declare const DECORATORS: ts.__String;
 export declare const PROP_DECORATORS: ts.__String;
 export declare const CONSTRUCTOR: ts.__String;
diff --git a/ngcc/src/host/esm5_host.d.ts b/ngcc/src/host/esm5_host.d.ts
index 5fc7cd2c4c39ea2ceb786c19ca7cf40f5d6f816a..11a3fb347cfc8dfa80dc298e73b4a0f37d296103 100755
--- a/ngcc/src/host/esm5_host.d.ts
+++ b/ngcc/src/host/esm5_host.d.ts
@@ -7,9 +7,9 @@
  */
 /// <amd-module name="@angular/compiler-cli/ngcc/src/host/esm5_host" />
 import ts from 'typescript';
-import { ClassDeclaration, ClassMember, Declaration, Decorator, FunctionDefinition } from '../../../src/ngtsc/reflection';
-import { Esm2015ReflectionHost, ParamInfo } from './esm2015_host';
-import { NgccClassSymbol } from './ngcc_host';
+import { ClassDeclaration, ClassMember, Declaration, Decorator, FunctionDefinition } from '../../../src/ngtsc/reflection/index.js';
+import { Esm2015ReflectionHost, ParamInfo } from './esm2015_host.js';
+import { NgccClassSymbol } from './ngcc_host.js';
 /**
  * ESM5 packages contain ECMAScript IIFE functions that act like classes. For example:
  *
diff --git a/ngcc/src/host/ngcc_host.d.ts b/ngcc/src/host/ngcc_host.d.ts
index b4f4e2fb826cf5cfb06f61390e99302a6bc3699f..1d920f828da720b7d69927352276dee23d0f3220 100755
--- a/ngcc/src/host/ngcc_host.d.ts
+++ b/ngcc/src/host/ngcc_host.d.ts
@@ -7,8 +7,8 @@
  * found in the LICENSE file at https://angular.io/license
  */
 import ts from 'typescript';
-import { ClassDeclaration, Declaration, Decorator, ReflectionHost } from '../../../src/ngtsc/reflection';
-import { SymbolWithValueDeclaration } from '../../../src/ngtsc/util/src/typescript';
+import { ClassDeclaration, Declaration, Decorator, ReflectionHost } from '../../../src/ngtsc/reflection/index.js';
+import { SymbolWithValueDeclaration } from '../../../src/ngtsc/util/src/typescript.js';
 /**
  * The symbol corresponding to a "class" declaration. I.e. a `ts.Symbol` whose `valueDeclaration` is
  * a `ClassDeclaration`.
diff --git a/ngcc/src/host/umd_host.d.ts b/ngcc/src/host/umd_host.d.ts
index a1e6518d9d4a19d9d2f5faeba6837a1d876b9e9e..2aca1a15e8d3c39a6af16342592310bb5272f81c 100755
--- a/ngcc/src/host/umd_host.d.ts
+++ b/ngcc/src/host/umd_host.d.ts
@@ -7,12 +7,12 @@
  */
 /// <amd-module name="@angular/compiler-cli/ngcc/src/host/umd_host" />
 import ts from 'typescript';
-import { Logger } from '../../../src/ngtsc/logging';
-import { Declaration, Import } from '../../../src/ngtsc/reflection';
-import { BundleProgram } from '../packages/bundle_program';
-import { FactoryMap } from '../utils';
-import { Esm5ReflectionHost } from './esm5_host';
-import { NgccClassSymbol } from './ngcc_host';
+import { Logger } from '../../../src/ngtsc/logging/index.js';
+import { Declaration, Import } from '../../../src/ngtsc/reflection/index.js';
+import { BundleProgram } from '../packages/bundle_program.js';
+import { FactoryMap } from '../utils.js';
+import { Esm5ReflectionHost } from './esm5_host.js';
+import { NgccClassSymbol } from './ngcc_host.js';
 export declare class UmdReflectionHost extends Esm5ReflectionHost {
     protected umdModules: FactoryMap<ts.SourceFile, UmdModule | null>;
     protected umdExports: FactoryMap<ts.SourceFile, Map<string, Declaration<ts.Declaration>> | null>;
diff --git a/ngcc/src/locking/async_locker.d.ts b/ngcc/src/locking/async_locker.d.ts
index 221ce7ce10f2dbec797ab19bdda45098e34a68e6..f07880be0588bdb563f7f1f2996921745f99ac11 100755
--- a/ngcc/src/locking/async_locker.d.ts
+++ b/ngcc/src/locking/async_locker.d.ts
@@ -6,8 +6,8 @@
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
  */
-import { Logger } from '../../../src/ngtsc/logging';
-import { LockFile } from './lock_file';
+import { Logger } from '../../../src/ngtsc/logging/index.js';
+import { LockFile } from './lock_file.js';
 /**
  * AsyncLocker is used to prevent more than one instance of ngcc executing at the same time,
  * when being called in an asynchronous context.
diff --git a/ngcc/src/locking/lock_file.d.ts b/ngcc/src/locking/lock_file.d.ts
index e6e9c397ce86a8a6408aba3edd17eaf3d1327fa7..2fce31d87aa547e57c751ba8df6f1392f0104fd1 100755
--- a/ngcc/src/locking/lock_file.d.ts
+++ b/ngcc/src/locking/lock_file.d.ts
@@ -6,7 +6,7 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/ngcc/src/locking/lock_file" />
-import { AbsoluteFsPath, PathManipulation } from '../../../src/ngtsc/file_system';
+import { AbsoluteFsPath, PathManipulation } from '../../../src/ngtsc/file_system/index.js';
 export declare function getLockFilePath(fs: PathManipulation): AbsoluteFsPath;
 export interface LockFile {
     path: AbsoluteFsPath;
diff --git a/ngcc/src/locking/lock_file_with_child_process/index.d.ts b/ngcc/src/locking/lock_file_with_child_process/index.d.ts
index 18bdccfc96653068851c8ec0fd46cbd3634f5b40..bed5001879320cd48ddbeec779036691b3385619 100755
--- a/ngcc/src/locking/lock_file_with_child_process/index.d.ts
+++ b/ngcc/src/locking/lock_file_with_child_process/index.d.ts
@@ -8,9 +8,9 @@
  * found in the LICENSE file at https://angular.io/license
  */
 import { ChildProcess } from 'child_process';
-import { AbsoluteFsPath, FileSystem } from '../../../../src/ngtsc/file_system';
-import { Logger } from '../../../../src/ngtsc/logging';
-import { LockFile } from '../lock_file';
+import { AbsoluteFsPath, FileSystem } from '../../../../src/ngtsc/file_system/index.js';
+import { Logger } from '../../../../src/ngtsc/logging/index.js';
+import { LockFile } from '../lock_file.js';
 /**
  * This `LockFile` implementation uses a child-process to remove the lock file when the main process
  * exits (for whatever reason).
diff --git a/ngcc/src/locking/lock_file_with_child_process/util.d.ts b/ngcc/src/locking/lock_file_with_child_process/util.d.ts
index bbbb016373a1e5704866ec4447555e71047ad96b..3afe93b963f96f2b64455149c6f446579fe332d6 100755
--- a/ngcc/src/locking/lock_file_with_child_process/util.d.ts
+++ b/ngcc/src/locking/lock_file_with_child_process/util.d.ts
@@ -6,8 +6,8 @@
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
  */
-import { AbsoluteFsPath, FileSystem } from '../../../../src/ngtsc/file_system';
-import { Logger } from '../../../../src/ngtsc/logging';
+import { AbsoluteFsPath, FileSystem } from '../../../../src/ngtsc/file_system/index.js';
+import { Logger } from '../../../../src/ngtsc/logging/index.js';
 /**
  * Remove the lock-file at the provided `lockFilePath` from the given file-system.
  *
diff --git a/ngcc/src/locking/sync_locker.d.ts b/ngcc/src/locking/sync_locker.d.ts
index 8e5e69cc43f6f7f455a08c68f5a3dcdaf8b5056e..223a87544aea1f20bfb6b741598f5a9245feae20 100755
--- a/ngcc/src/locking/sync_locker.d.ts
+++ b/ngcc/src/locking/sync_locker.d.ts
@@ -6,7 +6,7 @@
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
  */
-import { LockFile } from './lock_file';
+import { LockFile } from './lock_file.js';
 /**
  * SyncLocker is used to prevent more than one instance of ngcc executing at the same time,
  * when being called in a synchronous context.
diff --git a/ngcc/src/main.d.ts b/ngcc/src/main.d.ts
index 30cb0aeebccd94c301b25447c077f567e0eccedd..8e3d01b45f25c7008b4711468e0bd33d4018448e 100755
--- a/ngcc/src/main.d.ts
+++ b/ngcc/src/main.d.ts
@@ -6,7 +6,7 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/ngcc/src/main" />
-import { AsyncNgccOptions, SyncNgccOptions } from './ngcc_options';
+import { AsyncNgccOptions, SyncNgccOptions } from './ngcc_options.js';
 /**
  * This is the main entry-point into ngcc (aNGular Compatibility Compiler).
  *
diff --git a/ngcc/src/migrations/migration.d.ts b/ngcc/src/migrations/migration.d.ts
index 5500186c37f5f7695b8cf41259d6489d46169e4f..bf657d6add927c173915ed56d32943107d6044cf 100755
--- a/ngcc/src/migrations/migration.d.ts
+++ b/ngcc/src/migrations/migration.d.ts
@@ -7,11 +7,11 @@
  * found in the LICENSE file at https://angular.io/license
  */
 import ts from 'typescript';
-import { MetadataReader } from '../../../src/ngtsc/metadata';
-import { PartialEvaluator } from '../../../src/ngtsc/partial_evaluator';
-import { ClassDeclaration, Decorator } from '../../../src/ngtsc/reflection';
-import { HandlerFlags } from '../../../src/ngtsc/transform';
-import { NgccReflectionHost } from '../host/ngcc_host';
+import { MetadataReader } from '../../../src/ngtsc/metadata/index.js';
+import { PartialEvaluator } from '../../../src/ngtsc/partial_evaluator/index.js';
+import { ClassDeclaration, Decorator } from '../../../src/ngtsc/reflection/index.js';
+import { HandlerFlags } from '../../../src/ngtsc/transform/index.js';
+import { NgccReflectionHost } from '../host/ngcc_host.js';
 /**
  * Implement this interface and add it to the `DecorationAnalyzer.migrations` collection to get ngcc
  * to modify the analysis of the decorators in the program in order to migrate older code to work
diff --git a/ngcc/src/migrations/missing_injectable_migration.d.ts b/ngcc/src/migrations/missing_injectable_migration.d.ts
index bca2c507f2c1d6925f419b1d656796ff6473b576..abd4366042dfa034e1b6dc25881eb759679fe791 100755
--- a/ngcc/src/migrations/missing_injectable_migration.d.ts
+++ b/ngcc/src/migrations/missing_injectable_migration.d.ts
@@ -7,8 +7,8 @@
  * found in the LICENSE file at https://angular.io/license
  */
 import ts from 'typescript';
-import { ClassDeclaration, Decorator } from '../../../src/ngtsc/reflection';
-import { Migration, MigrationHost } from './migration';
+import { ClassDeclaration, Decorator } from '../../../src/ngtsc/reflection/index.js';
+import { Migration, MigrationHost } from './migration.js';
 /**
  * Ensures that classes that are provided as an Angular service in either `NgModule.providers` or
  * `Directive.providers`/`Component.viewProviders` are decorated with one of the `@Injectable`,
diff --git a/ngcc/src/migrations/undecorated_child_migration.d.ts b/ngcc/src/migrations/undecorated_child_migration.d.ts
index d4813e2cb571479f9154e9200e4e0f6716adae31..29741c99947f7a2c4a9e9cd8da503de15d75639e 100755
--- a/ngcc/src/migrations/undecorated_child_migration.d.ts
+++ b/ngcc/src/migrations/undecorated_child_migration.d.ts
@@ -7,9 +7,9 @@
  */
 /// <amd-module name="@angular/compiler-cli/ngcc/src/migrations/undecorated_child_migration" />
 import ts from 'typescript';
-import { Reference } from '../../../src/ngtsc/imports';
-import { ClassDeclaration } from '../../../src/ngtsc/reflection';
-import { Migration, MigrationHost } from './migration';
+import { Reference } from '../../../src/ngtsc/imports/index.js';
+import { ClassDeclaration } from '../../../src/ngtsc/reflection/index.js';
+import { Migration, MigrationHost } from './migration.js';
 export declare class UndecoratedChildMigration implements Migration {
     apply(clazz: ClassDeclaration, host: MigrationHost): ts.Diagnostic | null;
     maybeMigrate(ref: Reference<ClassDeclaration>, host: MigrationHost): void;
diff --git a/ngcc/src/migrations/undecorated_parent_migration.d.ts b/ngcc/src/migrations/undecorated_parent_migration.d.ts
index a961fba641ca2a167dbb56ca880c766b54b02f37..8c258ac533dc574c54063a044f537c939a782235 100755
--- a/ngcc/src/migrations/undecorated_parent_migration.d.ts
+++ b/ngcc/src/migrations/undecorated_parent_migration.d.ts
@@ -7,8 +7,8 @@
  * found in the LICENSE file at https://angular.io/license
  */
 import ts from 'typescript';
-import { ClassDeclaration } from '../../../src/ngtsc/reflection';
-import { Migration, MigrationHost } from './migration';
+import { ClassDeclaration } from '../../../src/ngtsc/reflection/index.js';
+import { Migration, MigrationHost } from './migration.js';
 /**
  * Ensure that the parents of directives and components that have no constructor are also decorated
  * as a `Directive`.
diff --git a/ngcc/src/migrations/utils.d.ts b/ngcc/src/migrations/utils.d.ts
index cdb20e3bd31dd9e67f2c27d8209e7efd7639d2be..368ea7b43a094e1f7761390cc3db72bdad1d8eb8 100755
--- a/ngcc/src/migrations/utils.d.ts
+++ b/ngcc/src/migrations/utils.d.ts
@@ -7,8 +7,8 @@
  * found in the LICENSE file at https://angular.io/license
  */
 import ts from 'typescript';
-import { ClassDeclaration, Decorator } from '../../../src/ngtsc/reflection';
-import { MigrationHost } from './migration';
+import { ClassDeclaration, Decorator } from '../../../src/ngtsc/reflection/index.js';
+import { MigrationHost } from './migration.js';
 export declare function isClassDeclaration(clazz: ts.Node): clazz is ClassDeclaration<ts.Declaration>;
 /**
  * Returns true if the `clazz` is decorated as a `Directive` or `Component`.
diff --git a/ngcc/src/ngcc_options.d.ts b/ngcc/src/ngcc_options.d.ts
index 832181e17d22ab3281dc7aae0e048f9a810f2061..0c1a10480effb8c6178f4bcdc04820411222efa5 100755
--- a/ngcc/src/ngcc_options.d.ts
+++ b/ngcc/src/ngcc_options.d.ts
@@ -1,10 +1,10 @@
 /// <amd-module name="@angular/compiler-cli/ngcc/src/ngcc_options" />
-import { AbsoluteFsPath, FileSystem } from '../../src/ngtsc/file_system';
-import { Logger } from '../../src/ngtsc/logging';
-import { ParsedConfiguration } from '../../src/perform_compile';
-import { PathMappings } from './path_mappings';
-import { FileWriter } from './writing/file_writer';
-import { PackageJsonUpdater } from './writing/package_json_updater';
+import { AbsoluteFsPath, FileSystem } from '../../src/ngtsc/file_system/index.js';
+import { Logger } from '../../src/ngtsc/logging/index.js';
+import { ParsedConfiguration } from '../../src/perform_compile.js';
+import { PathMappings } from './path_mappings.js';
+import { FileWriter } from './writing/file_writer.js';
+import { PackageJsonUpdater } from './writing/package_json_updater.js';
 /**
  * The options to configure the ngcc compiler for synchronous execution.
  */
diff --git a/ngcc/src/packages/build_marker.d.ts b/ngcc/src/packages/build_marker.d.ts
index c77f87a4b9cd01556d5764d6cf10229ac1202134..aa14fff962ec679f12aa21ec5e9582841913aebd 100755
--- a/ngcc/src/packages/build_marker.d.ts
+++ b/ngcc/src/packages/build_marker.d.ts
@@ -6,9 +6,9 @@
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
  */
-import { AbsoluteFsPath } from '../../../src/ngtsc/file_system';
-import { PackageJsonUpdater } from '../writing/package_json_updater';
-import { EntryPointPackageJson, PackageJsonFormatProperties } from './entry_point';
+import { AbsoluteFsPath } from '../../../src/ngtsc/file_system/index.js';
+import { PackageJsonUpdater } from '../writing/package_json_updater.js';
+import { EntryPointPackageJson, PackageJsonFormatProperties } from './entry_point.js';
 export declare const NGCC_VERSION = "14.0.0-rc.0";
 /**
  * Returns true if there is a format in this entry-point that was compiled with an outdated version
diff --git a/ngcc/src/packages/bundle_program.d.ts b/ngcc/src/packages/bundle_program.d.ts
index 0e101e2ff44200836209f4b4122b4be702633ea0..dfa1dc231e04025198c1c561cd9d7dca6d89a0b7 100755
--- a/ngcc/src/packages/bundle_program.d.ts
+++ b/ngcc/src/packages/bundle_program.d.ts
@@ -7,7 +7,7 @@
  * found in the LICENSE file at https://angular.io/license
  */
 import ts from 'typescript';
-import { AbsoluteFsPath, ReadonlyFileSystem } from '../../../src/ngtsc/file_system';
+import { AbsoluteFsPath, ReadonlyFileSystem } from '../../../src/ngtsc/file_system/index.js';
 /**
  * An entry point bundle contains one or two programs, e.g. `src` and `dts`,
  * that are compiled via TypeScript.
diff --git a/ngcc/src/packages/configuration.d.ts b/ngcc/src/packages/configuration.d.ts
index 1a3d1ec64be2b618e2654c1edc9973a2b4f61284..0cf1162949ce129d9a150363ca478163ddfc3619 100755
--- a/ngcc/src/packages/configuration.d.ts
+++ b/ngcc/src/packages/configuration.d.ts
@@ -1,6 +1,6 @@
 /// <amd-module name="@angular/compiler-cli/ngcc/src/packages/configuration" />
-import { AbsoluteFsPath, PathManipulation, ReadonlyFileSystem } from '../../../src/ngtsc/file_system';
-import { PackageJsonFormatPropertiesMap } from './entry_point';
+import { AbsoluteFsPath, PathManipulation, ReadonlyFileSystem } from '../../../src/ngtsc/file_system/index.js';
+import { PackageJsonFormatPropertiesMap } from './entry_point.js';
 /**
  * The format of a project level configuration file.
  */
diff --git a/ngcc/src/packages/entry_point.d.ts b/ngcc/src/packages/entry_point.d.ts
index f884a2e29bb378991c62abc0763b7bb7c90fe05c..9adc15068c2c713e9f96d788b404f32a0346360f 100755
--- a/ngcc/src/packages/entry_point.d.ts
+++ b/ngcc/src/packages/entry_point.d.ts
@@ -1,8 +1,8 @@
 /// <amd-module name="@angular/compiler-cli/ngcc/src/packages/entry_point" />
-import { AbsoluteFsPath, ReadonlyFileSystem } from '../../../src/ngtsc/file_system';
-import { Logger } from '../../../src/ngtsc/logging';
-import { JsonObject } from '../utils';
-import { NgccConfiguration } from './configuration';
+import { AbsoluteFsPath, ReadonlyFileSystem } from '../../../src/ngtsc/file_system/index.js';
+import { Logger } from '../../../src/ngtsc/logging/index.js';
+import { JsonObject } from '../utils.js';
+import { NgccConfiguration } from './configuration.js';
 /**
  * The possible values for the format of an entry-point.
  */
diff --git a/ngcc/src/packages/entry_point_bundle.d.ts b/ngcc/src/packages/entry_point_bundle.d.ts
index c9e5a09ed46448009b07b3bee77277385e051685..76fef677451de2619c0797c99061bbd5822df75a 100755
--- a/ngcc/src/packages/entry_point_bundle.d.ts
+++ b/ngcc/src/packages/entry_point_bundle.d.ts
@@ -7,12 +7,12 @@
  * found in the LICENSE file at https://angular.io/license
  */
 import ts from 'typescript';
-import { AbsoluteFsPath, FileSystem } from '../../../src/ngtsc/file_system';
-import { DtsProcessing } from '../execution/tasks/api';
-import { PathMappings } from '../path_mappings';
-import { BundleProgram } from './bundle_program';
-import { EntryPoint, EntryPointFormat } from './entry_point';
-import { SharedFileCache } from './source_file_cache';
+import { AbsoluteFsPath, FileSystem } from '../../../src/ngtsc/file_system/index.js';
+import { DtsProcessing } from '../execution/tasks/api.js';
+import { PathMappings } from '../path_mappings.js';
+import { BundleProgram } from './bundle_program.js';
+import { EntryPoint, EntryPointFormat } from './entry_point.js';
+import { SharedFileCache } from './source_file_cache.js';
 /**
  * A bundle of files and paths (and TS programs) that correspond to a particular
  * format of a package entry-point.
diff --git a/ngcc/src/packages/entry_point_manifest.d.ts b/ngcc/src/packages/entry_point_manifest.d.ts
index cf1f9d36a47a2d3b6804b555640a0d9a93da4838..25f75ae5720b30b3df101d6822481bd2e959fc99 100755
--- a/ngcc/src/packages/entry_point_manifest.d.ts
+++ b/ngcc/src/packages/entry_point_manifest.d.ts
@@ -1,9 +1,9 @@
 /// <amd-module name="@angular/compiler-cli/ngcc/src/packages/entry_point_manifest" />
-import { AbsoluteFsPath, FileSystem, PathSegment } from '../../../src/ngtsc/file_system';
-import { Logger } from '../../../src/ngtsc/logging';
-import { EntryPointWithDependencies } from '../dependencies/dependency_host';
-import { NgccConfiguration } from './configuration';
-import { PackageJsonFormatProperties } from './entry_point';
+import { AbsoluteFsPath, FileSystem, PathSegment } from '../../../src/ngtsc/file_system/index.js';
+import { Logger } from '../../../src/ngtsc/logging/index.js';
+import { EntryPointWithDependencies } from '../dependencies/dependency_host.js';
+import { NgccConfiguration } from './configuration.js';
+import { PackageJsonFormatProperties } from './entry_point.js';
 /**
  * Manages reading and writing a manifest file that contains a list of all the entry-points that
  * were found below a given basePath.
diff --git a/ngcc/src/packages/ngcc_compiler_host.d.ts b/ngcc/src/packages/ngcc_compiler_host.d.ts
index 69ce29aa14714ad9dbb348c99e4b2a73a532aaf7..e2a46a511f8f08f66030064588f37713bda0a9d2 100755
--- a/ngcc/src/packages/ngcc_compiler_host.d.ts
+++ b/ngcc/src/packages/ngcc_compiler_host.d.ts
@@ -7,8 +7,8 @@
  * found in the LICENSE file at https://angular.io/license
  */
 import ts from 'typescript';
-import { AbsoluteFsPath, FileSystem, NgtscCompilerHost } from '../../../src/ngtsc/file_system';
-import { EntryPointFileCache } from './source_file_cache';
+import { AbsoluteFsPath, FileSystem, NgtscCompilerHost } from '../../../src/ngtsc/file_system/index.js';
+import { EntryPointFileCache } from './source_file_cache.js';
 /**
  * Represents a compiler host that resolves a module import as a JavaScript source file if
  * available, instead of the .d.ts typings file that would have been resolved by TypeScript. This
diff --git a/ngcc/src/packages/source_file_cache.d.ts b/ngcc/src/packages/source_file_cache.d.ts
index 681bd467bd09f7283f309ee5043ccc03ff897015..6d7f33c733ccb12311e75f1a31f372dbeb92cde1 100755
--- a/ngcc/src/packages/source_file_cache.d.ts
+++ b/ngcc/src/packages/source_file_cache.d.ts
@@ -7,7 +7,7 @@
  * found in the LICENSE file at https://angular.io/license
  */
 import ts from 'typescript';
-import { AbsoluteFsPath, ReadonlyFileSystem } from '../../../src/ngtsc/file_system';
+import { AbsoluteFsPath, ReadonlyFileSystem } from '../../../src/ngtsc/file_system/index.js';
 /**
  * A cache that holds on to source files that can be shared for processing all entry-points in a
  * single invocation of ngcc. In particular, the following files are shared across all entry-points
diff --git a/ngcc/src/packages/transformer.d.ts b/ngcc/src/packages/transformer.d.ts
index 734bfcce3ef72e72503c675c654348449d6e83a6..4251e042b8aa0d2a5fe68d2f9b694dbf43e46fe9 100755
--- a/ngcc/src/packages/transformer.d.ts
+++ b/ngcc/src/packages/transformer.d.ts
@@ -7,16 +7,16 @@
  * found in the LICENSE file at https://angular.io/license
  */
 import ts from 'typescript';
-import { ParsedConfiguration } from '../../..';
-import { ReadonlyFileSystem } from '../../../src/ngtsc/file_system';
-import { Logger } from '../../../src/ngtsc/logging';
-import { ModuleWithProvidersAnalyses } from '../analysis/module_with_providers_analyzer';
-import { ExportInfo } from '../analysis/private_declarations_analyzer';
-import { CompiledFile } from '../analysis/types';
-import { NgccReflectionHost } from '../host/ngcc_host';
-import { RenderingFormatter } from '../rendering/rendering_formatter';
-import { FileToWrite } from '../rendering/utils';
-import { EntryPointBundle } from './entry_point_bundle';
+import { ParsedConfiguration } from '../../../index.js';
+import { ReadonlyFileSystem } from '../../../src/ngtsc/file_system/index.js';
+import { Logger } from '../../../src/ngtsc/logging/index.js';
+import { ModuleWithProvidersAnalyses } from '../analysis/module_with_providers_analyzer.js';
+import { ExportInfo } from '../analysis/private_declarations_analyzer.js';
+import { CompiledFile } from '../analysis/types.js';
+import { NgccReflectionHost } from '../host/ngcc_host.js';
+import { RenderingFormatter } from '../rendering/rendering_formatter.js';
+import { FileToWrite } from '../rendering/utils.js';
+import { EntryPointBundle } from './entry_point_bundle.js';
 export declare type TransformResult = {
     success: true;
     diagnostics: ts.Diagnostic[];
diff --git a/ngcc/src/path_mappings.d.ts b/ngcc/src/path_mappings.d.ts
index c14f2bff6beac13fa540e4eb31ead427b54127c1..e013715d4263d76648c0d6f9fdddecee173742c0 100755
--- a/ngcc/src/path_mappings.d.ts
+++ b/ngcc/src/path_mappings.d.ts
@@ -6,8 +6,8 @@
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
  */
-import { AbsoluteFsPath, PathManipulation } from '../../src/ngtsc/file_system';
-import { ParsedConfiguration } from '../../src/perform_compile';
+import { AbsoluteFsPath, PathManipulation } from '../../src/ngtsc/file_system/index.js';
+import { ParsedConfiguration } from '../../src/perform_compile.js';
 export declare type PathMappings = {
     baseUrl: string;
     paths: {
diff --git a/ngcc/src/rendering/commonjs_rendering_formatter.d.ts b/ngcc/src/rendering/commonjs_rendering_formatter.d.ts
index eae5a5a2492f157c060df53841acf0f8ff9b3fa4..c3a6562ac37290ac6e0a210c3ac8c8122c33630d 100755
--- a/ngcc/src/rendering/commonjs_rendering_formatter.d.ts
+++ b/ngcc/src/rendering/commonjs_rendering_formatter.d.ts
@@ -8,12 +8,12 @@
  */
 import MagicString from 'magic-string';
 import ts from 'typescript';
-import { PathManipulation } from '../../../src/ngtsc/file_system';
-import { Reexport } from '../../../src/ngtsc/imports';
-import { Import, ImportManager } from '../../../src/ngtsc/translator';
-import { ExportInfo } from '../analysis/private_declarations_analyzer';
-import { NgccReflectionHost } from '../host/ngcc_host';
-import { Esm5RenderingFormatter } from './esm5_rendering_formatter';
+import { PathManipulation } from '../../../src/ngtsc/file_system/index.js';
+import { Reexport } from '../../../src/ngtsc/imports/index.js';
+import { Import, ImportManager } from '../../../src/ngtsc/translator/index.js';
+import { ExportInfo } from '../analysis/private_declarations_analyzer.js';
+import { NgccReflectionHost } from '../host/ngcc_host.js';
+import { Esm5RenderingFormatter } from './esm5_rendering_formatter.js';
 /**
  * A RenderingFormatter that works with CommonJS files, instead of `import` and `export` statements
  * the module is an IIFE with a factory function call with dependencies, which are defined in a
diff --git a/ngcc/src/rendering/dts_renderer.d.ts b/ngcc/src/rendering/dts_renderer.d.ts
index b23bd6dc08a685b6359188d4e7784c30295931eb..33ea3ded8ff477772e3bf9269e08f9150dec8bf8 100755
--- a/ngcc/src/rendering/dts_renderer.d.ts
+++ b/ngcc/src/rendering/dts_renderer.d.ts
@@ -1,16 +1,16 @@
 /// <amd-module name="@angular/compiler-cli/ngcc/src/rendering/dts_renderer" />
 import ts from 'typescript';
-import { ReadonlyFileSystem } from '../../../src/ngtsc/file_system';
-import { Reexport } from '../../../src/ngtsc/imports';
-import { Logger } from '../../../src/ngtsc/logging';
-import { CompileResult } from '../../../src/ngtsc/transform';
-import { ModuleWithProvidersAnalyses, ModuleWithProvidersInfo } from '../analysis/module_with_providers_analyzer';
-import { ExportInfo, PrivateDeclarationsAnalyses } from '../analysis/private_declarations_analyzer';
-import { DecorationAnalyses } from '../analysis/types';
-import { NgccReflectionHost } from '../host/ngcc_host';
-import { EntryPointBundle } from '../packages/entry_point_bundle';
-import { RenderingFormatter } from './rendering_formatter';
-import { FileToWrite } from './utils';
+import { ReadonlyFileSystem } from '../../../src/ngtsc/file_system/index.js';
+import { Reexport } from '../../../src/ngtsc/imports/index.js';
+import { Logger } from '../../../src/ngtsc/logging/index.js';
+import { CompileResult } from '../../../src/ngtsc/transform/index.js';
+import { ModuleWithProvidersAnalyses, ModuleWithProvidersInfo } from '../analysis/module_with_providers_analyzer.js';
+import { ExportInfo, PrivateDeclarationsAnalyses } from '../analysis/private_declarations_analyzer.js';
+import { DecorationAnalyses } from '../analysis/types.js';
+import { NgccReflectionHost } from '../host/ngcc_host.js';
+import { EntryPointBundle } from '../packages/entry_point_bundle.js';
+import { RenderingFormatter } from './rendering_formatter.js';
+import { FileToWrite } from './utils.js';
 /**
  * A structure that captures information about what needs to be rendered
  * in a typings file.
diff --git a/ngcc/src/rendering/esm5_rendering_formatter.d.ts b/ngcc/src/rendering/esm5_rendering_formatter.d.ts
index 66123109cbf03b14b184a7cf70d0f6e6e82461d4..ae2cc0a55b78fda9f1d27de2ded70c8b15b8443d 100755
--- a/ngcc/src/rendering/esm5_rendering_formatter.d.ts
+++ b/ngcc/src/rendering/esm5_rendering_formatter.d.ts
@@ -9,9 +9,9 @@
 import { Statement } from '@angular/compiler';
 import MagicString from 'magic-string';
 import ts from 'typescript';
-import { ImportManager } from '../../../src/ngtsc/translator';
-import { CompiledClass } from '../analysis/types';
-import { EsmRenderingFormatter } from './esm_rendering_formatter';
+import { ImportManager } from '../../../src/ngtsc/translator/index.js';
+import { CompiledClass } from '../analysis/types.js';
+import { EsmRenderingFormatter } from './esm_rendering_formatter.js';
 /**
  * A RenderingFormatter that works with files that use ECMAScript Module `import` and `export`
  * statements, but instead of `class` declarations it uses ES5 `function` wrappers for classes.
diff --git a/ngcc/src/rendering/esm_rendering_formatter.d.ts b/ngcc/src/rendering/esm_rendering_formatter.d.ts
index c5d2193773d35acd5765079fe5a76c2dbb033857..ff5ce701e8088044716a27d502565326360dcc66 100755
--- a/ngcc/src/rendering/esm_rendering_formatter.d.ts
+++ b/ngcc/src/rendering/esm_rendering_formatter.d.ts
@@ -9,14 +9,14 @@
 import { Statement } from '@angular/compiler';
 import MagicString from 'magic-string';
 import ts from 'typescript';
-import { AbsoluteFsPath, PathManipulation } from '../../../src/ngtsc/file_system';
-import { Reexport } from '../../../src/ngtsc/imports';
-import { Import, ImportManager } from '../../../src/ngtsc/translator';
-import { ModuleWithProvidersInfo } from '../analysis/module_with_providers_analyzer';
-import { ExportInfo } from '../analysis/private_declarations_analyzer';
-import { CompiledClass } from '../analysis/types';
-import { NgccReflectionHost } from '../host/ngcc_host';
-import { RedundantDecoratorMap, RenderingFormatter } from './rendering_formatter';
+import { AbsoluteFsPath, PathManipulation } from '../../../src/ngtsc/file_system/index.js';
+import { Reexport } from '../../../src/ngtsc/imports/index.js';
+import { Import, ImportManager } from '../../../src/ngtsc/translator/index.js';
+import { ModuleWithProvidersInfo } from '../analysis/module_with_providers_analyzer.js';
+import { ExportInfo } from '../analysis/private_declarations_analyzer.js';
+import { CompiledClass } from '../analysis/types.js';
+import { NgccReflectionHost } from '../host/ngcc_host.js';
+import { RedundantDecoratorMap, RenderingFormatter } from './rendering_formatter.js';
 /**
  * A RenderingFormatter that works with ECMAScript Module import and export statements.
  */
diff --git a/ngcc/src/rendering/ngcc_import_rewriter.d.ts b/ngcc/src/rendering/ngcc_import_rewriter.d.ts
index de6e0c7467b058cf606c41405fbf41d282397a63..00210d6a53bbeebbcd0093f6538aa012feba0fb1 100755
--- a/ngcc/src/rendering/ngcc_import_rewriter.d.ts
+++ b/ngcc/src/rendering/ngcc_import_rewriter.d.ts
@@ -6,7 +6,7 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/ngcc/src/rendering/ngcc_import_rewriter" />
-import { ImportRewriter } from '../../../src/ngtsc/imports';
+import { ImportRewriter } from '../../../src/ngtsc/imports/index.js';
 export declare class NgccFlatImportRewriter implements ImportRewriter {
     shouldImportSymbol(symbol: string, specifier: string): boolean;
     rewriteSymbol(symbol: string, specifier: string): string;
diff --git a/ngcc/src/rendering/renderer.d.ts b/ngcc/src/rendering/renderer.d.ts
index 807a069e1fb22f11b6b18451435cbebef0a7155e..e8c3084c3356926c44daa4da6b2fe4eed7a53fe3 100755
--- a/ngcc/src/rendering/renderer.d.ts
+++ b/ngcc/src/rendering/renderer.d.ts
@@ -8,16 +8,16 @@
  */
 import { ConstantPool } from '@angular/compiler';
 import ts from 'typescript';
-import { ReadonlyFileSystem } from '../../../src/ngtsc/file_system';
-import { Logger } from '../../../src/ngtsc/logging';
-import { ImportManager } from '../../../src/ngtsc/translator';
-import { ParsedConfiguration } from '../../../src/perform_compile';
-import { PrivateDeclarationsAnalyses } from '../analysis/private_declarations_analyzer';
-import { CompiledFile, DecorationAnalyses } from '../analysis/types';
-import { NgccReflectionHost } from '../host/ngcc_host';
-import { EntryPointBundle } from '../packages/entry_point_bundle';
-import { RenderingFormatter } from './rendering_formatter';
-import { FileToWrite } from './utils';
+import { ReadonlyFileSystem } from '../../../src/ngtsc/file_system/index.js';
+import { Logger } from '../../../src/ngtsc/logging/index.js';
+import { ImportManager } from '../../../src/ngtsc/translator/index.js';
+import { ParsedConfiguration } from '../../../src/perform_compile.js';
+import { PrivateDeclarationsAnalyses } from '../analysis/private_declarations_analyzer.js';
+import { CompiledFile, DecorationAnalyses } from '../analysis/types.js';
+import { NgccReflectionHost } from '../host/ngcc_host.js';
+import { EntryPointBundle } from '../packages/entry_point_bundle.js';
+import { RenderingFormatter } from './rendering_formatter.js';
+import { FileToWrite } from './utils.js';
 /**
  * A base-class for rendering an `AnalyzedFile`.
  *
diff --git a/ngcc/src/rendering/rendering_formatter.d.ts b/ngcc/src/rendering/rendering_formatter.d.ts
index 7aa7b4cb2dbd504d19c57c2331072fcfb4c68a0d..4e9f6b4c8fab6ecbcfc51648ea963c4e9eeae81b 100755
--- a/ngcc/src/rendering/rendering_formatter.d.ts
+++ b/ngcc/src/rendering/rendering_formatter.d.ts
@@ -9,11 +9,11 @@
 import { Statement } from '@angular/compiler';
 import MagicString from 'magic-string';
 import ts from 'typescript';
-import { Reexport } from '../../../src/ngtsc/imports';
-import { Import, ImportManager } from '../../../src/ngtsc/translator';
-import { ModuleWithProvidersInfo } from '../analysis/module_with_providers_analyzer';
-import { ExportInfo } from '../analysis/private_declarations_analyzer';
-import { CompiledClass } from '../analysis/types';
+import { Reexport } from '../../../src/ngtsc/imports/index.js';
+import { Import, ImportManager } from '../../../src/ngtsc/translator/index.js';
+import { ModuleWithProvidersInfo } from '../analysis/module_with_providers_analyzer.js';
+import { ExportInfo } from '../analysis/private_declarations_analyzer.js';
+import { CompiledClass } from '../analysis/types.js';
 /**
  * The collected decorators that have become redundant after the compilation
  * of Ivy static fields. The map is keyed by the container node, such that we
diff --git a/ngcc/src/rendering/source_maps.d.ts b/ngcc/src/rendering/source_maps.d.ts
index 28f031d5afb8a1c2f13b09974006b477092d891a..a2d6eed73c33e3e0b7fc561bc494fc53230e1f3c 100755
--- a/ngcc/src/rendering/source_maps.d.ts
+++ b/ngcc/src/rendering/source_maps.d.ts
@@ -9,9 +9,9 @@
 import mapHelpers from 'convert-source-map';
 import MagicString from 'magic-string';
 import ts from 'typescript';
-import { ReadonlyFileSystem } from '../../../src/ngtsc/file_system';
-import { Logger } from '../../../src/ngtsc/logging';
-import { FileToWrite } from './utils';
+import { ReadonlyFileSystem } from '../../../src/ngtsc/file_system/index.js';
+import { Logger } from '../../../src/ngtsc/logging/index.js';
+import { FileToWrite } from './utils.js';
 export interface SourceMapInfo {
     source: string;
     map: mapHelpers.SourceMapConverter | null;
diff --git a/ngcc/src/rendering/umd_rendering_formatter.d.ts b/ngcc/src/rendering/umd_rendering_formatter.d.ts
index ea723f9868af3b778e631ea48c6d0e5c7a233c66..b9920811a1f680e70885c95d3083271dcf015346 100755
--- a/ngcc/src/rendering/umd_rendering_formatter.d.ts
+++ b/ngcc/src/rendering/umd_rendering_formatter.d.ts
@@ -8,12 +8,12 @@
  */
 import MagicString from 'magic-string';
 import ts from 'typescript';
-import { PathManipulation } from '../../../src/ngtsc/file_system';
-import { Reexport } from '../../../src/ngtsc/imports';
-import { Import, ImportManager } from '../../../src/ngtsc/translator';
-import { ExportInfo } from '../analysis/private_declarations_analyzer';
-import { UmdReflectionHost } from '../host/umd_host';
-import { Esm5RenderingFormatter } from './esm5_rendering_formatter';
+import { PathManipulation } from '../../../src/ngtsc/file_system/index.js';
+import { Reexport } from '../../../src/ngtsc/imports/index.js';
+import { Import, ImportManager } from '../../../src/ngtsc/translator/index.js';
+import { ExportInfo } from '../analysis/private_declarations_analyzer.js';
+import { UmdReflectionHost } from '../host/umd_host.js';
+import { Esm5RenderingFormatter } from './esm5_rendering_formatter.js';
 /**
  * A RenderingFormatter that works with UMD files, instead of `import` and `export` statements
  * the module is an IIFE with a factory function call with dependencies, which are defined in a
diff --git a/ngcc/src/rendering/utils.d.ts b/ngcc/src/rendering/utils.d.ts
index 121aac134a27b109bd3bb5352c8c388ebf77e9da..28cd1307d09c49d6613d1fc862072e74a93dcf47 100755
--- a/ngcc/src/rendering/utils.d.ts
+++ b/ngcc/src/rendering/utils.d.ts
@@ -7,8 +7,8 @@
  * found in the LICENSE file at https://angular.io/license
  */
 import ts from 'typescript';
-import { AbsoluteFsPath } from '../../../src/ngtsc/file_system';
-import { ImportRewriter } from '../../../src/ngtsc/imports';
+import { AbsoluteFsPath } from '../../../src/ngtsc/file_system/index.js';
+import { ImportRewriter } from '../../../src/ngtsc/imports/index.js';
 /**
  * Information about a file that has been rendered.
  */
diff --git a/ngcc/src/utils.d.ts b/ngcc/src/utils.d.ts
index d8706c93a19970a7dea39a9ace9f0f0968e94d57..ef650e9bbae07293c32d32bd0d4100430ac5212a 100755
--- a/ngcc/src/utils.d.ts
+++ b/ngcc/src/utils.d.ts
@@ -7,8 +7,8 @@
  * found in the LICENSE file at https://angular.io/license
  */
 import ts from 'typescript';
-import { AbsoluteFsPath, ReadonlyFileSystem } from '../../src/ngtsc/file_system';
-import { DeclarationNode, KnownDeclaration } from '../../src/ngtsc/reflection';
+import { AbsoluteFsPath, ReadonlyFileSystem } from '../../src/ngtsc/file_system/index.js';
+import { DeclarationNode, KnownDeclaration } from '../../src/ngtsc/reflection/index.js';
 export declare type JsonPrimitive = string | number | boolean | null;
 export declare type JsonValue = JsonPrimitive | JsonArray | JsonObject | undefined;
 export interface JsonArray extends Array<JsonValue> {
diff --git a/ngcc/src/writing/cleaning/cleaning_strategies.d.ts b/ngcc/src/writing/cleaning/cleaning_strategies.d.ts
index 8febaaee820f67f1f3117aacd888d8e74ef4f66d..ca36d50ead6b29c20f67bfa5f65adb27f26501a1 100755
--- a/ngcc/src/writing/cleaning/cleaning_strategies.d.ts
+++ b/ngcc/src/writing/cleaning/cleaning_strategies.d.ts
@@ -6,7 +6,7 @@
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
  */
-import { AbsoluteFsPath, FileSystem, PathSegment } from '../../../../src/ngtsc/file_system';
+import { AbsoluteFsPath, FileSystem, PathSegment } from '../../../../src/ngtsc/file_system/index.js';
 /**
  * Implement this interface to extend the cleaning strategies of the `PackageCleaner`.
  */
diff --git a/ngcc/src/writing/cleaning/package_cleaner.d.ts b/ngcc/src/writing/cleaning/package_cleaner.d.ts
index 2b09398ace7117a63922ce32a655b4ee35d709fa..14f90b8493cf54ca44145915ea3385ffdcbc6cbe 100755
--- a/ngcc/src/writing/cleaning/package_cleaner.d.ts
+++ b/ngcc/src/writing/cleaning/package_cleaner.d.ts
@@ -6,9 +6,9 @@
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
  */
-import { AbsoluteFsPath, FileSystem, ReadonlyFileSystem } from '../../../../src/ngtsc/file_system';
-import { EntryPoint } from '../../packages/entry_point';
-import { CleaningStrategy } from './cleaning_strategies';
+import { AbsoluteFsPath, FileSystem, ReadonlyFileSystem } from '../../../../src/ngtsc/file_system/index.js';
+import { EntryPoint } from '../../packages/entry_point.js';
+import { CleaningStrategy } from './cleaning_strategies.js';
 /**
  * A class that can clean ngcc artifacts from a directory.
  */
diff --git a/ngcc/src/writing/cleaning/utils.d.ts b/ngcc/src/writing/cleaning/utils.d.ts
index 8ed81ac2fc72f75a03541f781060a572e32fb859..1bfe5a05cf21c169db838fd2f02a174d51818bb9 100755
--- a/ngcc/src/writing/cleaning/utils.d.ts
+++ b/ngcc/src/writing/cleaning/utils.d.ts
@@ -6,7 +6,7 @@
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
  */
-import { AbsoluteFsPath, ReadonlyFileSystem } from '../../../../src/ngtsc/file_system';
+import { AbsoluteFsPath, ReadonlyFileSystem } from '../../../../src/ngtsc/file_system/index.js';
 /**
  * Returns true if the given `path` is a directory (not a symlink) and actually exists.
  *
diff --git a/ngcc/src/writing/file_writer.d.ts b/ngcc/src/writing/file_writer.d.ts
index 78efdaa0262d0769e4a3569aa5428f4b0cedf19c..c262f1246fcccba37dea591978969daec706d1dd 100755
--- a/ngcc/src/writing/file_writer.d.ts
+++ b/ngcc/src/writing/file_writer.d.ts
@@ -6,10 +6,10 @@
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
  */
-import { AbsoluteFsPath } from '../../../src/ngtsc/file_system';
-import { EntryPoint, EntryPointJsonProperty } from '../packages/entry_point';
-import { EntryPointBundle } from '../packages/entry_point_bundle';
-import { FileToWrite } from '../rendering/utils';
+import { AbsoluteFsPath } from '../../../src/ngtsc/file_system/index.js';
+import { EntryPoint, EntryPointJsonProperty } from '../packages/entry_point.js';
+import { EntryPointBundle } from '../packages/entry_point_bundle.js';
+import { FileToWrite } from '../rendering/utils.js';
 /**
  * Responsible for writing out the transformed files to disk.
  */
diff --git a/ngcc/src/writing/in_place_file_writer.d.ts b/ngcc/src/writing/in_place_file_writer.d.ts
index d58e2aabd9d9aacf61526e819a2d0b8e6d087565..a1a2f7af571d1761883066b9d57da59376f304ce 100755
--- a/ngcc/src/writing/in_place_file_writer.d.ts
+++ b/ngcc/src/writing/in_place_file_writer.d.ts
@@ -6,12 +6,12 @@
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
  */
-import { AbsoluteFsPath, FileSystem } from '../../../src/ngtsc/file_system';
-import { Logger } from '../../../src/ngtsc/logging';
-import { EntryPoint, EntryPointJsonProperty } from '../packages/entry_point';
-import { EntryPointBundle } from '../packages/entry_point_bundle';
-import { FileToWrite } from '../rendering/utils';
-import { FileWriter } from './file_writer';
+import { AbsoluteFsPath, FileSystem } from '../../../src/ngtsc/file_system/index.js';
+import { Logger } from '../../../src/ngtsc/logging/index.js';
+import { EntryPoint, EntryPointJsonProperty } from '../packages/entry_point.js';
+import { EntryPointBundle } from '../packages/entry_point_bundle.js';
+import { FileToWrite } from '../rendering/utils.js';
+import { FileWriter } from './file_writer.js';
 export declare const NGCC_BACKUP_EXTENSION = ".__ivy_ngcc_bak";
 /**
  * This FileWriter overwrites the transformed file, in-place, while creating
diff --git a/ngcc/src/writing/new_entry_point_file_writer.d.ts b/ngcc/src/writing/new_entry_point_file_writer.d.ts
index e11a13840356e393d7c76bf51c4bf72b06c5bce4..4e089dfb18584ace976a064e75ae3c7b3f6b94db 100755
--- a/ngcc/src/writing/new_entry_point_file_writer.d.ts
+++ b/ngcc/src/writing/new_entry_point_file_writer.d.ts
@@ -6,13 +6,13 @@
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
  */
-import { AbsoluteFsPath, FileSystem } from '../../../src/ngtsc/file_system';
-import { Logger } from '../../../src/ngtsc/logging';
-import { EntryPoint, EntryPointJsonProperty } from '../packages/entry_point';
-import { EntryPointBundle } from '../packages/entry_point_bundle';
-import { FileToWrite } from '../rendering/utils';
-import { InPlaceFileWriter } from './in_place_file_writer';
-import { PackageJsonUpdater } from './package_json_updater';
+import { AbsoluteFsPath, FileSystem } from '../../../src/ngtsc/file_system/index.js';
+import { Logger } from '../../../src/ngtsc/logging/index.js';
+import { EntryPoint, EntryPointJsonProperty } from '../packages/entry_point.js';
+import { EntryPointBundle } from '../packages/entry_point_bundle.js';
+import { FileToWrite } from '../rendering/utils.js';
+import { InPlaceFileWriter } from './in_place_file_writer.js';
+import { PackageJsonUpdater } from './package_json_updater.js';
 export declare const NGCC_DIRECTORY = "__ivy_ngcc__";
 export declare const NGCC_PROPERTY_EXTENSION = "_ivy_ngcc";
 /**
diff --git a/ngcc/src/writing/package_json_updater.d.ts b/ngcc/src/writing/package_json_updater.d.ts
index 566ed0651ba83c3c7f540621983e3ad101ebe0f7..72c243cf4a523b3620cbf99656a1322536ab6145 100755
--- a/ngcc/src/writing/package_json_updater.d.ts
+++ b/ngcc/src/writing/package_json_updater.d.ts
@@ -6,8 +6,8 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/ngcc/src/writing/package_json_updater" />
-import { AbsoluteFsPath, FileSystem } from '../../../src/ngtsc/file_system';
-import { JsonObject, JsonValue } from '../utils';
+import { AbsoluteFsPath, FileSystem } from '../../../src/ngtsc/file_system/index.js';
+import { JsonObject, JsonValue } from '../utils.js';
 export declare type PackageJsonChange = [string[], JsonValue, PackageJsonPropertyPositioning];
 export declare type PackageJsonPropertyPositioning = 'unimportant' | 'alphabetic' | {
     before: string;
diff --git a/private/bazel.d.ts b/private/bazel.d.ts
index 596cb6eb65e68d2f3c3ba31d652ae82d1e8b419c..c6f3e9a52a6366f409dd5c46db4987bfe87a255c 100755
--- a/private/bazel.d.ts
+++ b/private/bazel.d.ts
@@ -10,4 +10,4 @@
  * @fileoverview The API from compiler-cli that the `@angular/bazel`
  * package requires for ngc-wrapped.
  */
-export { PerfPhase } from '../src/ngtsc/perf';
+export { PerfPhase } from '../src/ngtsc/perf/index.js';
diff --git a/private/localize.d.ts b/private/localize.d.ts
index 17afdaae8adf247967dd0df8ce4bc6949a128c62..637469e1d16e1f06ad5d037fc8539d845edc0a2b 100755
--- a/private/localize.d.ts
+++ b/private/localize.d.ts
@@ -10,6 +10,6 @@
  * @fileoverview The API from compiler-cli that the `@angular/localize`
  * package requires.
  */
-export * from '../src/ngtsc/logging';
-export * from '../src/ngtsc/file_system';
-export { SourceFile, SourceFileLoader } from '../src/ngtsc/sourcemaps';
+export * from '../src/ngtsc/logging/index.js';
+export * from '../src/ngtsc/file_system/index.js';
+export { SourceFile, SourceFileLoader } from '../src/ngtsc/sourcemaps/index.js';
diff --git a/private/migrations.d.ts b/private/migrations.d.ts
index 5e220be90cbbdd11c3bb08ec8a0d3ab46643ad41..d432e2d0d80493ca2fea0644ddad51d2db710815 100755
--- a/private/migrations.d.ts
+++ b/private/migrations.d.ts
@@ -10,7 +10,7 @@
  * @fileoverview The API from compiler-cli that the `@angular/core`
  * package requires for migration schematics.
  */
-export { forwardRefResolver } from '../src/ngtsc/annotations';
-export { Reference } from '../src/ngtsc/imports';
-export { DynamicValue, PartialEvaluator, ResolvedValue, ResolvedValueMap, StaticInterpreter } from '../src/ngtsc/partial_evaluator';
-export { reflectObjectLiteral, TypeScriptReflectionHost } from '../src/ngtsc/reflection';
+export { forwardRefResolver } from '../src/ngtsc/annotations/index.js';
+export { Reference } from '../src/ngtsc/imports/index.js';
+export { DynamicValue, PartialEvaluator, ResolvedValue, ResolvedValueMap, StaticInterpreter } from '../src/ngtsc/partial_evaluator/index.js';
+export { reflectObjectLiteral, TypeScriptReflectionHost } from '../src/ngtsc/reflection/index.js';
diff --git a/src/main.d.ts b/src/main.d.ts
index e62ec4f6f684553ca6e13cbfa5628060cf85761b..afc3321a6cb0aca386575a1a634722bd9841a521 100755
--- a/src/main.d.ts
+++ b/src/main.d.ts
@@ -7,8 +7,8 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/main" />
 import ts from 'typescript';
-import { ParsedConfiguration } from './perform_compile';
-import * as api from './transformers/api';
+import { ParsedConfiguration } from './perform_compile.js';
+import * as api from './transformers/api.js';
 declare type TsickleModule = typeof import('tsickle');
 export declare function main(args: string[], consoleError?: (s: string) => void, config?: NgcParsedConfiguration, customTransformers?: api.CustomTransformers, programReuse?: {
     program: api.Program | undefined;
diff --git a/src/ngtsc/annotations/common/index.d.ts b/src/ngtsc/annotations/common/index.d.ts
index a1602172f73a9a70d51cff8b1d67c4519bd9ca0e..425509123b9c6eee60ed2799b5e827e683fd3231 100755
--- a/src/ngtsc/annotations/common/index.d.ts
+++ b/src/ngtsc/annotations/common/index.d.ts
@@ -6,12 +6,12 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/annotations/common" />
-export * from './src/api';
-export * from './src/di';
-export * from './src/diagnostics';
-export * from './src/evaluation';
-export * from './src/factory';
-export * from './src/metadata';
-export * from './src/references_registry';
-export * from './src/schema';
-export * from './src/util';
+export * from './src/api.js';
+export * from './src/di.js';
+export * from './src/diagnostics.js';
+export * from './src/evaluation.js';
+export * from './src/factory.js';
+export * from './src/metadata.js';
+export * from './src/references_registry.js';
+export * from './src/schema.js';
+export * from './src/util.js';
diff --git a/src/ngtsc/annotations/common/src/di.d.ts b/src/ngtsc/annotations/common/src/di.d.ts
index 2e4c70d490be1f1366f4d132acd51642c54fc6b0..1feb6020153ebe2c9ac67ce5845d2d3b1b1ff701 100755
--- a/src/ngtsc/annotations/common/src/di.d.ts
+++ b/src/ngtsc/annotations/common/src/di.d.ts
@@ -7,7 +7,7 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/annotations/common/src/di" />
 import { R3DependencyMetadata } from '@angular/compiler';
-import { ClassDeclaration, CtorParameter, ReflectionHost, UnavailableValue } from '../../../reflection';
+import { ClassDeclaration, CtorParameter, ReflectionHost, UnavailableValue } from '../../../reflection/index.js';
 export declare type ConstructorDeps = {
     deps: R3DependencyMetadata[];
 } | {
diff --git a/src/ngtsc/annotations/common/src/diagnostics.d.ts b/src/ngtsc/annotations/common/src/diagnostics.d.ts
index 10f3fbe6c9c1060cc0ac94ef784f8966b5b6c5be..6d612ae3bf61106518c8f075633ea5bc98eee4b7 100755
--- a/src/ngtsc/annotations/common/src/diagnostics.d.ts
+++ b/src/ngtsc/annotations/common/src/diagnostics.d.ts
@@ -7,12 +7,12 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/annotations/common/src/diagnostics" />
 import ts from 'typescript';
-import { FatalDiagnosticError } from '../../../diagnostics';
-import { Reference } from '../../../imports';
-import { InjectableClassRegistry, MetadataReader } from '../../../metadata';
-import { PartialEvaluator, ResolvedValue } from '../../../partial_evaluator';
-import { ClassDeclaration, ReflectionHost } from '../../../reflection';
-import { DeclarationData, LocalModuleScopeRegistry } from '../../../scope';
+import { FatalDiagnosticError } from '../../../diagnostics/index.js';
+import { Reference } from '../../../imports/index.js';
+import { InjectableClassRegistry, MetadataReader } from '../../../metadata/index.js';
+import { PartialEvaluator, ResolvedValue } from '../../../partial_evaluator/index.js';
+import { ClassDeclaration, ReflectionHost } from '../../../reflection/index.js';
+import { DeclarationData, LocalModuleScopeRegistry } from '../../../scope/index.js';
 /**
  * Create a `ts.Diagnostic` which indicates the given class is part of the declarations of two or
  * more NgModules.
diff --git a/src/ngtsc/annotations/common/src/evaluation.d.ts b/src/ngtsc/annotations/common/src/evaluation.d.ts
index 29451bd70cae6104e5331b6da13379c31fcb1baf..0787f5cb46c105385fddcc7ab4a63d239e27c45f 100755
--- a/src/ngtsc/annotations/common/src/evaluation.d.ts
+++ b/src/ngtsc/annotations/common/src/evaluation.d.ts
@@ -7,9 +7,9 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/annotations/common/src/evaluation" />
 import ts from 'typescript';
-import { Reference } from '../../../imports';
-import { PartialEvaluator, ResolvedValue } from '../../../partial_evaluator';
-import { ClassDeclaration, Decorator } from '../../../reflection';
+import { Reference } from '../../../imports/index.js';
+import { PartialEvaluator, ResolvedValue } from '../../../partial_evaluator/index.js';
+import { ClassDeclaration, Decorator } from '../../../reflection/index.js';
 export declare function resolveEnumValue(evaluator: PartialEvaluator, metadata: Map<string, ts.Expression>, field: string, enumSymbolName: string): number | null;
 /** Determines if the result of an evaluation is a string array. */
 export declare function isStringArray(resolvedValue: ResolvedValue): resolvedValue is string[];
diff --git a/src/ngtsc/annotations/common/src/factory.d.ts b/src/ngtsc/annotations/common/src/factory.d.ts
index b0efee43b412fb6a0bd0f8ca2d16a3a128eef83e..59060f7873cfdfd2d903dfd222e7385930e7c084 100755
--- a/src/ngtsc/annotations/common/src/factory.d.ts
+++ b/src/ngtsc/annotations/common/src/factory.d.ts
@@ -7,7 +7,7 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/annotations/common/src/factory" />
 import { R3FactoryMetadata } from '@angular/compiler';
-import { CompileResult } from '../../../transform';
+import { CompileResult } from '../../../transform/index.js';
 export declare type CompileFactoryFn = (metadata: R3FactoryMetadata) => CompileResult;
 export declare function compileNgFactoryDefField(metadata: R3FactoryMetadata): CompileResult;
 export declare function compileDeclareFactory(metadata: R3FactoryMetadata): CompileResult;
diff --git a/src/ngtsc/annotations/common/src/metadata.d.ts b/src/ngtsc/annotations/common/src/metadata.d.ts
index ebea84a39e4b3dfefd77b3617cb53323ac0aa4c0..dd7d92d4fdd84778135b3241e56d5d62943ffc2e 100755
--- a/src/ngtsc/annotations/common/src/metadata.d.ts
+++ b/src/ngtsc/annotations/common/src/metadata.d.ts
@@ -7,7 +7,7 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/annotations/common/src/metadata" />
 import { R3ClassMetadata } from '@angular/compiler';
-import { DeclarationNode, Decorator, ReflectionHost } from '../../../reflection';
+import { DeclarationNode, Decorator, ReflectionHost } from '../../../reflection/index.js';
 /**
  * Given a class declaration, generate a call to `setClassMetadata` with the Angular metadata
  * present on the class or its member fields. An ngDevMode guard is used to allow the call to be
diff --git a/src/ngtsc/annotations/common/src/references_registry.d.ts b/src/ngtsc/annotations/common/src/references_registry.d.ts
index 404f4dbee8adc38140568032261d0e50214b2a9b..b248f08d3c584729f2298656a400f7ca8e03ff58 100755
--- a/src/ngtsc/annotations/common/src/references_registry.d.ts
+++ b/src/ngtsc/annotations/common/src/references_registry.d.ts
@@ -6,8 +6,8 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/annotations/common/src/references_registry" />
-import { Reference } from '../../../imports';
-import { DeclarationNode } from '../../../reflection';
+import { Reference } from '../../../imports/index.js';
+import { DeclarationNode } from '../../../reflection/index.js';
 /**
  * Implement this interface if you want DecoratorHandlers to register
  * references that they find in their analysis of the code.
diff --git a/src/ngtsc/annotations/common/src/schema.d.ts b/src/ngtsc/annotations/common/src/schema.d.ts
index 7b7b6412310d47ad5ec29e3e70ae083aa378c49c..0bf552af9249cad66fab56c3255ddaf5d46e5f61 100755
--- a/src/ngtsc/annotations/common/src/schema.d.ts
+++ b/src/ngtsc/annotations/common/src/schema.d.ts
@@ -8,5 +8,5 @@
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/annotations/common/src/schema" />
 import { SchemaMetadata } from '@angular/compiler';
 import ts from 'typescript';
-import { PartialEvaluator } from '../../../partial_evaluator';
+import { PartialEvaluator } from '../../../partial_evaluator/index.js';
 export declare function extractSchemas(rawExpr: ts.Expression, evaluator: PartialEvaluator, context: string): SchemaMetadata[];
diff --git a/src/ngtsc/annotations/common/src/util.d.ts b/src/ngtsc/annotations/common/src/util.d.ts
index d8b60f0674fa1f45d97410257ffa4ec6fe1676ef..cb73825feb4daa3e143a6c55c2f290bc99a0d806 100755
--- a/src/ngtsc/annotations/common/src/util.d.ts
+++ b/src/ngtsc/annotations/common/src/util.d.ts
@@ -8,10 +8,10 @@
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/annotations/common/src/util" />
 import { Expression, FactoryTarget, ParseSourceSpan, R3CompiledExpression, R3FactoryMetadata, R3Reference, Statement, WrappedNodeExpr } from '@angular/compiler';
 import ts from 'typescript';
-import { ImportedFile, ModuleResolver, Reference, ReferenceEmitter } from '../../../imports';
-import { ForeignFunctionResolver, PartialEvaluator } from '../../../partial_evaluator';
-import { ClassDeclaration, Decorator, Import, ImportedTypeValueReference, LocalTypeValueReference, ReflectionHost, TypeValueReference } from '../../../reflection';
-import { CompileResult } from '../../../transform';
+import { ImportedFile, ModuleResolver, Reference, ReferenceEmitter } from '../../../imports/index.js';
+import { ForeignFunctionResolver, PartialEvaluator } from '../../../partial_evaluator/index.js';
+import { ClassDeclaration, Decorator, Import, ImportedTypeValueReference, LocalTypeValueReference, ReflectionHost, TypeValueReference } from '../../../reflection/index.js';
+import { CompileResult } from '../../../transform/index.js';
 /**
  * Convert a `TypeValueReference` to an `Expression` which refers to the type as a value.
  *
diff --git a/src/ngtsc/annotations/component/index.d.ts b/src/ngtsc/annotations/component/index.d.ts
index ba7d63b0d11549be0e5fe505f6584b37405b4086..6a132dde06a6e679d8ffd206038dc5703ff7117c 100755
--- a/src/ngtsc/annotations/component/index.d.ts
+++ b/src/ngtsc/annotations/component/index.d.ts
@@ -6,4 +6,4 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/annotations/component" />
-export { ComponentDecoratorHandler } from './src/handler';
+export { ComponentDecoratorHandler } from './src/handler.js';
diff --git a/src/ngtsc/annotations/component/src/diagnostics.d.ts b/src/ngtsc/annotations/component/src/diagnostics.d.ts
index e34ce8af1d2c5632790819092c820e8a45404037..d37314db6d8e079b98570c91b6983ebc2a5176ac 100755
--- a/src/ngtsc/annotations/component/src/diagnostics.d.ts
+++ b/src/ngtsc/annotations/component/src/diagnostics.d.ts
@@ -7,8 +7,8 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/annotations/component/src/diagnostics" />
 import ts from 'typescript';
-import { Cycle } from '../../../cycles';
-import { Reference } from '../../../imports';
+import { Cycle } from '../../../cycles/index.js';
+import { Reference } from '../../../imports/index.js';
 /**
  * Generate a diagnostic related information object that describes a potential cyclic import path.
  */
diff --git a/src/ngtsc/annotations/component/src/handler.d.ts b/src/ngtsc/annotations/component/src/handler.d.ts
index 219d06ac02ba9c76fbb6ffd353a7fb7bcc762909..2690082b21858f0ff0ae664f83bc58d24b75946c 100755
--- a/src/ngtsc/annotations/component/src/handler.d.ts
+++ b/src/ngtsc/annotations/component/src/handler.d.ts
@@ -8,23 +8,23 @@
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/annotations/component/src/handler" />
 import { ConstantPool } from '@angular/compiler';
 import ts from 'typescript';
-import { CycleAnalyzer, CycleHandlingStrategy } from '../../../cycles';
-import { ModuleResolver, ReferenceEmitter } from '../../../imports';
-import { DependencyTracker } from '../../../incremental/api';
-import { SemanticDepGraphUpdater } from '../../../incremental/semantic_graph';
-import { IndexingContext } from '../../../indexer';
-import { InjectableClassRegistry, MetadataReader, MetadataRegistry, ResourceRegistry } from '../../../metadata';
-import { PartialEvaluator } from '../../../partial_evaluator';
-import { PerfRecorder } from '../../../perf';
-import { ClassDeclaration, Decorator, ReflectionHost } from '../../../reflection';
-import { ComponentScopeReader, DtsModuleScopeResolver, LocalModuleScopeRegistry, TypeCheckScopeRegistry } from '../../../scope';
-import { AnalysisOutput, CompileResult, DecoratorHandler, DetectResult, HandlerFlags, HandlerPrecedence, ResolveResult } from '../../../transform';
-import { TypeCheckContext } from '../../../typecheck/api';
-import { ExtendedTemplateChecker } from '../../../typecheck/extended/api';
-import { Xi18nContext } from '../../../xi18n';
-import { ResourceLoader } from '../../common';
-import { ComponentAnalysisData, ComponentResolutionData } from './metadata';
-import { ComponentSymbol } from './symbol';
+import { CycleAnalyzer, CycleHandlingStrategy } from '../../../cycles/index.js';
+import { ModuleResolver, ReferenceEmitter } from '../../../imports/index.js';
+import { DependencyTracker } from '../../../incremental/api.js';
+import { SemanticDepGraphUpdater } from '../../../incremental/semantic_graph/index.js';
+import { IndexingContext } from '../../../indexer/index.js';
+import { InjectableClassRegistry, MetadataReader, MetadataRegistry, ResourceRegistry } from '../../../metadata/index.js';
+import { PartialEvaluator } from '../../../partial_evaluator/index.js';
+import { PerfRecorder } from '../../../perf/index.js';
+import { ClassDeclaration, Decorator, ReflectionHost } from '../../../reflection/index.js';
+import { ComponentScopeReader, DtsModuleScopeResolver, LocalModuleScopeRegistry, TypeCheckScopeRegistry } from '../../../scope/index.js';
+import { AnalysisOutput, CompileResult, DecoratorHandler, DetectResult, HandlerFlags, HandlerPrecedence, ResolveResult } from '../../../transform/index.js';
+import { TypeCheckContext } from '../../../typecheck/api/index.js';
+import { ExtendedTemplateChecker } from '../../../typecheck/extended/api/index.js';
+import { Xi18nContext } from '../../../xi18n/index.js';
+import { ResourceLoader } from '../../common/index.js';
+import { ComponentAnalysisData, ComponentResolutionData } from './metadata.js';
+import { ComponentSymbol } from './symbol.js';
 /**
  * `DecoratorHandler` which handles the `@Component` annotation.
  */
diff --git a/src/ngtsc/annotations/component/src/metadata.d.ts b/src/ngtsc/annotations/component/src/metadata.d.ts
index 0bb2087e55d1caa5231e81a6532682b939f1c024..ae0cc1695d72e4aa7a6dd005d0fd6555201fd61e 100755
--- a/src/ngtsc/annotations/component/src/metadata.d.ts
+++ b/src/ngtsc/annotations/component/src/metadata.d.ts
@@ -8,11 +8,11 @@
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/annotations/component/src/metadata" />
 import { AnimationTriggerNames, R3ClassMetadata, R3ComponentMetadata, R3TemplateDependencyMetadata, SchemaMetadata } from '@angular/compiler';
 import ts from 'typescript';
-import { Reference } from '../../../imports';
-import { ClassPropertyMapping, ComponentResources, DirectiveTypeCheckMeta } from '../../../metadata';
-import { ClassDeclaration } from '../../../reflection';
-import { SubsetOfKeys } from '../../../util/src/typescript';
-import { ParsedTemplateWithSource, StyleUrlMeta } from './resources';
+import { Reference } from '../../../imports/index.js';
+import { ClassPropertyMapping, ComponentResources, DirectiveTypeCheckMeta } from '../../../metadata/index.js';
+import { ClassDeclaration } from '../../../reflection/index.js';
+import { SubsetOfKeys } from '../../../util/src/typescript.js';
+import { ParsedTemplateWithSource, StyleUrlMeta } from './resources.js';
 /**
  * These fields of `R3ComponentMetadata` are updated in the `resolve` phase.
  *
diff --git a/src/ngtsc/annotations/component/src/resources.d.ts b/src/ngtsc/annotations/component/src/resources.d.ts
index 6b75b2b63244d2a9da162ba151bb6f491214a29b..a37578c09e8d06b165c99b7c332730e21174d9bb 100755
--- a/src/ngtsc/annotations/component/src/resources.d.ts
+++ b/src/ngtsc/annotations/component/src/resources.d.ts
@@ -8,13 +8,13 @@
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/annotations/component/src/resources" />
 import { InterpolationConfig, ParsedTemplate, ParseSourceFile, TmplAstNode } from '@angular/compiler';
 import ts from 'typescript';
-import { FatalDiagnosticError } from '../../../diagnostics';
-import { DependencyTracker } from '../../../incremental/api';
-import { Resource } from '../../../metadata';
-import { PartialEvaluator } from '../../../partial_evaluator';
-import { ClassDeclaration, DeclarationNode, Decorator } from '../../../reflection';
-import { TemplateSourceMapping } from '../../../typecheck/api';
-import { ResourceLoader } from '../../common';
+import { FatalDiagnosticError } from '../../../diagnostics/index.js';
+import { DependencyTracker } from '../../../incremental/api.js';
+import { Resource } from '../../../metadata/index.js';
+import { PartialEvaluator } from '../../../partial_evaluator/index.js';
+import { ClassDeclaration, DeclarationNode, Decorator } from '../../../reflection/index.js';
+import { TemplateSourceMapping } from '../../../typecheck/api/index.js';
+import { ResourceLoader } from '../../common/index.js';
 /**
  * The literal style url extracted from the decorator, along with metadata for diagnostics.
  */
diff --git a/src/ngtsc/annotations/component/src/symbol.d.ts b/src/ngtsc/annotations/component/src/symbol.d.ts
index 13f4861d6acb0710df8e65f52de0d16dde270637..1c2585f06ae1f23007fd5c9a7b1ab670714bb330 100755
--- a/src/ngtsc/annotations/component/src/symbol.d.ts
+++ b/src/ngtsc/annotations/component/src/symbol.d.ts
@@ -6,8 +6,8 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/annotations/component/src/symbol" />
-import { SemanticReference, SemanticSymbol } from '../../../incremental/semantic_graph';
-import { DirectiveSymbol } from '../../directive';
+import { SemanticReference, SemanticSymbol } from '../../../incremental/semantic_graph/index.js';
+import { DirectiveSymbol } from '../../directive/index.js';
 /**
  * Represents an Angular component.
  */
diff --git a/src/ngtsc/annotations/component/src/util.d.ts b/src/ngtsc/annotations/component/src/util.d.ts
index f9a4d70daa884dba9d8da96e0404be00ee9975f3..d15e2b55891514dde8880033933b8f54cfa7778c 100755
--- a/src/ngtsc/annotations/component/src/util.d.ts
+++ b/src/ngtsc/annotations/component/src/util.d.ts
@@ -8,9 +8,9 @@
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/annotations/component/src/util" />
 import { AnimationTriggerNames } from '@angular/compiler';
 import ts from 'typescript';
-import { Reference } from '../../../imports';
-import { ForeignFunctionResolver, ResolvedValue } from '../../../partial_evaluator';
-import { ClassDeclaration } from '../../../reflection';
+import { Reference } from '../../../imports/index.js';
+import { ForeignFunctionResolver, ResolvedValue } from '../../../partial_evaluator/index.js';
+import { ClassDeclaration } from '../../../reflection/index.js';
 /**
  * Collect the animation names from the static evaluation result.
  * @param value the static evaluation result of the animations
diff --git a/src/ngtsc/annotations/directive/index.d.ts b/src/ngtsc/annotations/directive/index.d.ts
index f9ccae28f2d41d42ca1212874fab29c23d0d26fa..ca106f255d634d4305276dd015e4fbf55eaa4924 100755
--- a/src/ngtsc/annotations/directive/index.d.ts
+++ b/src/ngtsc/annotations/directive/index.d.ts
@@ -6,6 +6,6 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/annotations/directive" />
-export { DirectiveDecoratorHandler } from './src/handler';
-export { DirectiveSymbol } from './src/symbol';
-export * from './src/shared';
+export { DirectiveDecoratorHandler } from './src/handler.js';
+export { DirectiveSymbol } from './src/symbol.js';
+export * from './src/shared.js';
diff --git a/src/ngtsc/annotations/directive/src/handler.d.ts b/src/ngtsc/annotations/directive/src/handler.d.ts
index 6a7598c9ea17eb1d4e16c958925619e806e1a793..1cc0b8351e5c352daa080a38c7f3e600bc070723 100755
--- a/src/ngtsc/annotations/directive/src/handler.d.ts
+++ b/src/ngtsc/annotations/directive/src/handler.d.ts
@@ -7,15 +7,15 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/annotations/directive/src/handler" />
 import { ConstantPool, R3ClassMetadata, R3DirectiveMetadata } from '@angular/compiler';
-import { Reference } from '../../../imports';
-import { SemanticDepGraphUpdater } from '../../../incremental/semantic_graph';
-import { ClassPropertyMapping, DirectiveTypeCheckMeta, InjectableClassRegistry, MetadataReader, MetadataRegistry } from '../../../metadata';
-import { PartialEvaluator } from '../../../partial_evaluator';
-import { PerfRecorder } from '../../../perf';
-import { ClassDeclaration, Decorator, ReflectionHost } from '../../../reflection';
-import { LocalModuleScopeRegistry } from '../../../scope';
-import { AnalysisOutput, CompileResult, DecoratorHandler, DetectResult, HandlerFlags, HandlerPrecedence, ResolveResult } from '../../../transform';
-import { DirectiveSymbol } from './symbol';
+import { Reference } from '../../../imports/index.js';
+import { SemanticDepGraphUpdater } from '../../../incremental/semantic_graph/index.js';
+import { ClassPropertyMapping, DirectiveTypeCheckMeta, InjectableClassRegistry, MetadataReader, MetadataRegistry } from '../../../metadata/index.js';
+import { PartialEvaluator } from '../../../partial_evaluator/index.js';
+import { PerfRecorder } from '../../../perf/index.js';
+import { ClassDeclaration, Decorator, ReflectionHost } from '../../../reflection/index.js';
+import { LocalModuleScopeRegistry } from '../../../scope/index.js';
+import { AnalysisOutput, CompileResult, DecoratorHandler, DetectResult, HandlerFlags, HandlerPrecedence, ResolveResult } from '../../../transform/index.js';
+import { DirectiveSymbol } from './symbol.js';
 export interface DirectiveHandlerData {
     baseClass: Reference<ClassDeclaration> | 'dynamic' | null;
     typeCheckMeta: DirectiveTypeCheckMeta;
diff --git a/src/ngtsc/annotations/directive/src/shared.d.ts b/src/ngtsc/annotations/directive/src/shared.d.ts
index 0a2a578062955cf6a2eb9d69ebe3c45ee596b41a..956036432275ef1ca9d10d0ca0e9c57859ac5322 100755
--- a/src/ngtsc/annotations/directive/src/shared.d.ts
+++ b/src/ngtsc/annotations/directive/src/shared.d.ts
@@ -8,10 +8,10 @@
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/annotations/directive/src/shared" />
 import { ParsedHostBindings, R3DirectiveMetadata, R3QueryMetadata } from '@angular/compiler';
 import ts from 'typescript';
-import { ClassPropertyMapping } from '../../../metadata';
-import { PartialEvaluator } from '../../../partial_evaluator';
-import { ClassDeclaration, ClassMember, Decorator, ReflectionHost } from '../../../reflection';
-import { HandlerFlags } from '../../../transform';
+import { ClassPropertyMapping } from '../../../metadata/index.js';
+import { PartialEvaluator } from '../../../partial_evaluator/index.js';
+import { ClassDeclaration, ClassMember, Decorator, ReflectionHost } from '../../../reflection/index.js';
+import { HandlerFlags } from '../../../transform/index.js';
 /**
  * Helper function to extract metadata from a `Directive` or `Component`. `Directive`s without a
  * selector are allowed to be used for abstract base classes. These abstract directives should not
diff --git a/src/ngtsc/annotations/directive/src/symbol.d.ts b/src/ngtsc/annotations/directive/src/symbol.d.ts
index fcca70880b3af69fa52b38bf51ea9a05dc900453..58f2e61bd85d5ed09a62a61b7498db9981cbf004 100755
--- a/src/ngtsc/annotations/directive/src/symbol.d.ts
+++ b/src/ngtsc/annotations/directive/src/symbol.d.ts
@@ -6,9 +6,9 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/annotations/directive/src/symbol" />
-import { SemanticSymbol, SemanticTypeParameter } from '../../../incremental/semantic_graph';
-import { ClassPropertyMapping, DirectiveTypeCheckMeta } from '../../../metadata';
-import { ClassDeclaration } from '../../../reflection';
+import { SemanticSymbol, SemanticTypeParameter } from '../../../incremental/semantic_graph/index.js';
+import { ClassPropertyMapping, DirectiveTypeCheckMeta } from '../../../metadata/index.js';
+import { ClassDeclaration } from '../../../reflection/index.js';
 /**
  * Represents an Angular directive. Components are represented by `ComponentSymbol`, which inherits
  * from this symbol.
diff --git a/src/ngtsc/annotations/index.d.ts b/src/ngtsc/annotations/index.d.ts
index 3eeb0d649d1b302b6feca7837c0fb3cf9713ece8..fe2b1cc6d54d70cc02266ec7cda5afd73b48cec3 100755
--- a/src/ngtsc/annotations/index.d.ts
+++ b/src/ngtsc/annotations/index.d.ts
@@ -6,9 +6,9 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/annotations" />
-export { forwardRefResolver, NoopReferencesRegistry, ReferencesRegistry, ResourceLoader, ResourceLoaderContext } from './common';
-export { ComponentDecoratorHandler } from './component';
-export { DirectiveDecoratorHandler } from './directive';
-export { NgModuleDecoratorHandler } from './ng_module';
-export { InjectableDecoratorHandler } from './src/injectable';
-export { PipeDecoratorHandler } from './src/pipe';
+export { forwardRefResolver, NoopReferencesRegistry, ReferencesRegistry, ResourceLoader, ResourceLoaderContext } from './common/index.js';
+export { ComponentDecoratorHandler } from './component/index.js';
+export { DirectiveDecoratorHandler } from './directive/index.js';
+export { NgModuleDecoratorHandler } from './ng_module/index.js';
+export { InjectableDecoratorHandler } from './src/injectable.js';
+export { PipeDecoratorHandler } from './src/pipe.js';
diff --git a/src/ngtsc/annotations/ng_module/index.d.ts b/src/ngtsc/annotations/ng_module/index.d.ts
index 817ab6eee2f47d142ad3417372798d9f4d0f089b..5f37bc6dc5e1ba2807d0e5f342fd851f525e9c3b 100755
--- a/src/ngtsc/annotations/ng_module/index.d.ts
+++ b/src/ngtsc/annotations/ng_module/index.d.ts
@@ -6,4 +6,4 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/annotations/ng_module" />
-export { NgModuleDecoratorHandler, NgModuleSymbol } from './src/handler';
+export { NgModuleDecoratorHandler, NgModuleSymbol } from './src/handler.js';
diff --git a/src/ngtsc/annotations/ng_module/src/handler.d.ts b/src/ngtsc/annotations/ng_module/src/handler.d.ts
index 2bb1be32f08c959d3b685c21b9c3fea1ba3fce4d..c8f5273862ed1e68268b30a120f8e8380eb254e0 100755
--- a/src/ngtsc/annotations/ng_module/src/handler.d.ts
+++ b/src/ngtsc/annotations/ng_module/src/handler.d.ts
@@ -8,16 +8,16 @@
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/annotations/ng_module/src/handler" />
 import { Expression, R3ClassMetadata, R3FactoryMetadata, R3InjectorMetadata, R3NgModuleMetadata, SchemaMetadata } from '@angular/compiler';
 import ts from 'typescript';
-import { Reference, ReferenceEmitter } from '../../../imports';
-import { SemanticReference, SemanticSymbol } from '../../../incremental/semantic_graph';
-import { InjectableClassRegistry, MetadataReader, MetadataRegistry } from '../../../metadata';
-import { PartialEvaluator } from '../../../partial_evaluator';
-import { PerfRecorder } from '../../../perf';
-import { ClassDeclaration, Decorator, ReflectionHost } from '../../../reflection';
-import { LocalModuleScopeRegistry } from '../../../scope';
-import { FactoryTracker } from '../../../shims/api';
-import { AnalysisOutput, CompileResult, DecoratorHandler, DetectResult, HandlerPrecedence, ResolveResult } from '../../../transform';
-import { ReferencesRegistry } from '../../common';
+import { Reference, ReferenceEmitter } from '../../../imports/index.js';
+import { SemanticReference, SemanticSymbol } from '../../../incremental/semantic_graph/index.js';
+import { InjectableClassRegistry, MetadataReader, MetadataRegistry } from '../../../metadata/index.js';
+import { PartialEvaluator } from '../../../partial_evaluator/index.js';
+import { PerfRecorder } from '../../../perf/index.js';
+import { ClassDeclaration, Decorator, ReflectionHost } from '../../../reflection/index.js';
+import { LocalModuleScopeRegistry } from '../../../scope/index.js';
+import { FactoryTracker } from '../../../shims/api.js';
+import { AnalysisOutput, CompileResult, DecoratorHandler, DetectResult, HandlerPrecedence, ResolveResult } from '../../../transform/index.js';
+import { ReferencesRegistry } from '../../common/index.js';
 export interface NgModuleAnalysis {
     mod: R3NgModuleMetadata;
     inj: Omit<R3InjectorMetadata, 'imports'>;
diff --git a/src/ngtsc/annotations/src/injectable.d.ts b/src/ngtsc/annotations/src/injectable.d.ts
index 5aea0979dc070b5c491c4d7d0211c2ff60a92810..785438dc057f93a48bc930fedf65b124b6240871 100755
--- a/src/ngtsc/annotations/src/injectable.d.ts
+++ b/src/ngtsc/annotations/src/injectable.d.ts
@@ -7,10 +7,10 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/annotations/src/injectable" />
 import { R3ClassMetadata, R3DependencyMetadata, R3InjectableMetadata } from '@angular/compiler';
-import { InjectableClassRegistry } from '../../metadata';
-import { PerfRecorder } from '../../perf';
-import { ClassDeclaration, Decorator, ReflectionHost } from '../../reflection';
-import { AnalysisOutput, CompileResult, DecoratorHandler, DetectResult, HandlerPrecedence } from '../../transform';
+import { InjectableClassRegistry } from '../../metadata/index.js';
+import { PerfRecorder } from '../../perf/index.js';
+import { ClassDeclaration, Decorator, ReflectionHost } from '../../reflection/index.js';
+import { AnalysisOutput, CompileResult, DecoratorHandler, DetectResult, HandlerPrecedence } from '../../transform/index.js';
 export interface InjectableHandlerData {
     meta: R3InjectableMetadata;
     classMetadata: R3ClassMetadata | null;
diff --git a/src/ngtsc/annotations/src/pipe.d.ts b/src/ngtsc/annotations/src/pipe.d.ts
index 093ef989acc1a746485f8f69e3eeb8e544a7a610..c6d7953ce4ad06f1243dc1f3b75d679a428b6f02 100755
--- a/src/ngtsc/annotations/src/pipe.d.ts
+++ b/src/ngtsc/annotations/src/pipe.d.ts
@@ -8,13 +8,13 @@
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/annotations/src/pipe" />
 import { R3ClassMetadata, R3PipeMetadata } from '@angular/compiler';
 import ts from 'typescript';
-import { SemanticSymbol } from '../../incremental/semantic_graph';
-import { InjectableClassRegistry, MetadataRegistry } from '../../metadata';
-import { PartialEvaluator } from '../../partial_evaluator';
-import { PerfRecorder } from '../../perf';
-import { ClassDeclaration, Decorator, ReflectionHost } from '../../reflection';
-import { LocalModuleScopeRegistry } from '../../scope';
-import { AnalysisOutput, CompileResult, DecoratorHandler, DetectResult, HandlerPrecedence, ResolveResult } from '../../transform';
+import { SemanticSymbol } from '../../incremental/semantic_graph/index.js';
+import { InjectableClassRegistry, MetadataRegistry } from '../../metadata/index.js';
+import { PartialEvaluator } from '../../partial_evaluator/index.js';
+import { PerfRecorder } from '../../perf/index.js';
+import { ClassDeclaration, Decorator, ReflectionHost } from '../../reflection/index.js';
+import { LocalModuleScopeRegistry } from '../../scope/index.js';
+import { AnalysisOutput, CompileResult, DecoratorHandler, DetectResult, HandlerPrecedence, ResolveResult } from '../../transform/index.js';
 export interface PipeHandlerData {
     meta: R3PipeMetadata;
     classMetadata: R3ClassMetadata | null;
diff --git a/src/ngtsc/core/api/index.d.ts b/src/ngtsc/core/api/index.d.ts
index 11c0f7617421d4e864811fa0cd202946d0ed2425..0df744437ab43618aa36bb9b5b4fbf54d0353998 100755
--- a/src/ngtsc/core/api/index.d.ts
+++ b/src/ngtsc/core/api/index.d.ts
@@ -6,7 +6,7 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/core/api/index" />
-export * from './src/adapter';
-export * from './src/interfaces';
-export * from './src/options';
-export * from './src/public_options';
+export * from './src/adapter.js';
+export * from './src/interfaces.js';
+export * from './src/options.js';
+export * from './src/public_options.js';
diff --git a/src/ngtsc/core/api/src/adapter.d.ts b/src/ngtsc/core/api/src/adapter.d.ts
index 3038e0d1c1d43c503b084bbc969f727262faa68d..01941836e87dd15439a9d86f5695369a6337f22f 100755
--- a/src/ngtsc/core/api/src/adapter.d.ts
+++ b/src/ngtsc/core/api/src/adapter.d.ts
@@ -7,9 +7,9 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/core/api/src/adapter" />
 import ts from 'typescript';
-import { AbsoluteFsPath } from '../../../file_system';
-import { FactoryTracker } from '../../../shims/api';
-import { ExtendedTsCompilerHost, UnifiedModulesHost } from './interfaces';
+import { AbsoluteFsPath } from '../../../file_system/index.js';
+import { FactoryTracker } from '../../../shims/api.js';
+import { ExtendedTsCompilerHost, UnifiedModulesHost } from './interfaces.js';
 /**
  * Names of methods from `ExtendedTsCompilerHost` that need to be provided by the
  * `NgCompilerAdapter`.
diff --git a/src/ngtsc/core/api/src/options.d.ts b/src/ngtsc/core/api/src/options.d.ts
index d700864707eb42ccb3c174ff6dda3b5eff7ca1ee..0cd662bd93a691ea1da3968284c8ad0865ded5b3 100755
--- a/src/ngtsc/core/api/src/options.d.ts
+++ b/src/ngtsc/core/api/src/options.d.ts
@@ -7,7 +7,7 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/core/api/src/options" />
 import ts from 'typescript';
-import { BazelAndG3Options, DiagnosticOptions, I18nOptions, LegacyNgcOptions, MiscOptions, NgcCompatibilityOptions, StrictTemplateOptions, TargetOptions } from './public_options';
+import { BazelAndG3Options, DiagnosticOptions, I18nOptions, LegacyNgcOptions, MiscOptions, NgcCompatibilityOptions, StrictTemplateOptions, TargetOptions } from './public_options.js';
 /**
  * Non-public options which are useful during testing of the compiler.
  */
diff --git a/src/ngtsc/core/api/src/public_options.d.ts b/src/ngtsc/core/api/src/public_options.d.ts
index 6bfee68a063d5589b56c740ebf33d9f5c1afbb92..2f42ab0fd2f4ffac429bf0b6bc164eb619b2ccca 100755
--- a/src/ngtsc/core/api/src/public_options.d.ts
+++ b/src/ngtsc/core/api/src/public_options.d.ts
@@ -6,7 +6,7 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/core/api/src/public_options" />
-import { ExtendedTemplateDiagnosticName } from '../../../../ngtsc/diagnostics';
+import { ExtendedTemplateDiagnosticName } from '../../../../ngtsc/diagnostics/index.js';
 /**
  * Options supported by the legacy View Engine compiler, which are still consumed by the Angular Ivy
  * compiler for backwards compatibility.
diff --git a/src/ngtsc/core/index.d.ts b/src/ngtsc/core/index.d.ts
index 66ba1663006079ecc64d72d66ec4e42628085e9b..376f338cb0bab2bc52c1677cc72b6c9edf48a6be 100755
--- a/src/ngtsc/core/index.d.ts
+++ b/src/ngtsc/core/index.d.ts
@@ -6,5 +6,5 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/core" />
-export * from './src/compiler';
-export { NgCompilerHost } from './src/host';
+export * from './src/compiler.js';
+export { NgCompilerHost } from './src/host.js';
diff --git a/src/ngtsc/core/src/compiler.d.ts b/src/ngtsc/core/src/compiler.d.ts
index 86df10c452d8188fb13d1fa77077acd75301a791..28e512ff9e0485ffc9d3d9efd1812d446ec3dee8 100755
--- a/src/ngtsc/core/src/compiler.d.ts
+++ b/src/ngtsc/core/src/compiler.d.ts
@@ -7,16 +7,16 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/core/src/compiler" />
 import ts from 'typescript';
-import { AbsoluteFsPath } from '../../file_system';
-import { IncrementalBuildStrategy, IncrementalCompilation, IncrementalState } from '../../incremental';
-import { IndexedComponent } from '../../indexer';
-import { ComponentResources, DirectiveMeta, PipeMeta } from '../../metadata';
-import { ActivePerfRecorder } from '../../perf';
-import { ProgramDriver } from '../../program_driver';
-import { DeclarationNode } from '../../reflection';
-import { OptimizeFor, TemplateTypeChecker } from '../../typecheck/api';
-import { Xi18nContext } from '../../xi18n';
-import { NgCompilerAdapter, NgCompilerOptions } from '../api';
+import { AbsoluteFsPath } from '../../file_system/index.js';
+import { IncrementalBuildStrategy, IncrementalCompilation, IncrementalState } from '../../incremental/index.js';
+import { IndexedComponent } from '../../indexer/index.js';
+import { ComponentResources, DirectiveMeta, PipeMeta } from '../../metadata/index.js';
+import { ActivePerfRecorder } from '../../perf/index.js';
+import { ProgramDriver } from '../../program_driver/index.js';
+import { DeclarationNode } from '../../reflection/index.js';
+import { OptimizeFor, TemplateTypeChecker } from '../../typecheck/api/index.js';
+import { Xi18nContext } from '../../xi18n/index.js';
+import { NgCompilerAdapter, NgCompilerOptions } from '../api/index.js';
 /**
  * Discriminant type for a `CompilationTicket`.
  */
diff --git a/src/ngtsc/core/src/host.d.ts b/src/ngtsc/core/src/host.d.ts
index da301064b7df0f0fe658a42149873af0af5b8ff4..c55bdefff06c14f4bc564447d48d489d6e2847e5 100755
--- a/src/ngtsc/core/src/host.d.ts
+++ b/src/ngtsc/core/src/host.d.ts
@@ -7,11 +7,11 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/core/src/host" />
 import ts from 'typescript';
-import { AbsoluteFsPath } from '../../file_system';
-import { ShimAdapter, ShimReferenceTagger } from '../../shims';
-import { FactoryTracker } from '../../shims/api';
-import { RequiredDelegations } from '../../util/src/typescript';
-import { ExtendedTsCompilerHost, NgCompilerAdapter, NgCompilerOptions, UnifiedModulesHost } from '../api';
+import { AbsoluteFsPath } from '../../file_system/index.js';
+import { ShimAdapter, ShimReferenceTagger } from '../../shims/index.js';
+import { FactoryTracker } from '../../shims/api.js';
+import { RequiredDelegations } from '../../util/src/typescript.js';
+import { ExtendedTsCompilerHost, NgCompilerAdapter, NgCompilerOptions, UnifiedModulesHost } from '../api/index.js';
 /**
  * Delegates all methods of `ExtendedTsCompilerHost` to a delegate, with the exception of
  * `getSourceFile` and `fileExists` which are implemented in `NgCompilerHost`.
diff --git a/src/ngtsc/cycles/index.d.ts b/src/ngtsc/cycles/index.d.ts
index 2392d016ae229c836b0c993bac678368885ccf06..c3d8205bdb8bd48a44b4474e0b5e41ac7d3e5619 100755
--- a/src/ngtsc/cycles/index.d.ts
+++ b/src/ngtsc/cycles/index.d.ts
@@ -6,5 +6,5 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/cycles" />
-export { Cycle, CycleAnalyzer, CycleHandlingStrategy } from './src/analyzer';
-export { ImportGraph } from './src/imports';
+export { Cycle, CycleAnalyzer, CycleHandlingStrategy } from './src/analyzer.js';
+export { ImportGraph } from './src/imports.js';
diff --git a/src/ngtsc/cycles/src/analyzer.d.ts b/src/ngtsc/cycles/src/analyzer.d.ts
index 44fc1e6a5a9744f00af0ce2c433ae079ca1a96a8..0384840da863cff5dbb430ab243b69f4e8b32631 100755
--- a/src/ngtsc/cycles/src/analyzer.d.ts
+++ b/src/ngtsc/cycles/src/analyzer.d.ts
@@ -7,7 +7,7 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/cycles/src/analyzer" />
 import ts from 'typescript';
-import { ImportGraph } from './imports';
+import { ImportGraph } from './imports/index.js';
 /**
  * Analyzes a `ts.Program` for cycles.
  */
diff --git a/src/ngtsc/cycles/src/imports.d.ts b/src/ngtsc/cycles/src/imports.d.ts
index 93485f222b357d5c8be692f36263eb9d570e6bc9..953b61a1dd7d881f0a67b88cc412fffd5853048e 100755
--- a/src/ngtsc/cycles/src/imports.d.ts
+++ b/src/ngtsc/cycles/src/imports.d.ts
@@ -7,7 +7,7 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/cycles/src/imports" />
 import ts from 'typescript';
-import { PerfRecorder } from '../../perf';
+import { PerfRecorder } from '../../perf/index.js';
 /**
  * A cached graph of imports in the `ts.Program`.
  *
diff --git a/src/ngtsc/diagnostics/index.d.ts b/src/ngtsc/diagnostics/index.d.ts
index 9ed220d56843dc18e3c44686b8c5398b19870015..eb66847d490331fbdbdae537903bed0f3c82e7ff 100755
--- a/src/ngtsc/diagnostics/index.d.ts
+++ b/src/ngtsc/diagnostics/index.d.ts
@@ -6,9 +6,9 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/diagnostics" />
-export { COMPILER_ERRORS_WITH_GUIDES } from './src/docs';
-export { FatalDiagnosticError, isFatalDiagnosticError, makeDiagnostic, makeDiagnosticChain, makeRelatedInformation } from './src/error';
-export { ErrorCode } from './src/error_code';
-export { ERROR_DETAILS_PAGE_BASE_URL } from './src/error_details_base_url';
-export { ExtendedTemplateDiagnosticName } from './src/extended_template_diagnostic_name';
-export { ngErrorCode, replaceTsWithNgInErrors } from './src/util';
+export { COMPILER_ERRORS_WITH_GUIDES } from './src/docs.js';
+export { FatalDiagnosticError, isFatalDiagnosticError, makeDiagnostic, makeDiagnosticChain, makeRelatedInformation } from './src/error.js';
+export { ErrorCode } from './src/error_code.js';
+export { ERROR_DETAILS_PAGE_BASE_URL } from './src/error_details_base_url.js';
+export { ExtendedTemplateDiagnosticName } from './src/extended_template_diagnostic_name.js';
+export { ngErrorCode, replaceTsWithNgInErrors } from './src/util.js';
diff --git a/src/ngtsc/diagnostics/src/docs.d.ts b/src/ngtsc/diagnostics/src/docs.d.ts
index e0bb30874a2b52daa5059172578b38f862236c79..826d97c6581d7a1f35edbf37a0f3a78102a4ec25 100755
--- a/src/ngtsc/diagnostics/src/docs.d.ts
+++ b/src/ngtsc/diagnostics/src/docs.d.ts
@@ -6,7 +6,7 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/diagnostics/src/docs" />
-import { ErrorCode } from './error_code';
+import { ErrorCode } from './error_code.js';
 /**
  * Contains a set of error messages that have detailed guides at angular.io.
  * Full list of available error guides can be found at https://angular.io/errors
diff --git a/src/ngtsc/diagnostics/src/error.d.ts b/src/ngtsc/diagnostics/src/error.d.ts
index 904b36296602f854c10505bfca6c2a36cf095316..fb4a83bd8e3bb1ed9973a14dfdf3091af98aed12 100755
--- a/src/ngtsc/diagnostics/src/error.d.ts
+++ b/src/ngtsc/diagnostics/src/error.d.ts
@@ -7,7 +7,7 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/diagnostics/src/error" />
 import ts from 'typescript';
-import { ErrorCode } from './error_code';
+import { ErrorCode } from './error_code.js';
 export declare class FatalDiagnosticError {
     readonly code: ErrorCode;
     readonly node: ts.Node;
diff --git a/src/ngtsc/diagnostics/src/util.d.ts b/src/ngtsc/diagnostics/src/util.d.ts
index 05e6125c599e1adda695baabd8bcc7281bc8a40a..af4c0460337c0c073a9d6dc2ccab4643da613624 100755
--- a/src/ngtsc/diagnostics/src/util.d.ts
+++ b/src/ngtsc/diagnostics/src/util.d.ts
@@ -6,7 +6,7 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/diagnostics/src/util" />
-import { ErrorCode } from './error_code';
+import { ErrorCode } from './error_code.js';
 /**
  * During formatting of `ts.Diagnostic`s, the numeric code of each diagnostic is prefixed with the
  * hard-coded "TS" prefix. For Angular's own error codes, a prefix of "NG" is desirable. To achieve
diff --git a/src/ngtsc/entry_point/index.d.ts b/src/ngtsc/entry_point/index.d.ts
index dd52d192dac9540a71f96b15e41047bea0edc264..6e5a64ffb0efcf0b90b7b7843252ec6fca22e5cf 100755
--- a/src/ngtsc/entry_point/index.d.ts
+++ b/src/ngtsc/entry_point/index.d.ts
@@ -6,7 +6,7 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/entry_point" />
-export { FlatIndexGenerator } from './src/generator';
-export { findFlatIndexEntryPoint } from './src/logic';
-export { checkForPrivateExports } from './src/private_export_checker';
-export { ReferenceGraph } from './src/reference_graph';
+export { FlatIndexGenerator } from './src/generator.js';
+export { findFlatIndexEntryPoint } from './src/logic.js';
+export { checkForPrivateExports } from './src/private_export_checker.js';
+export { ReferenceGraph } from './src/reference_graph.js';
diff --git a/src/ngtsc/entry_point/src/generator.d.ts b/src/ngtsc/entry_point/src/generator.d.ts
index 2b64e650a173c4f34a9b00195f7afbdaf18b287d..edd991bf8e8df4d0b5eb71d89b3fd3dd42a1c417 100755
--- a/src/ngtsc/entry_point/src/generator.d.ts
+++ b/src/ngtsc/entry_point/src/generator.d.ts
@@ -7,8 +7,8 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/entry_point/src/generator" />
 import ts from 'typescript';
-import { AbsoluteFsPath } from '../../file_system';
-import { TopLevelShimGenerator } from '../../shims/api';
+import { AbsoluteFsPath } from '../../file_system/index.js';
+import { TopLevelShimGenerator } from '../../shims/api.js';
 export declare class FlatIndexGenerator implements TopLevelShimGenerator {
     readonly entryPoint: AbsoluteFsPath;
     readonly moduleName: string | null;
diff --git a/src/ngtsc/entry_point/src/logic.d.ts b/src/ngtsc/entry_point/src/logic.d.ts
index 19e8500ab889d55c7ea73c546615ac53507f497e..3a2055b448d15294726fc736f8cdec0f7aec7589 100755
--- a/src/ngtsc/entry_point/src/logic.d.ts
+++ b/src/ngtsc/entry_point/src/logic.d.ts
@@ -6,5 +6,5 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/entry_point/src/logic" />
-import { AbsoluteFsPath } from '../../file_system';
+import { AbsoluteFsPath } from '../../file_system/index.js';
 export declare function findFlatIndexEntryPoint(rootFiles: ReadonlyArray<AbsoluteFsPath>): AbsoluteFsPath | null;
diff --git a/src/ngtsc/entry_point/src/private_export_checker.d.ts b/src/ngtsc/entry_point/src/private_export_checker.d.ts
index e2715979893d0c06e227ba5d589454317388e531..585a1cd2df4cc9a44cfaf72d1c9e9b518bbe6eb6 100755
--- a/src/ngtsc/entry_point/src/private_export_checker.d.ts
+++ b/src/ngtsc/entry_point/src/private_export_checker.d.ts
@@ -7,7 +7,7 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/entry_point/src/private_export_checker" />
 import ts from 'typescript';
-import { ReferenceGraph } from './reference_graph';
+import { ReferenceGraph } from './reference_graph.js';
 /**
  * Produce `ts.Diagnostic`s for classes that are visible from exported types (e.g. directives
  * exposed by exported `NgModule`s) that are not themselves exported.
diff --git a/src/ngtsc/entry_point/src/reference_graph.d.ts b/src/ngtsc/entry_point/src/reference_graph.d.ts
index 7480c3bccd403a3e7fbf16987222ddcdea1d25d9..9728adca6ec9dc9ec3309bd92ce06ed5caf3b06f 100755
--- a/src/ngtsc/entry_point/src/reference_graph.d.ts
+++ b/src/ngtsc/entry_point/src/reference_graph.d.ts
@@ -6,7 +6,7 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/entry_point/src/reference_graph" />
-import { DeclarationNode } from '../../reflection';
+import { DeclarationNode } from '../../reflection/index.js';
 export declare class ReferenceGraph<T = DeclarationNode> {
     private references;
     add(from: T, to: T): void;
diff --git a/src/ngtsc/file_system/index.d.ts b/src/ngtsc/file_system/index.d.ts
index 9c24c370734afb500f32f215dca38a06d1514dba..2cd834632cb51b9f73f075823d216a28b1a985a1 100755
--- a/src/ngtsc/file_system/index.d.ts
+++ b/src/ngtsc/file_system/index.d.ts
@@ -6,9 +6,9 @@
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
  */
-export { NgtscCompilerHost } from './src/compiler_host';
-export { absoluteFrom, absoluteFromSourceFile, basename, dirname, getFileSystem, isLocalRelativePath, isRoot, isRooted, join, relative, relativeFrom, resolve, setFileSystem, toRelativeImport } from './src/helpers';
-export { LogicalFileSystem, LogicalProjectPath } from './src/logical';
-export { NodeJSFileSystem } from './src/node_js_file_system';
-export { AbsoluteFsPath, FileStats, FileSystem, PathManipulation, PathSegment, PathString, ReadonlyFileSystem } from './src/types';
-export { getSourceFileOrError } from './src/util';
+export { NgtscCompilerHost } from './src/compiler_host.js';
+export { absoluteFrom, absoluteFromSourceFile, basename, dirname, getFileSystem, isLocalRelativePath, isRoot, isRooted, join, relative, relativeFrom, resolve, setFileSystem, toRelativeImport } from './src/helpers.js';
+export { LogicalFileSystem, LogicalProjectPath } from './src/logical.js';
+export { NodeJSFileSystem } from './src/node_js_file_system.js';
+export { AbsoluteFsPath, FileStats, FileSystem, PathManipulation, PathSegment, PathString, ReadonlyFileSystem } from './src/types.js';
+export { getSourceFileOrError } from './src/util.js';
diff --git a/src/ngtsc/file_system/src/compiler_host.d.ts b/src/ngtsc/file_system/src/compiler_host.d.ts
index 394e0727cdebb491572508bb1bd77c9321ebdf6e..578af50be564f3b2fa441ffb1309c6de756e88d4 100755
--- a/src/ngtsc/file_system/src/compiler_host.d.ts
+++ b/src/ngtsc/file_system/src/compiler_host.d.ts
@@ -7,7 +7,7 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/file_system/src/compiler_host" />
 import ts from 'typescript';
-import { FileSystem } from './types';
+import { FileSystem } from './types.js';
 export declare class NgtscCompilerHost implements ts.CompilerHost {
     protected fs: FileSystem;
     protected options: ts.CompilerOptions;
diff --git a/src/ngtsc/file_system/src/helpers.d.ts b/src/ngtsc/file_system/src/helpers.d.ts
index 733a8397531d12b71b293552766406dba5be9b1d..319ff180e4c6d6e97bc18d6b88e5dcdfed539ff1 100755
--- a/src/ngtsc/file_system/src/helpers.d.ts
+++ b/src/ngtsc/file_system/src/helpers.d.ts
@@ -1,5 +1,5 @@
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/file_system/src/helpers" />
-import { AbsoluteFsPath, FileSystem, PathSegment, PathString } from './types';
+import { AbsoluteFsPath, FileSystem, PathSegment, PathString } from './types.js';
 export declare function getFileSystem(): FileSystem;
 export declare function setFileSystem(fileSystem: FileSystem): void;
 /**
diff --git a/src/ngtsc/file_system/src/invalid_file_system.d.ts b/src/ngtsc/file_system/src/invalid_file_system.d.ts
index 084908efeca1c76fab02c5590973a5807084b145..bc93fb9c852194a6c51276849a82773c91f02d45 100755
--- a/src/ngtsc/file_system/src/invalid_file_system.d.ts
+++ b/src/ngtsc/file_system/src/invalid_file_system.d.ts
@@ -6,7 +6,7 @@
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
  */
-import { AbsoluteFsPath, FileStats, FileSystem, PathSegment, PathString } from './types';
+import { AbsoluteFsPath, FileStats, FileSystem, PathSegment, PathString } from './types.js';
 /**
  * The default `FileSystem` that will always fail.
  *
diff --git a/src/ngtsc/file_system/src/logical.d.ts b/src/ngtsc/file_system/src/logical.d.ts
index f8ea61a4dbd9b9f89a413ec83e277758cf528924..2e08c030632deec77b0852eed9e0d252435af041 100755
--- a/src/ngtsc/file_system/src/logical.d.ts
+++ b/src/ngtsc/file_system/src/logical.d.ts
@@ -7,7 +7,7 @@
  * found in the LICENSE file at https://angular.io/license
  */
 import ts from 'typescript';
-import { AbsoluteFsPath, BrandedPath, PathSegment } from './types';
+import { AbsoluteFsPath, BrandedPath, PathSegment } from './types.js';
 /**
  * A path that's relative to the logical root of a TypeScript project (one of the project's
  * rootDirs).
diff --git a/src/ngtsc/file_system/src/node_js_file_system.d.ts b/src/ngtsc/file_system/src/node_js_file_system.d.ts
index 0439b92e32cf42ee8fe66847cc2a7fecc9f6367a..654ed2a3a64869978d2c75198ae00e9dce448c05 100755
--- a/src/ngtsc/file_system/src/node_js_file_system.d.ts
+++ b/src/ngtsc/file_system/src/node_js_file_system.d.ts
@@ -1,5 +1,5 @@
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/file_system/src/node_js_file_system" />
-import { AbsoluteFsPath, FileStats, FileSystem, PathManipulation, PathSegment, PathString, ReadonlyFileSystem } from './types';
+import { AbsoluteFsPath, FileStats, FileSystem, PathManipulation, PathSegment, PathString, ReadonlyFileSystem } from './types.js';
 /**
  * A wrapper around the Node.js file-system that supports path manipulation.
  */
diff --git a/src/ngtsc/file_system/src/util.d.ts b/src/ngtsc/file_system/src/util.d.ts
index 0792d0621db1e33b5d26e8197bcb61f40a752664..292b3f9bf74aefc661ae8d7bc4ed855a873a97c7 100755
--- a/src/ngtsc/file_system/src/util.d.ts
+++ b/src/ngtsc/file_system/src/util.d.ts
@@ -7,7 +7,7 @@
  * found in the LICENSE file at https://angular.io/license
  */
 import ts from 'typescript';
-import { AbsoluteFsPath, PathString } from './types';
+import { AbsoluteFsPath, PathString } from './types.js';
 /**
  * Convert Windows-style separators to POSIX separators.
  */
diff --git a/src/ngtsc/imports/index.d.ts b/src/ngtsc/imports/index.d.ts
index af353322a3b63438fde8ec332445645c868ec824..9fff6b75774dfb264db29ce6c59bbced72bb88e3 100755
--- a/src/ngtsc/imports/index.d.ts
+++ b/src/ngtsc/imports/index.d.ts
@@ -6,10 +6,10 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/imports" />
-export { AliasingHost, AliasStrategy, PrivateExportAliasingHost, UnifiedModulesAliasingHost } from './src/alias';
-export { ImportRewriter, NoopImportRewriter, R3SymbolsImportRewriter, validateAndRewriteCoreSymbol } from './src/core';
-export { DefaultImportTracker } from './src/default';
-export { AbsoluteModuleStrategy, assertSuccessfulReferenceEmit, EmittedReference, FailedEmitResult, ImportedFile, ImportFlags, LocalIdentifierStrategy, LogicalProjectStrategy, ReferenceEmitKind, ReferenceEmitResult, ReferenceEmitStrategy, ReferenceEmitter, RelativePathStrategy, UnifiedModulesStrategy } from './src/emitter';
-export { Reexport } from './src/reexport';
-export { OwningModule, Reference } from './src/references';
-export { ModuleResolver } from './src/resolver';
+export { AliasingHost, AliasStrategy, PrivateExportAliasingHost, UnifiedModulesAliasingHost } from './src/alias.js';
+export { ImportRewriter, NoopImportRewriter, R3SymbolsImportRewriter, validateAndRewriteCoreSymbol } from './src/core.js';
+export { DefaultImportTracker } from './src/default.js';
+export { AbsoluteModuleStrategy, assertSuccessfulReferenceEmit, EmittedReference, FailedEmitResult, ImportedFile, ImportFlags, LocalIdentifierStrategy, LogicalProjectStrategy, ReferenceEmitKind, ReferenceEmitResult, ReferenceEmitStrategy, ReferenceEmitter, RelativePathStrategy, UnifiedModulesStrategy } from './src/emitter.js';
+export { Reexport } from './src/reexport.js';
+export { OwningModule, Reference } from './src/references.js';
+export { ModuleResolver } from './src/resolver.js';
diff --git a/src/ngtsc/imports/src/alias.d.ts b/src/ngtsc/imports/src/alias.d.ts
index efd8425bb1fe4f86732c0dfcbbe5ceacbc054e36..eb61e274b00045dadbc8817b761f6ee47f44e288 100755
--- a/src/ngtsc/imports/src/alias.d.ts
+++ b/src/ngtsc/imports/src/alias.d.ts
@@ -8,10 +8,10 @@
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/imports/src/alias" />
 import { Expression } from '@angular/compiler';
 import ts from 'typescript';
-import { UnifiedModulesHost } from '../../core/api';
-import { ClassDeclaration, ReflectionHost } from '../../reflection';
-import { EmittedReference, ImportFlags, ReferenceEmitStrategy } from './emitter';
-import { Reference } from './references';
+import { UnifiedModulesHost } from '../../core/api/index.js';
+import { ClassDeclaration, ReflectionHost } from '../../reflection/index.js';
+import { EmittedReference, ImportFlags, ReferenceEmitStrategy } from './emitter.js';
+import { Reference } from './references.js';
 /**
  * A host for the aliasing system, which allows for alternative exports/imports of directives/pipes.
  *
diff --git a/src/ngtsc/imports/src/emitter.d.ts b/src/ngtsc/imports/src/emitter.d.ts
index 6955e131ee09fc544e4b1566e550fd9ce97ac03c..23796b46be3da119b4b7d57c344cf1257e3f33ed 100755
--- a/src/ngtsc/imports/src/emitter.d.ts
+++ b/src/ngtsc/imports/src/emitter.d.ts
@@ -8,11 +8,11 @@
  */
 import { Expression } from '@angular/compiler';
 import ts from 'typescript';
-import { UnifiedModulesHost } from '../../core/api';
-import { LogicalFileSystem } from '../../file_system';
-import { DeclarationNode, ReflectionHost } from '../../reflection';
-import { Reference } from './references';
-import { ModuleResolver } from './resolver';
+import { UnifiedModulesHost } from '../../core/api/index.js';
+import { LogicalFileSystem } from '../../file_system/index.js';
+import { DeclarationNode, ReflectionHost } from '../../reflection/index.js';
+import { Reference } from './references.js';
+import { ModuleResolver } from './resolver.js';
 /**
  * Flags which alter the imports generated by the `ReferenceEmitter`.
  */
diff --git a/src/ngtsc/imports/src/find_export.d.ts b/src/ngtsc/imports/src/find_export.d.ts
index 7787ba37a2ef500ed35314fab56c3543f7f8ae19..61722a7412953ebf52d7064875ffecf59816db42 100755
--- a/src/ngtsc/imports/src/find_export.d.ts
+++ b/src/ngtsc/imports/src/find_export.d.ts
@@ -7,7 +7,7 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/imports/src/find_export" />
 import ts from 'typescript';
-import { ReflectionHost } from '../../reflection';
+import { ReflectionHost } from '../../reflection/index.js';
 /**
  * Find the name, if any, by which a node is exported from a given file.
  */
diff --git a/src/ngtsc/incremental/api.d.ts b/src/ngtsc/incremental/api.d.ts
index e617050b73bae7c466dca7e998fc87b258536940..20c69f31c578fc2987dce0cbff3bdee9413d33c9 100755
--- a/src/ngtsc/incremental/api.d.ts
+++ b/src/ngtsc/incremental/api.d.ts
@@ -7,7 +7,7 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/incremental/api" />
 import ts from 'typescript';
-import { AbsoluteFsPath } from '../file_system';
+import { AbsoluteFsPath } from '../file_system/index.js';
 /**
  * Interface of the incremental build engine.
  *
diff --git a/src/ngtsc/incremental/index.d.ts b/src/ngtsc/incremental/index.d.ts
index 04320daf5967ba412f011e9f1c306b0c2c48adac..41c7fe2bf7d6c53dfab5f22e777cb559749822ef 100755
--- a/src/ngtsc/incremental/index.d.ts
+++ b/src/ngtsc/incremental/index.d.ts
@@ -6,7 +6,7 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/incremental" />
-export { IncrementalCompilation } from './src/incremental';
-export { NOOP_INCREMENTAL_BUILD } from './src/noop';
-export { AnalyzedIncrementalState, DeltaIncrementalState, FreshIncrementalState, IncrementalState, IncrementalStateKind } from './src/state';
-export * from './src/strategy';
+export { IncrementalCompilation } from './src/incremental.js';
+export { NOOP_INCREMENTAL_BUILD } from './src/noop.js';
+export { AnalyzedIncrementalState, DeltaIncrementalState, FreshIncrementalState, IncrementalState, IncrementalStateKind } from './src/state.js';
+export * from './src/strategy.js';
diff --git a/src/ngtsc/incremental/semantic_graph/index.d.ts b/src/ngtsc/incremental/semantic_graph/index.d.ts
index f68f2943e587a73b37076e92d6fc450b344e4d4a..04fdcc6b44904a648fc8ddfe7e25cb11862b2a74 100755
--- a/src/ngtsc/incremental/semantic_graph/index.d.ts
+++ b/src/ngtsc/incremental/semantic_graph/index.d.ts
@@ -6,7 +6,7 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/incremental/semantic_graph" />
-export { SemanticReference, SemanticSymbol } from './src/api';
-export { SemanticDepGraph, SemanticDepGraphUpdater } from './src/graph';
-export { areTypeParametersEqual, extractSemanticTypeParameters, SemanticTypeParameter } from './src/type_parameters';
-export { isArrayEqual, isReferenceEqual, isSetEqual, isSymbolEqual } from './src/util';
+export { SemanticReference, SemanticSymbol } from './src/api.js';
+export { SemanticDepGraph, SemanticDepGraphUpdater } from './src/graph.js';
+export { areTypeParametersEqual, extractSemanticTypeParameters, SemanticTypeParameter } from './src/type_parameters.js';
+export { isArrayEqual, isReferenceEqual, isSetEqual, isSymbolEqual } from './src/util.js';
diff --git a/src/ngtsc/incremental/semantic_graph/src/api.d.ts b/src/ngtsc/incremental/semantic_graph/src/api.d.ts
index 72502b4ecabefa39f3bd7615c865054ea699df66..0dbd6719869b402d7b4a68e4752e1c7400bb55a3 100755
--- a/src/ngtsc/incremental/semantic_graph/src/api.d.ts
+++ b/src/ngtsc/incremental/semantic_graph/src/api.d.ts
@@ -1,6 +1,6 @@
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/incremental/semantic_graph/src/api" />
-import { AbsoluteFsPath } from '../../../file_system';
-import { ClassDeclaration } from '../../../reflection';
+import { AbsoluteFsPath } from '../../../file_system/index.js';
+import { ClassDeclaration } from '../../../reflection/index.js';
 /**
  * Represents a symbol that is recognizable across incremental rebuilds, which enables the captured
  * metadata to be compared to the prior compilation. This allows for semantic understanding of
diff --git a/src/ngtsc/incremental/semantic_graph/src/graph.d.ts b/src/ngtsc/incremental/semantic_graph/src/graph.d.ts
index b4d0e28e1cf9d0de5e004740f78adf90d5677155..657c2d5174b5d8497f8a4477dc3c36b1d66afaf0 100755
--- a/src/ngtsc/incremental/semantic_graph/src/graph.d.ts
+++ b/src/ngtsc/incremental/semantic_graph/src/graph.d.ts
@@ -7,9 +7,9 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/incremental/semantic_graph/src/graph" />
 import { Expression } from '@angular/compiler';
-import { AbsoluteFsPath } from '../../../file_system';
-import { ClassDeclaration } from '../../../reflection';
-import { SemanticReference, SemanticSymbol } from './api';
+import { AbsoluteFsPath } from '../../../file_system/index.js';
+import { ClassDeclaration } from '../../../reflection/index.js';
+import { SemanticReference, SemanticSymbol } from './api.js';
 export interface SemanticDependencyResult {
     /**
      * The files that need to be re-emitted.
diff --git a/src/ngtsc/incremental/semantic_graph/src/type_parameters.d.ts b/src/ngtsc/incremental/semantic_graph/src/type_parameters.d.ts
index 3a754371e1dd76921e7d9f3157b40d448fdea0db..a1c305ccbdf916e84fa02d93db1884cbd4b59bb4 100755
--- a/src/ngtsc/incremental/semantic_graph/src/type_parameters.d.ts
+++ b/src/ngtsc/incremental/semantic_graph/src/type_parameters.d.ts
@@ -1,5 +1,5 @@
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/incremental/semantic_graph/src/type_parameters" />
-import { ClassDeclaration } from '../../../reflection';
+import { ClassDeclaration } from '../../../reflection/index.js';
 /**
  * Describes a generic type parameter of a semantic symbol. A class declaration with type parameters
  * needs special consideration in certain contexts. For example, template type-check blocks may
diff --git a/src/ngtsc/incremental/semantic_graph/src/util.d.ts b/src/ngtsc/incremental/semantic_graph/src/util.d.ts
index 48943c7695fb6db0c7b18a641013aa07522e2fa7..98de7da75bd035bbda7d91350d5f84fbc4f9c4a0 100755
--- a/src/ngtsc/incremental/semantic_graph/src/util.d.ts
+++ b/src/ngtsc/incremental/semantic_graph/src/util.d.ts
@@ -6,7 +6,7 @@
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
  */
-import { SemanticReference, SemanticSymbol } from './api';
+import { SemanticReference, SemanticSymbol } from './api.js';
 /**
  * Determines whether the provided symbols represent the same declaration.
  */
diff --git a/src/ngtsc/incremental/src/dependency_tracking.d.ts b/src/ngtsc/incremental/src/dependency_tracking.d.ts
index 012e7a0074b093afabf22fe2078d90410fc423f4..53c10333c5fbc7a94cbea3452f860bd55d2a64be 100755
--- a/src/ngtsc/incremental/src/dependency_tracking.d.ts
+++ b/src/ngtsc/incremental/src/dependency_tracking.d.ts
@@ -7,8 +7,8 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/incremental/src/dependency_tracking" />
 import ts from 'typescript';
-import { AbsoluteFsPath } from '../../file_system';
-import { DependencyTracker } from '../api';
+import { AbsoluteFsPath } from '../../file_system/index.js';
+import { DependencyTracker } from '../api.js';
 /**
  * An implementation of the `DependencyTracker` dependency graph API.
  *
diff --git a/src/ngtsc/incremental/src/incremental.d.ts b/src/ngtsc/incremental/src/incremental.d.ts
index f38a67c8499148be6bad537a54e38315f560018c..932e526cfb7a4e2831f53b49141f53dda2dab140 100755
--- a/src/ngtsc/incremental/src/incremental.d.ts
+++ b/src/ngtsc/incremental/src/incremental.d.ts
@@ -7,14 +7,14 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/incremental/src/incremental" />
 import ts from 'typescript';
-import { AbsoluteFsPath } from '../../file_system';
-import { PerfRecorder } from '../../perf';
-import { ClassRecord, TraitCompiler } from '../../transform';
-import { FileTypeCheckingData } from '../../typecheck';
-import { IncrementalBuild } from '../api';
-import { SemanticDepGraphUpdater } from '../semantic_graph';
-import { FileDependencyGraph } from './dependency_tracking';
-import { IncrementalState } from './state';
+import { AbsoluteFsPath } from '../../file_system/index.js';
+import { PerfRecorder } from '../../perf/index.js';
+import { ClassRecord, TraitCompiler } from '../../transform/index.js';
+import { FileTypeCheckingData } from '../../typecheck/index.js';
+import { IncrementalBuild } from '../api.js';
+import { SemanticDepGraphUpdater } from '../semantic_graph/index.js';
+import { FileDependencyGraph } from './dependency_tracking.js';
+import { IncrementalState } from './state.js';
 /**
  * Manages the incremental portion of an Angular compilation, allowing for reuse of a prior
  * compilation if available, and producing an output state for reuse of the current compilation in a
diff --git a/src/ngtsc/incremental/src/noop.d.ts b/src/ngtsc/incremental/src/noop.d.ts
index 4389c148dd2e0365474fef63739ba08c36dd0bca..00f7d3d43d3cdb884dc712eeb4f7322e97512c1b 100755
--- a/src/ngtsc/incremental/src/noop.d.ts
+++ b/src/ngtsc/incremental/src/noop.d.ts
@@ -6,5 +6,5 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/incremental/src/noop" />
-import { IncrementalBuild } from '../api';
+import { IncrementalBuild } from '../api.js';
 export declare const NOOP_INCREMENTAL_BUILD: IncrementalBuild<any, any>;
diff --git a/src/ngtsc/incremental/src/state.d.ts b/src/ngtsc/incremental/src/state.d.ts
index e2e1104e73c129135ce3f446f8b000991a13c7ba..12a81cbcd79ad88dd406b86f8d2d931df0777893 100755
--- a/src/ngtsc/incremental/src/state.d.ts
+++ b/src/ngtsc/incremental/src/state.d.ts
@@ -7,11 +7,11 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/incremental/src/state" />
 import ts from 'typescript';
-import { AbsoluteFsPath } from '../../file_system';
-import { ClassRecord } from '../../transform';
-import { FileTypeCheckingData } from '../../typecheck/src/checker';
-import { SemanticDepGraph } from '../semantic_graph';
-import { FileDependencyGraph } from './dependency_tracking';
+import { AbsoluteFsPath } from '../../file_system/index.js';
+import { ClassRecord } from '../../transform/index.js';
+import { FileTypeCheckingData } from '../../typecheck/src/checker.js';
+import { SemanticDepGraph } from '../semantic_graph/index.js';
+import { FileDependencyGraph } from './dependency_tracking.js';
 /**
  * Discriminant of the `IncrementalState` union.
  */
diff --git a/src/ngtsc/incremental/src/strategy.d.ts b/src/ngtsc/incremental/src/strategy.d.ts
index 63be1f975548059fe176238983b04e9cab967f6a..259849c9546bac9afbbb7966bdbf062591e3870f 100755
--- a/src/ngtsc/incremental/src/strategy.d.ts
+++ b/src/ngtsc/incremental/src/strategy.d.ts
@@ -7,7 +7,7 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/incremental/src/strategy" />
 import ts from 'typescript';
-import { IncrementalState } from './state';
+import { IncrementalState } from './state.js';
 /**
  * Strategy used to manage the association between a `ts.Program` and the `IncrementalDriver` which
  * represents the reusable Angular part of its compilation.
diff --git a/src/ngtsc/indexer/index.d.ts b/src/ngtsc/indexer/index.d.ts
index 8c51cbeb93e96a7c80105f2147dafcaf8b550f71..bfb9a3e33ff146da766836f709d786569ea69334 100755
--- a/src/ngtsc/indexer/index.d.ts
+++ b/src/ngtsc/indexer/index.d.ts
@@ -6,6 +6,6 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/indexer" />
-export * from './src/api';
-export { IndexingContext } from './src/context';
-export { generateAnalysis } from './src/transform';
+export * from './src/api.js';
+export { IndexingContext } from './src/context.js';
+export { generateAnalysis } from './src/transform/index.js';
diff --git a/src/ngtsc/indexer/src/api.d.ts b/src/ngtsc/indexer/src/api.d.ts
index 32083cd93b9efc5e7329ec253c44fab3aaa7a5ac..38821db437e792fa61e3b413d4ee95e8796ccf95 100755
--- a/src/ngtsc/indexer/src/api.d.ts
+++ b/src/ngtsc/indexer/src/api.d.ts
@@ -7,7 +7,7 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/indexer/src/api" />
 import { ParseSourceFile } from '@angular/compiler';
-import { ClassDeclaration, DeclarationNode } from '../../reflection';
+import { ClassDeclaration, DeclarationNode } from '../../reflection/index.js';
 /**
  * Describes the kind of identifier found in a template.
  */
diff --git a/src/ngtsc/indexer/src/context.d.ts b/src/ngtsc/indexer/src/context.d.ts
index f947b13f36d6655730ae470d8f67bde524d5d390..6b738ac9dc768b20fe2eaa0422ea3b2b6254f6c1 100755
--- a/src/ngtsc/indexer/src/context.d.ts
+++ b/src/ngtsc/indexer/src/context.d.ts
@@ -7,8 +7,8 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/indexer/src/context" />
 import { BoundTarget, DirectiveMeta, ParseSourceFile } from '@angular/compiler';
-import { Reference } from '../../imports';
-import { ClassDeclaration } from '../../reflection';
+import { Reference } from '../../imports/index.js';
+import { ClassDeclaration } from '../../reflection/index.js';
 export interface ComponentMeta extends DirectiveMeta {
     ref: Reference<ClassDeclaration>;
     /**
diff --git a/src/ngtsc/indexer/src/template.d.ts b/src/ngtsc/indexer/src/template.d.ts
index cc01cf0482e9b2258a90d0ff79a877d47f0e3ce0..c0ac20b23daab57d86ec0cc8c0def350a5a6f4a3 100755
--- a/src/ngtsc/indexer/src/template.d.ts
+++ b/src/ngtsc/indexer/src/template.d.ts
@@ -7,8 +7,8 @@
  * found in the LICENSE file at https://angular.io/license
  */
 import { BoundTarget } from '@angular/compiler';
-import { TopLevelIdentifier } from './api';
-import { ComponentMeta } from './context';
+import { TopLevelIdentifier } from './api.js';
+import { ComponentMeta } from './context.js';
 /**
  * Traverses a template AST and builds identifiers discovered in it.
  *
diff --git a/src/ngtsc/indexer/src/transform.d.ts b/src/ngtsc/indexer/src/transform.d.ts
index c7b2ac91cdc0e69d3dac1e42d255c41be8b582e9..b76892462daa0143b07b58218ca551821873c95b 100755
--- a/src/ngtsc/indexer/src/transform.d.ts
+++ b/src/ngtsc/indexer/src/transform.d.ts
@@ -6,9 +6,9 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/indexer/src/transform" />
-import { DeclarationNode } from '../../reflection';
-import { IndexedComponent } from './api';
-import { IndexingContext } from './context';
+import { DeclarationNode } from '../../reflection/index.js';
+import { IndexedComponent } from './api.js';
+import { IndexingContext } from './context.js';
 /**
  * Generates `IndexedComponent` entries from a `IndexingContext`, which has information
  * about components discovered in the program registered in it.
diff --git a/src/ngtsc/logging/index.d.ts b/src/ngtsc/logging/index.d.ts
index 834ef905c64d5412777f4e37f23037a317abba34..4d813a9bed7a930b63e506e78c84f06f8f76182c 100755
--- a/src/ngtsc/logging/index.d.ts
+++ b/src/ngtsc/logging/index.d.ts
@@ -6,5 +6,5 @@
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
  */
-export { ConsoleLogger } from './src/console_logger';
-export { Logger, LogLevel } from './src/logger';
+export { ConsoleLogger } from './src/console_logger.js';
+export { Logger, LogLevel } from './src/logger.js';
diff --git a/src/ngtsc/logging/src/console_logger.d.ts b/src/ngtsc/logging/src/console_logger.d.ts
index d47430d662486c60e73245eda7b32e0bff0732c8..6cf8db6bf3c78a8c6a8b5714636475690a9f49bb 100755
--- a/src/ngtsc/logging/src/console_logger.d.ts
+++ b/src/ngtsc/logging/src/console_logger.d.ts
@@ -6,7 +6,7 @@
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
  */
-import { Logger, LogLevel } from './logger';
+import { Logger, LogLevel } from './logger.js';
 export declare const DEBUG: string;
 export declare const WARN: string;
 export declare const ERROR: string;
diff --git a/src/ngtsc/metadata/index.d.ts b/src/ngtsc/metadata/index.d.ts
index ff2eaf778795fe5c86d544ea31d093ed69db886d..55cd6df0aa856779df6791ff7503bfaa54aa44d4 100755
--- a/src/ngtsc/metadata/index.d.ts
+++ b/src/ngtsc/metadata/index.d.ts
@@ -6,10 +6,10 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/metadata" />
-export * from './src/api';
-export { DtsMetadataReader } from './src/dts';
-export { flattenInheritedDirectiveMetadata } from './src/inheritance';
-export { CompoundMetadataRegistry, LocalMetadataRegistry, InjectableClassRegistry } from './src/registry';
-export { ResourceRegistry, Resource, ComponentResources, isExternalResource, ExternalResource } from './src/resource_registry';
-export { extractDirectiveTypeCheckMeta, CompoundMetadataReader } from './src/util';
-export { BindingPropertyName, ClassPropertyMapping, ClassPropertyName, InputOrOutput } from './src/property_mapping';
+export * from './src/api.js';
+export { DtsMetadataReader } from './src/dts.js';
+export { flattenInheritedDirectiveMetadata } from './src/inheritance.js';
+export { CompoundMetadataRegistry, LocalMetadataRegistry, InjectableClassRegistry } from './src/registry.js';
+export { ResourceRegistry, Resource, ComponentResources, isExternalResource, ExternalResource } from './src/resource_registry.js';
+export { extractDirectiveTypeCheckMeta, CompoundMetadataReader } from './src/util.js';
+export { BindingPropertyName, ClassPropertyMapping, ClassPropertyName, InputOrOutput } from './src/property_mapping.js';
diff --git a/src/ngtsc/metadata/src/api.d.ts b/src/ngtsc/metadata/src/api.d.ts
index f4ed9ddbfffe3db7d182b47824715ef2d53bda3f..7e8284e4b26867ef108941a1aaa70579fc802c78 100755
--- a/src/ngtsc/metadata/src/api.d.ts
+++ b/src/ngtsc/metadata/src/api.d.ts
@@ -8,9 +8,9 @@
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/metadata/src/api" />
 import { DirectiveMeta as T2DirectiveMeta, SchemaMetadata } from '@angular/compiler';
 import ts from 'typescript';
-import { Reference } from '../../imports';
-import { ClassDeclaration } from '../../reflection';
-import { ClassPropertyMapping, ClassPropertyName } from './property_mapping';
+import { Reference } from '../../imports/index.js';
+import { ClassDeclaration } from '../../reflection/index.js';
+import { ClassPropertyMapping, ClassPropertyName } from './property_mapping.js';
 /**
  * Metadata collected for an `NgModule`.
  */
diff --git a/src/ngtsc/metadata/src/dts.d.ts b/src/ngtsc/metadata/src/dts.d.ts
index f3ab9a2f0ba37f8d260e560c9f2f409045c59d68..5b7200cbde8f71423135460d60cd29cc733276e0 100755
--- a/src/ngtsc/metadata/src/dts.d.ts
+++ b/src/ngtsc/metadata/src/dts.d.ts
@@ -7,9 +7,9 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/metadata/src/dts" />
 import ts from 'typescript';
-import { Reference } from '../../imports';
-import { ClassDeclaration, ReflectionHost } from '../../reflection';
-import { DirectiveMeta, MetadataReader, NgModuleMeta, PipeMeta } from './api';
+import { Reference } from '../../imports/index.js';
+import { ClassDeclaration, ReflectionHost } from '../../reflection/index.js';
+import { DirectiveMeta, MetadataReader, NgModuleMeta, PipeMeta } from './api.js';
 /**
  * A `MetadataReader` that can read metadata from `.d.ts` files, which have static Ivy properties
  * from an upstream compilation already.
diff --git a/src/ngtsc/metadata/src/inheritance.d.ts b/src/ngtsc/metadata/src/inheritance.d.ts
index 6b36a26cb2f863753ef28b5f92d00278d248cd58..df3a335664cf0467cf5563652ec67a0b85857616 100755
--- a/src/ngtsc/metadata/src/inheritance.d.ts
+++ b/src/ngtsc/metadata/src/inheritance.d.ts
@@ -6,9 +6,9 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/metadata/src/inheritance" />
-import { Reference } from '../../imports';
-import { ClassDeclaration } from '../../reflection';
-import { DirectiveMeta, MetadataReader } from './api';
+import { Reference } from '../../imports/index.js';
+import { ClassDeclaration } from '../../reflection/index.js';
+import { DirectiveMeta, MetadataReader } from './api.js';
 /**
  * Given a reference to a directive, return a flattened version of its `DirectiveMeta` metadata
  * which includes metadata from its entire inheritance chain.
diff --git a/src/ngtsc/metadata/src/registry.d.ts b/src/ngtsc/metadata/src/registry.d.ts
index 6a2e5fa512c8a5be56605eb4afad17dfeee79e9a..6e8ed4850b8f3093800fa82df43aa08062c38bb0 100755
--- a/src/ngtsc/metadata/src/registry.d.ts
+++ b/src/ngtsc/metadata/src/registry.d.ts
@@ -6,9 +6,9 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/metadata/src/registry" />
-import { Reference } from '../../imports';
-import { ClassDeclaration, ReflectionHost } from '../../reflection';
-import { DirectiveMeta, MetadataReader, MetadataRegistry, NgModuleMeta, PipeMeta } from './api';
+import { Reference } from '../../imports/index.js';
+import { ClassDeclaration, ReflectionHost } from '../../reflection/index.js';
+import { DirectiveMeta, MetadataReader, MetadataRegistry, NgModuleMeta, PipeMeta } from './api.js';
 /**
  * A registry of directive, pipe, and module metadata for types defined in the current compilation
  * unit, which supports both reading and registering.
diff --git a/src/ngtsc/metadata/src/resource_registry.d.ts b/src/ngtsc/metadata/src/resource_registry.d.ts
index 5d82f1a199a9f9d79a834a62f19f082f846f4108..f4868263e8ef13d32cb38fb61fce09f8a25709c8 100755
--- a/src/ngtsc/metadata/src/resource_registry.d.ts
+++ b/src/ngtsc/metadata/src/resource_registry.d.ts
@@ -7,8 +7,8 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/metadata/src/resource_registry" />
 import ts from 'typescript';
-import { AbsoluteFsPath } from '../../file_system';
-import { ClassDeclaration } from '../../reflection';
+import { AbsoluteFsPath } from '../../file_system/index.js';
+import { ClassDeclaration } from '../../reflection/index.js';
 /**
  * Represents an resource for a component and contains the `AbsoluteFsPath`
  * to the file which was resolved by evaluating the `ts.Expression` (generally, a relative or
diff --git a/src/ngtsc/metadata/src/util.d.ts b/src/ngtsc/metadata/src/util.d.ts
index 1216fad8b4a56d050ee1bf77ef7cd14f03b5227e..328e18ad47298f55ff37d98ef6e3af5858c6cb12 100755
--- a/src/ngtsc/metadata/src/util.d.ts
+++ b/src/ngtsc/metadata/src/util.d.ts
@@ -7,10 +7,10 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/metadata/src/util" />
 import ts from 'typescript';
-import { OwningModule, Reference } from '../../imports';
-import { ClassDeclaration, ReflectionHost } from '../../reflection';
-import { DirectiveMeta, DirectiveTypeCheckMeta, MetadataReader, NgModuleMeta, PipeMeta } from './api';
-import { ClassPropertyMapping } from './property_mapping';
+import { OwningModule, Reference } from '../../imports/index.js';
+import { ClassDeclaration, ReflectionHost } from '../../reflection/index.js';
+import { DirectiveMeta, DirectiveTypeCheckMeta, MetadataReader, NgModuleMeta, PipeMeta } from './api.js';
+import { ClassPropertyMapping } from './property_mapping.js';
 export declare function extractReferencesFromType(checker: ts.TypeChecker, def: ts.TypeNode, bestGuessOwningModule: OwningModule | null): Reference<ClassDeclaration>[];
 export declare function readBooleanType(type: ts.TypeNode): boolean | null;
 export declare function readStringType(type: ts.TypeNode): string | null;
diff --git a/src/ngtsc/partial_evaluator/index.d.ts b/src/ngtsc/partial_evaluator/index.d.ts
index b9ce7bee0822e3f1ba051875db62d53cc3c43ecc..e8d4346630a0dfebb3abe2db0cf03f05077c97b7 100755
--- a/src/ngtsc/partial_evaluator/index.d.ts
+++ b/src/ngtsc/partial_evaluator/index.d.ts
@@ -6,9 +6,9 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/partial_evaluator" />
-export { describeResolvedType, traceDynamicValue } from './src/diagnostics';
-export { DynamicValue } from './src/dynamic';
-export { ForeignFunctionResolver, PartialEvaluator } from './src/interface';
-export { StaticInterpreter } from './src/interpreter';
-export { EnumValue, KnownFn, ResolvedValue, ResolvedValueArray, ResolvedValueMap } from './src/result';
-export { SyntheticValue } from './src/synthetic';
+export { describeResolvedType, traceDynamicValue } from './src/diagnostics.js';
+export { DynamicValue } from './src/dynamic.js';
+export { ForeignFunctionResolver, PartialEvaluator } from './src/interface.js';
+export { StaticInterpreter } from './src/interpreter.js';
+export { EnumValue, KnownFn, ResolvedValue, ResolvedValueArray, ResolvedValueMap } from './src/result.js';
+export { SyntheticValue } from './src/synthetic.js';
diff --git a/src/ngtsc/partial_evaluator/src/builtin.d.ts b/src/ngtsc/partial_evaluator/src/builtin.d.ts
index 2d1251c37813b8104d50ecaceef9c2fc8927addb..c95aa0e72404e7f0949abbd2f459290f9527dd6c 100755
--- a/src/ngtsc/partial_evaluator/src/builtin.d.ts
+++ b/src/ngtsc/partial_evaluator/src/builtin.d.ts
@@ -7,7 +7,7 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/partial_evaluator/src/builtin" />
 import ts from 'typescript';
-import { KnownFn, ResolvedValue, ResolvedValueArray } from './result';
+import { KnownFn, ResolvedValue, ResolvedValueArray } from './result.js';
 export declare class ArraySliceBuiltinFn extends KnownFn {
     private lhs;
     constructor(lhs: ResolvedValueArray);
diff --git a/src/ngtsc/partial_evaluator/src/diagnostics.d.ts b/src/ngtsc/partial_evaluator/src/diagnostics.d.ts
index 440ddae7f513a3d31a0bbdb5f21b2bc9bfe778fc..ee1023d278fe0fc42667c7cd00f53c597dd72e61 100755
--- a/src/ngtsc/partial_evaluator/src/diagnostics.d.ts
+++ b/src/ngtsc/partial_evaluator/src/diagnostics.d.ts
@@ -7,8 +7,8 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/partial_evaluator/src/diagnostics" />
 import ts from 'typescript';
-import { DynamicValue } from './dynamic';
-import { ResolvedValue } from './result';
+import { DynamicValue } from './dynamic.js';
+import { ResolvedValue } from './result.js';
 /**
  * Derives a type representation from a resolved value to be reported in a diagnostic.
  *
diff --git a/src/ngtsc/partial_evaluator/src/dynamic.d.ts b/src/ngtsc/partial_evaluator/src/dynamic.d.ts
index f4186df62c02015c978f8030b15ba59b9af3b455..50d97402c13f2d2b177dad240f979c1b3a3fd392 100755
--- a/src/ngtsc/partial_evaluator/src/dynamic.d.ts
+++ b/src/ngtsc/partial_evaluator/src/dynamic.d.ts
@@ -7,9 +7,9 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/partial_evaluator/src/dynamic" />
 import ts from 'typescript';
-import { Reference } from '../../imports';
-import { FunctionDefinition } from '../../reflection';
-import { SyntheticValue } from './synthetic';
+import { Reference } from '../../imports/index.js';
+import { FunctionDefinition } from '../../reflection/index.js';
+import { SyntheticValue } from './synthetic.js';
 /**
  * The reason why a value cannot be determined statically.
  */
diff --git a/src/ngtsc/partial_evaluator/src/interface.d.ts b/src/ngtsc/partial_evaluator/src/interface.d.ts
index a2958303ddec5eb236ccdf5564e92243f45c8a11..4c5b79cab0d2cfff18b3c9f2dde3b22121b8fc05 100755
--- a/src/ngtsc/partial_evaluator/src/interface.d.ts
+++ b/src/ngtsc/partial_evaluator/src/interface.d.ts
@@ -7,11 +7,11 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/partial_evaluator/src/interface" />
 import ts from 'typescript';
-import { Reference } from '../../imports';
-import { DependencyTracker } from '../../incremental/api';
-import { ReflectionHost } from '../../reflection';
-import { DynamicValue } from './dynamic';
-import { ResolvedValue } from './result';
+import { Reference } from '../../imports/index.js';
+import { DependencyTracker } from '../../incremental/api.js';
+import { ReflectionHost } from '../../reflection/index.js';
+import { DynamicValue } from './dynamic.js';
+import { ResolvedValue } from './result.js';
 export declare type ForeignFunctionResolver = (fn: Reference<ts.FunctionDeclaration | ts.MethodDeclaration | ts.FunctionExpression>, callExpr: ts.CallExpression, resolve: (expr: ts.Expression) => ResolvedValue, unresolvable: DynamicValue) => ResolvedValue;
 export declare class PartialEvaluator {
     private host;
diff --git a/src/ngtsc/partial_evaluator/src/interpreter.d.ts b/src/ngtsc/partial_evaluator/src/interpreter.d.ts
index bbef54686c64bc8eb50b668ea504b3d157e75c7e..6d88b99b96167a33c6d9db962b016a7bb30c7285 100755
--- a/src/ngtsc/partial_evaluator/src/interpreter.d.ts
+++ b/src/ngtsc/partial_evaluator/src/interpreter.d.ts
@@ -7,10 +7,10 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/partial_evaluator/src/interpreter" />
 import ts from 'typescript';
-import { DependencyTracker } from '../../incremental/api';
-import { ReflectionHost } from '../../reflection';
-import { ForeignFunctionResolver } from './interface';
-import { ResolvedValue } from './result';
+import { DependencyTracker } from '../../incremental/api.js';
+import { ReflectionHost } from '../../reflection/index.js';
+import { ForeignFunctionResolver } from './interface.js';
+import { ResolvedValue } from './result.js';
 /**
  * Tracks the scope of a function body, which includes `ResolvedValue`s for the parameters of that
  * body.
diff --git a/src/ngtsc/partial_evaluator/src/known_declaration.d.ts b/src/ngtsc/partial_evaluator/src/known_declaration.d.ts
index 428f33a0442433e2cccda31e61df979306b532ee..fd6a965d97b68561e2f7fe5bdee3cffe18177b77 100755
--- a/src/ngtsc/partial_evaluator/src/known_declaration.d.ts
+++ b/src/ngtsc/partial_evaluator/src/known_declaration.d.ts
@@ -6,9 +6,9 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/partial_evaluator/src/known_declaration" />
-import { KnownDeclaration } from '../../reflection/src/host';
-import { ObjectAssignBuiltinFn } from './builtin';
-import { ResolvedValue } from './result';
+import { KnownDeclaration } from '../../reflection/src/host.js';
+import { ObjectAssignBuiltinFn } from './builtin.js';
+import { ResolvedValue } from './result.js';
 /** Resolved value for the JavaScript global `Object` declaration. */
 export declare const jsGlobalObjectValue: Map<string, ObjectAssignBuiltinFn>;
 /**
diff --git a/src/ngtsc/partial_evaluator/src/result.d.ts b/src/ngtsc/partial_evaluator/src/result.d.ts
index 3b24b056ec47a5940738d7d4d42644aa0296d270..755deb9ae07d1f331775c684c4f7d0c5c68ef4af 100755
--- a/src/ngtsc/partial_evaluator/src/result.d.ts
+++ b/src/ngtsc/partial_evaluator/src/result.d.ts
@@ -7,10 +7,10 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/partial_evaluator/src/result" />
 import ts from 'typescript';
-import { Reference } from '../../imports';
-import { Declaration } from '../../reflection';
-import { DynamicValue } from './dynamic';
-import { SyntheticValue } from './synthetic';
+import { Reference } from '../../imports/index.js';
+import { Declaration } from '../../reflection/index.js';
+import { DynamicValue } from './dynamic.js';
+import { SyntheticValue } from './synthetic.js';
 /**
  * A value resulting from static resolution.
  *
diff --git a/src/ngtsc/partial_evaluator/src/ts_helpers.d.ts b/src/ngtsc/partial_evaluator/src/ts_helpers.d.ts
index 12786f3d16f71bc1e35b6f5c2c86c234ff12fac3..ac96d95896209ab2b4c5f87134babc260704f011 100755
--- a/src/ngtsc/partial_evaluator/src/ts_helpers.d.ts
+++ b/src/ngtsc/partial_evaluator/src/ts_helpers.d.ts
@@ -7,8 +7,8 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/partial_evaluator/src/ts_helpers" />
 import ts from 'typescript';
-import { ObjectAssignBuiltinFn } from './builtin';
-import { KnownFn, ResolvedValue, ResolvedValueArray } from './result';
+import { ObjectAssignBuiltinFn } from './builtin.js';
+import { KnownFn, ResolvedValue, ResolvedValueArray } from './result.js';
 export declare class AssignHelperFn extends ObjectAssignBuiltinFn {
 }
 export declare class SpreadHelperFn extends KnownFn {
diff --git a/src/ngtsc/perf/index.d.ts b/src/ngtsc/perf/index.d.ts
index c1eaf8623801454f33f11ee1eca8e80421448f03..05babf1f8e9334d6018903acada5c5f21d0c0abc 100755
--- a/src/ngtsc/perf/index.d.ts
+++ b/src/ngtsc/perf/index.d.ts
@@ -6,6 +6,6 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/perf" />
-export * from './src/api';
-export { NOOP_PERF_RECORDER } from './src/noop';
-export { ActivePerfRecorder, DelegatingPerfRecorder } from './src/recorder';
+export * from './src/api.js';
+export { NOOP_PERF_RECORDER } from './src/noop.js';
+export { ActivePerfRecorder, DelegatingPerfRecorder } from './src/recorder.js';
diff --git a/src/ngtsc/perf/src/noop.d.ts b/src/ngtsc/perf/src/noop.d.ts
index 26fadf3d752b01817429e826c11bacdd0608ef6f..1a49fdd0afd2b6f1f3d409abe9a65572627d219e 100755
--- a/src/ngtsc/perf/src/noop.d.ts
+++ b/src/ngtsc/perf/src/noop.d.ts
@@ -6,5 +6,5 @@
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
  */
-import { PerfRecorder } from './api';
+import { PerfRecorder } from './api.js';
 export declare const NOOP_PERF_RECORDER: PerfRecorder;
diff --git a/src/ngtsc/perf/src/recorder.d.ts b/src/ngtsc/perf/src/recorder.d.ts
index 6735d40ab176632a01961dd629fda94e055190ee..a3c66ff5582ecff3285e7b29de6aa7fbca1c9a61 100755
--- a/src/ngtsc/perf/src/recorder.d.ts
+++ b/src/ngtsc/perf/src/recorder.d.ts
@@ -6,7 +6,7 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/perf/src/recorder" />
-import { PerfCheckpoint, PerfEvent, PerfPhase, PerfRecorder } from './api';
+import { PerfCheckpoint, PerfEvent, PerfPhase, PerfRecorder } from './api.js';
 /**
  * Serializable performance data for the compilation, using string names.
  */
diff --git a/src/ngtsc/program.d.ts b/src/ngtsc/program.d.ts
index 471cb56014357836f0bc1ec2a2cbaf8b252c43d0..9eecb6ee6f16c24a2a75b084495e2b67643dc080 100755
--- a/src/ngtsc/program.d.ts
+++ b/src/ngtsc/program.d.ts
@@ -7,11 +7,11 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/program" />
 import ts from 'typescript';
-import * as api from '../transformers/api';
-import { NgCompiler } from './core';
-import { NgCompilerOptions } from './core/api';
-import { IndexedComponent } from './indexer';
-import { DeclarationNode } from './reflection';
+import * as api from '../transformers/api.js';
+import { NgCompiler } from './core/index.js';
+import { NgCompilerOptions } from './core/api/index.js';
+import { IndexedComponent } from './indexer/index.js';
+import { DeclarationNode } from './reflection/index.js';
 /**
  * Entrypoint to the Angular Compiler (Ivy+) which sits behind the `api.Program` interface, allowing
  * it to be a drop-in replacement for the legacy View Engine compiler to tooling such as the
diff --git a/src/ngtsc/program_driver/index.d.ts b/src/ngtsc/program_driver/index.d.ts
index fb40ea5d6a798089e9757eeaf01a603d283226e3..759572b735e0594494091e430ac3528a6ad2b3cb 100755
--- a/src/ngtsc/program_driver/index.d.ts
+++ b/src/ngtsc/program_driver/index.d.ts
@@ -6,5 +6,5 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/program_driver" />
-export * from './src/api';
-export { TsCreateProgramDriver } from './src/ts_create_program_driver';
+export * from './src/api.js';
+export { TsCreateProgramDriver } from './src/ts_create_program_driver.js';
diff --git a/src/ngtsc/program_driver/src/api.d.ts b/src/ngtsc/program_driver/src/api.d.ts
index 0d624e874a88fcdce19f5f5e72fd5e76990f8c63..b5468872e5e84276a0c4ed29715b78533d02d343 100755
--- a/src/ngtsc/program_driver/src/api.d.ts
+++ b/src/ngtsc/program_driver/src/api.d.ts
@@ -7,7 +7,7 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/program_driver/src/api" />
 import ts from 'typescript';
-import { AbsoluteFsPath } from '../../file_system';
+import { AbsoluteFsPath } from '../../file_system/index.js';
 export interface FileUpdate {
     /**
      * The source file text.
diff --git a/src/ngtsc/program_driver/src/ts_create_program_driver.d.ts b/src/ngtsc/program_driver/src/ts_create_program_driver.d.ts
index dd97bc6a1081b075434c655d0354363c235a31e1..45b3730052b83e63dd651351ff956624dc3c259f 100755
--- a/src/ngtsc/program_driver/src/ts_create_program_driver.d.ts
+++ b/src/ngtsc/program_driver/src/ts_create_program_driver.d.ts
@@ -7,9 +7,9 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/program_driver/src/ts_create_program_driver" />
 import ts from 'typescript';
-import { AbsoluteFsPath } from '../../file_system';
-import { RequiredDelegations } from '../../util/src/typescript';
-import { FileUpdate, ProgramDriver, UpdateMode } from './api';
+import { AbsoluteFsPath } from '../../file_system/index.js';
+import { RequiredDelegations } from '../../util/src/typescript.js';
+import { FileUpdate, ProgramDriver, UpdateMode } from './api.js';
 /**
  * Delegates all methods of `ts.CompilerHost` to a delegate, with the exception of
  * `getSourceFile`, `fileExists` and `writeFile` which are implemented in `TypeCheckProgramHost`.
diff --git a/src/ngtsc/reflection/index.d.ts b/src/ngtsc/reflection/index.d.ts
index 4e89bf3f3f2fc1e3555cadfe342c455f2dceeb50..316597d718e3fe8a1a405d8f7462e687148db204 100755
--- a/src/ngtsc/reflection/index.d.ts
+++ b/src/ngtsc/reflection/index.d.ts
@@ -6,7 +6,7 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/reflection" />
-export * from './src/host';
-export { typeNodeToValueExpr } from './src/type_to_value';
-export { TypeScriptReflectionHost, filterToMembersWithDecorator, reflectIdentifierOfDeclaration, reflectNameOfDeclaration, reflectObjectLiteral, reflectTypeEntityToDeclaration } from './src/typescript';
-export { isNamedClassDeclaration, isNamedFunctionDeclaration, isNamedVariableDeclaration } from './src/util';
+export * from './src/host.js';
+export { typeNodeToValueExpr } from './src/type_to_value.js';
+export { TypeScriptReflectionHost, filterToMembersWithDecorator, reflectIdentifierOfDeclaration, reflectNameOfDeclaration, reflectObjectLiteral, reflectTypeEntityToDeclaration } from './src/typescript.js';
+export { isNamedClassDeclaration, isNamedFunctionDeclaration, isNamedVariableDeclaration } from './src/util.js';
diff --git a/src/ngtsc/reflection/src/type_to_value.d.ts b/src/ngtsc/reflection/src/type_to_value.d.ts
index 397fad091395a2e235078c61310ad129a228813d..f5df443cb33f350324e638297a343f110ee99179 100755
--- a/src/ngtsc/reflection/src/type_to_value.d.ts
+++ b/src/ngtsc/reflection/src/type_to_value.d.ts
@@ -7,7 +7,7 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/reflection/src/type_to_value" />
 import ts from 'typescript';
-import { TypeValueReference } from './host';
+import { TypeValueReference } from './host.js';
 /**
  * Potentially convert a `ts.TypeNode` to a `TypeValueReference`, which indicates how to use the
  * type given in the `ts.TypeNode` in a value position.
diff --git a/src/ngtsc/reflection/src/typescript.d.ts b/src/ngtsc/reflection/src/typescript.d.ts
index e81a28056ed02e35d859ea8923d90541ef1ba39d..f4e5f60a275336b101735ca701cdea21f16a3b1f 100755
--- a/src/ngtsc/reflection/src/typescript.d.ts
+++ b/src/ngtsc/reflection/src/typescript.d.ts
@@ -7,7 +7,7 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/reflection/src/typescript" />
 import ts from 'typescript';
-import { ClassDeclaration, ClassMember, CtorParameter, Declaration, DeclarationNode, Decorator, FunctionDefinition, Import, ReflectionHost } from './host';
+import { ClassDeclaration, ClassMember, CtorParameter, Declaration, DeclarationNode, Decorator, FunctionDefinition, Import, ReflectionHost } from './host.js';
 /**
  * reflector.ts implements static reflection of declarations using the TypeScript `ts.TypeChecker`.
  */
diff --git a/src/ngtsc/reflection/src/util.d.ts b/src/ngtsc/reflection/src/util.d.ts
index e1b2a96fd83c5cb36d17a2cd176c7c0d55ecaac4..afda5ae59e49c136ae8fe79cd935e7934b65ad52 100755
--- a/src/ngtsc/reflection/src/util.d.ts
+++ b/src/ngtsc/reflection/src/util.d.ts
@@ -7,7 +7,7 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/reflection/src/util" />
 import ts from 'typescript';
-import { ClassDeclaration } from './host';
+import { ClassDeclaration } from './host.js';
 export declare function isNamedClassDeclaration(node: ts.Node): node is ClassDeclaration<ts.ClassDeclaration>;
 export declare function isNamedFunctionDeclaration(node: ts.Node): node is ClassDeclaration<ts.FunctionDeclaration>;
 export declare function isNamedVariableDeclaration(node: ts.Node): node is ClassDeclaration<ts.VariableDeclaration>;
diff --git a/src/ngtsc/resource/index.d.ts b/src/ngtsc/resource/index.d.ts
index 0faaf68c975482f5240341cfed2f8753887ace51..e4d4350d1943528e007cc4616fd5a214b32b955b 100755
--- a/src/ngtsc/resource/index.d.ts
+++ b/src/ngtsc/resource/index.d.ts
@@ -6,4 +6,4 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/resource" />
-export { AdapterResourceLoader } from './src/loader';
+export { AdapterResourceLoader } from './src/loader.js';
diff --git a/src/ngtsc/resource/src/loader.d.ts b/src/ngtsc/resource/src/loader.d.ts
index 3a8963d78d39f2d642a3fa8adf3941251397b95f..e6c463b45cb4e60a7f4afdb07d4d5d43e5b58eb9 100755
--- a/src/ngtsc/resource/src/loader.d.ts
+++ b/src/ngtsc/resource/src/loader.d.ts
@@ -7,8 +7,8 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/resource/src/loader" />
 import ts from 'typescript';
-import { ResourceLoader, ResourceLoaderContext } from '../../annotations';
-import { NgCompilerAdapter } from '../../core/api';
+import { ResourceLoader, ResourceLoaderContext } from '../../annotations/index.js';
+import { NgCompilerAdapter } from '../../core/api/index.js';
 /**
  * `ResourceLoader` which delegates to an `NgCompilerAdapter`'s resource loading methods.
  */
diff --git a/src/ngtsc/scope/index.d.ts b/src/ngtsc/scope/index.d.ts
index a29b79642566e93ee05480a2e7068721417ac1f7..5d61b370bedd62d88e8e51b87078043ab2027bb5 100755
--- a/src/ngtsc/scope/index.d.ts
+++ b/src/ngtsc/scope/index.d.ts
@@ -6,9 +6,9 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/scope" />
-export { ComponentScopeKind, ComponentScopeReader, ExportScope, LocalModuleScope, ScopeData, StandaloneScope } from './src/api';
-export { CompoundComponentScopeReader } from './src/component_scope';
-export { DtsModuleScopeResolver, MetadataDtsModuleScopeResolver } from './src/dependency';
-export { DeclarationData, LocalModuleScopeRegistry, LocalNgModuleData } from './src/local';
-export { TypeCheckScope, TypeCheckScopeRegistry } from './src/typecheck';
-export { makeNotStandaloneDiagnostic, makeUnknownComponentImportDiagnostic } from './src/util';
+export { ComponentScopeKind, ComponentScopeReader, ExportScope, LocalModuleScope, ScopeData, StandaloneScope } from './src/api.js';
+export { CompoundComponentScopeReader } from './src/component_scope.js';
+export { DtsModuleScopeResolver, MetadataDtsModuleScopeResolver } from './src/dependency.js';
+export { DeclarationData, LocalModuleScopeRegistry, LocalNgModuleData } from './src/local.js';
+export { TypeCheckScope, TypeCheckScopeRegistry } from './src/typecheck.js';
+export { makeNotStandaloneDiagnostic, makeUnknownComponentImportDiagnostic } from './src/util.js';
diff --git a/src/ngtsc/scope/src/api.d.ts b/src/ngtsc/scope/src/api.d.ts
index d2696c82a3b637b888e255e33677cb65bc77cf1b..4480c1ae54fa7ad6e1e140f5c09f4b2406fea8ef 100755
--- a/src/ngtsc/scope/src/api.d.ts
+++ b/src/ngtsc/scope/src/api.d.ts
@@ -7,9 +7,9 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/scope/src/api" />
 import { SchemaMetadata } from '@angular/compiler';
-import { Reexport, Reference } from '../../imports';
-import { DirectiveMeta, NgModuleMeta, PipeMeta } from '../../metadata';
-import { ClassDeclaration } from '../../reflection';
+import { Reexport, Reference } from '../../imports/index.js';
+import { DirectiveMeta, NgModuleMeta, PipeMeta } from '../../metadata/index.js';
+import { ClassDeclaration } from '../../reflection/index.js';
 /**
  * Data for one of a given NgModule's scopes (either compilation scope or export scopes).
  */
diff --git a/src/ngtsc/scope/src/component_scope.d.ts b/src/ngtsc/scope/src/component_scope.d.ts
index 161a2ec0e09c9847828daef5336b6e1aa9cad091..b1f3f43db59723f305ee65ca3db205ba27de4f07 100755
--- a/src/ngtsc/scope/src/component_scope.d.ts
+++ b/src/ngtsc/scope/src/component_scope.d.ts
@@ -6,8 +6,8 @@
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
  */
-import { ClassDeclaration } from '../../reflection';
-import { ComponentScope, ComponentScopeReader, RemoteScope } from './api';
+import { ClassDeclaration } from '../../reflection/index.js';
+import { ComponentScope, ComponentScopeReader, RemoteScope } from './api.js';
 /**
  * A `ComponentScopeReader` that reads from an ordered set of child readers until it obtains the
  * requested scope.
diff --git a/src/ngtsc/scope/src/dependency.d.ts b/src/ngtsc/scope/src/dependency.d.ts
index 3d702a693733f4741812e8940d2fa217dce6c76e..72ac8948140cedda9ce27ac77b2f066c9dcdd9a9 100755
--- a/src/ngtsc/scope/src/dependency.d.ts
+++ b/src/ngtsc/scope/src/dependency.d.ts
@@ -6,10 +6,10 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/scope/src/dependency" />
-import { AliasingHost, Reference } from '../../imports';
-import { MetadataReader } from '../../metadata';
-import { ClassDeclaration } from '../../reflection';
-import { ExportScope } from './api';
+import { AliasingHost, Reference } from '../../imports/index.js';
+import { MetadataReader } from '../../metadata/index.js';
+import { ClassDeclaration } from '../../reflection/index.js';
+import { ExportScope } from './api.js';
 export interface DtsModuleScopeResolver {
     resolve(ref: Reference<ClassDeclaration>): ExportScope | null;
 }
diff --git a/src/ngtsc/scope/src/local.d.ts b/src/ngtsc/scope/src/local.d.ts
index 6f495cfebda8ace1b2e92ccc940f15e7bca7a57b..eb0334d61266dc63a231f2c6d7007d39abab5899 100755
--- a/src/ngtsc/scope/src/local.d.ts
+++ b/src/ngtsc/scope/src/local.d.ts
@@ -7,11 +7,11 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/scope/src/local" />
 import ts from 'typescript';
-import { AliasingHost, Reference, ReferenceEmitter } from '../../imports';
-import { DirectiveMeta, MetadataReader, MetadataRegistry, NgModuleMeta, PipeMeta } from '../../metadata';
-import { ClassDeclaration } from '../../reflection';
-import { ComponentScopeReader, LocalModuleScope, RemoteScope } from './api';
-import { DtsModuleScopeResolver } from './dependency';
+import { AliasingHost, Reference, ReferenceEmitter } from '../../imports/index.js';
+import { DirectiveMeta, MetadataReader, MetadataRegistry, NgModuleMeta, PipeMeta } from '../../metadata/index.js';
+import { ClassDeclaration } from '../../reflection/index.js';
+import { ComponentScopeReader, LocalModuleScope, RemoteScope } from './api.js';
+import { DtsModuleScopeResolver } from './dependency.js';
 export interface LocalNgModuleData {
     declarations: Reference<ClassDeclaration>[];
     imports: Reference<ClassDeclaration>[];
diff --git a/src/ngtsc/scope/src/standalone.d.ts b/src/ngtsc/scope/src/standalone.d.ts
index ce07cf41f4137eb634733ec82c0b8b73f39e232a..ec1dc8ad2a0dfe72bea10e64066516ec8f031f4b 100755
--- a/src/ngtsc/scope/src/standalone.d.ts
+++ b/src/ngtsc/scope/src/standalone.d.ts
@@ -6,11 +6,11 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/scope/src/standalone" />
-import { MetadataReader } from '../../metadata';
-import { ClassDeclaration } from '../../reflection';
-import { ComponentScopeReader, StandaloneScope } from './api';
-import { DtsModuleScopeResolver } from './dependency';
-import { LocalModuleScopeRegistry } from './local';
+import { MetadataReader } from '../../metadata/index.js';
+import { ClassDeclaration } from '../../reflection/index.js';
+import { ComponentScopeReader, StandaloneScope } from './api.js';
+import { DtsModuleScopeResolver } from './dependency.js';
+import { LocalModuleScopeRegistry } from './local.js';
 /**
  * Computes scopes for standalone components based on their `imports`, expanding imported NgModule
  * scopes where necessary.
diff --git a/src/ngtsc/scope/src/typecheck.d.ts b/src/ngtsc/scope/src/typecheck.d.ts
index 95eef219246aee31e1469a0d09aef4edd5c91e61..7e23b255e79841935c0b88c4621cc0a631f7154d 100755
--- a/src/ngtsc/scope/src/typecheck.d.ts
+++ b/src/ngtsc/scope/src/typecheck.d.ts
@@ -8,10 +8,10 @@
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/scope/src/typecheck" />
 import { SchemaMetadata, SelectorMatcher } from '@angular/compiler';
 import ts from 'typescript';
-import { Reference } from '../../imports';
-import { DirectiveMeta, MetadataReader } from '../../metadata';
-import { ClassDeclaration } from '../../reflection';
-import { ComponentScopeReader } from './api';
+import { Reference } from '../../imports/index.js';
+import { DirectiveMeta, MetadataReader } from '../../metadata/index.js';
+import { ClassDeclaration } from '../../reflection/index.js';
+import { ComponentScopeReader } from './api.js';
 /**
  * The scope that is used for type-check code generation of a component template.
  */
diff --git a/src/ngtsc/scope/src/util.d.ts b/src/ngtsc/scope/src/util.d.ts
index 14d0d05197b2aedfafaa989bdd0376f762b15cca..1aee0bd1120514bd49224a90759f8f1e2c1ecd62 100755
--- a/src/ngtsc/scope/src/util.d.ts
+++ b/src/ngtsc/scope/src/util.d.ts
@@ -7,9 +7,9 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/scope/src/util" />
 import ts from 'typescript';
-import { Reference } from '../../imports';
-import { ClassDeclaration } from '../../reflection';
-import { ComponentScopeReader } from './api';
+import { Reference } from '../../imports/index.js';
+import { ClassDeclaration } from '../../reflection/index.js';
+import { ComponentScopeReader } from './api.js';
 export declare function getDiagnosticNode(ref: Reference<ClassDeclaration>, rawExpr: ts.Expression | null): ts.Expression;
 export declare function makeNotStandaloneDiagnostic(scopeReader: ComponentScopeReader, ref: Reference<ClassDeclaration>, rawExpr: ts.Expression | null, kind: 'component' | 'directive' | 'pipe'): ts.Diagnostic;
 export declare function makeUnknownComponentImportDiagnostic(ref: Reference<ClassDeclaration>, rawExpr: ts.Expression): ts.DiagnosticWithLocation;
diff --git a/src/ngtsc/shims/api.d.ts b/src/ngtsc/shims/api.d.ts
index 3877ef53a5b61fc334267869242d9be8c7da4bb7..9ce88bd8c900680848fb3ed9a2d6f5d9e764c56a 100755
--- a/src/ngtsc/shims/api.d.ts
+++ b/src/ngtsc/shims/api.d.ts
@@ -7,7 +7,7 @@
  * found in the LICENSE file at https://angular.io/license
  */
 import ts from 'typescript';
-import { AbsoluteFsPath } from '../file_system';
+import { AbsoluteFsPath } from '../file_system/index.js';
 /**
  * Generates a single shim file for the entire program.
  */
diff --git a/src/ngtsc/shims/index.d.ts b/src/ngtsc/shims/index.d.ts
index 9df3a9d60209f2502408344e08aaa8a5c574b444..31e3ef21999903cc0bacc776d2fe3b14af8b7ebe 100755
--- a/src/ngtsc/shims/index.d.ts
+++ b/src/ngtsc/shims/index.d.ts
@@ -6,8 +6,8 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/shims" />
-export { ShimAdapter } from './src/adapter';
-export { copyFileShimData, isShim, retagAllTsFiles, retagTsFile, sfExtensionData, untagAllTsFiles, untagTsFile } from './src/expando';
-export { FactoryGenerator, generatedFactoryTransform } from './src/factory_generator';
-export { ShimReferenceTagger } from './src/reference_tagger';
-export { SummaryGenerator } from './src/summary_generator';
+export { ShimAdapter } from './src/adapter.js';
+export { copyFileShimData, isShim, retagAllTsFiles, retagTsFile, sfExtensionData, untagAllTsFiles, untagTsFile } from './src/expando.js';
+export { FactoryGenerator, generatedFactoryTransform } from './src/factory_generator.js';
+export { ShimReferenceTagger } from './src/reference_tagger.js';
+export { SummaryGenerator } from './src/summary_generator.js';
diff --git a/src/ngtsc/shims/src/adapter.d.ts b/src/ngtsc/shims/src/adapter.d.ts
index 44d58310555245abd36c299fda8a78805ccb71e9..0969332947bb0d86522975c6f105b546aa176966 100755
--- a/src/ngtsc/shims/src/adapter.d.ts
+++ b/src/ngtsc/shims/src/adapter.d.ts
@@ -7,8 +7,8 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/shims/src/adapter" />
 import ts from 'typescript';
-import { AbsoluteFsPath } from '../../file_system';
-import { PerFileShimGenerator, TopLevelShimGenerator } from '../api';
+import { AbsoluteFsPath } from '../../file_system/index.js';
+import { PerFileShimGenerator, TopLevelShimGenerator } from '../api.js';
 /**
  * Generates and tracks shim files for each original `ts.SourceFile`.
  *
diff --git a/src/ngtsc/shims/src/expando.d.ts b/src/ngtsc/shims/src/expando.d.ts
index 2d86836cc231a67baca6d5750bc5631b5be4c910..e6db15fd3fd9577f5fbd0b2aeed6c8a3c75f1c4c 100755
--- a/src/ngtsc/shims/src/expando.d.ts
+++ b/src/ngtsc/shims/src/expando.d.ts
@@ -7,7 +7,7 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/shims/src/expando" />
 import ts from 'typescript';
-import { AbsoluteFsPath } from '../../file_system';
+import { AbsoluteFsPath } from '../../file_system/index.js';
 /**
  * A `Symbol` which is used to patch extension data onto `ts.SourceFile`s.
  */
diff --git a/src/ngtsc/shims/src/factory_generator.d.ts b/src/ngtsc/shims/src/factory_generator.d.ts
index 23b975a90a16611e463ae8ee8a33ef426f8d8883..5d545f99e746ae26466c50715e71c2076a585ff9 100755
--- a/src/ngtsc/shims/src/factory_generator.d.ts
+++ b/src/ngtsc/shims/src/factory_generator.d.ts
@@ -7,9 +7,9 @@
  * found in the LICENSE file at https://angular.io/license
  */
 import ts from 'typescript';
-import { AbsoluteFsPath } from '../../file_system';
-import { ImportRewriter } from '../../imports';
-import { FactoryInfo, FactoryTracker, ModuleInfo, PerFileShimGenerator } from '../api';
+import { AbsoluteFsPath } from '../../file_system/index.js';
+import { ImportRewriter } from '../../imports/index.js';
+import { FactoryInfo, FactoryTracker, ModuleInfo, PerFileShimGenerator } from '../api.js';
 /**
  * Generates ts.SourceFiles which contain variable declarations for NgFactories for every exported
  * class of an input ts.SourceFile.
diff --git a/src/ngtsc/shims/src/summary_generator.d.ts b/src/ngtsc/shims/src/summary_generator.d.ts
index 1a5682893caea25f899990a02e445f3be6421691..086136eb1f4b7ba7c39d8d2a06fed97430d73695 100755
--- a/src/ngtsc/shims/src/summary_generator.d.ts
+++ b/src/ngtsc/shims/src/summary_generator.d.ts
@@ -7,8 +7,8 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/shims/src/summary_generator" />
 import ts from 'typescript';
-import { AbsoluteFsPath } from '../../file_system';
-import { PerFileShimGenerator } from '../api';
+import { AbsoluteFsPath } from '../../file_system/index.js';
+import { PerFileShimGenerator } from '../api.js';
 export declare class SummaryGenerator implements PerFileShimGenerator {
     readonly shouldEmit = true;
     readonly extensionPrefix = "ngsummary";
diff --git a/src/ngtsc/shims/src/util.d.ts b/src/ngtsc/shims/src/util.d.ts
index 0f1038bd99419ec3458564cf572253376e546ae0..4ae02593674eafb22f54e14d6271aeddd817ef28 100755
--- a/src/ngtsc/shims/src/util.d.ts
+++ b/src/ngtsc/shims/src/util.d.ts
@@ -6,7 +6,7 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/shims/src/util" />
-import { AbsoluteFsPath } from '../../file_system';
+import { AbsoluteFsPath } from '../../file_system/index.js';
 /**
  * Replace the .ts or .tsx extension of a file with the shim filename suffix.
  */
diff --git a/src/ngtsc/sourcemaps/index.d.ts b/src/ngtsc/sourcemaps/index.d.ts
index 404f553da616eb931e8d3d9e9a499a08b4e05fbd..bbcc5b093e8ff8e482063d0b245b5c5ede8fb327 100755
--- a/src/ngtsc/sourcemaps/index.d.ts
+++ b/src/ngtsc/sourcemaps/index.d.ts
@@ -6,7 +6,7 @@
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
  */
-export { ContentOrigin } from './src/content_origin';
-export { MapAndPath, RawSourceMap } from './src/raw_source_map';
-export { Mapping, SourceFile } from './src/source_file';
-export { SourceFileLoader } from './src/source_file_loader';
+export { ContentOrigin } from './src/content_origin.js';
+export { MapAndPath, RawSourceMap } from './src/raw_source_map.js';
+export { Mapping, SourceFile } from './src/source_file.js';
+export { SourceFileLoader } from './src/source_file_loader.js';
diff --git a/src/ngtsc/sourcemaps/src/raw_source_map.d.ts b/src/ngtsc/sourcemaps/src/raw_source_map.d.ts
index e60ccd7359226bcccbe171a552248e2cb222a625..f8d5a7c6d62e47525bd2b66bbd8400398b8fc31f 100755
--- a/src/ngtsc/sourcemaps/src/raw_source_map.d.ts
+++ b/src/ngtsc/sourcemaps/src/raw_source_map.d.ts
@@ -6,8 +6,8 @@
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
  */
-import { AbsoluteFsPath } from '../../file_system';
-import { ContentOrigin } from './content_origin';
+import { AbsoluteFsPath } from '../../file_system/index.js';
+import { ContentOrigin } from './content_origin.js';
 /**
  * This interface is the basic structure of the JSON in a raw source map that one might load from
  * disk.
diff --git a/src/ngtsc/sourcemaps/src/source_file.d.ts b/src/ngtsc/sourcemaps/src/source_file.d.ts
index 9f8b89b7f45e385f42d63673ea8ff0549a053478..7b440643e93b849ff08b885fcc167c0b89f435e8 100755
--- a/src/ngtsc/sourcemaps/src/source_file.d.ts
+++ b/src/ngtsc/sourcemaps/src/source_file.d.ts
@@ -1,7 +1,7 @@
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/sourcemaps/src/source_file" />
-import { AbsoluteFsPath, PathManipulation } from '../../file_system';
-import { RawSourceMap, SourceMapInfo } from './raw_source_map';
-import { SegmentMarker } from './segment_marker';
+import { AbsoluteFsPath, PathManipulation } from '../../file_system/index.js';
+import { RawSourceMap, SourceMapInfo } from './raw_source_map.js';
+import { SegmentMarker } from './segment_marker.js';
 export declare function removeSourceMapComments(contents: string): string;
 export declare class SourceFile {
     /** The path to this source file. */
diff --git a/src/ngtsc/sourcemaps/src/source_file_loader.d.ts b/src/ngtsc/sourcemaps/src/source_file_loader.d.ts
index 08cbd287d2aec52fad26a50fb86011003cf24824..c4640f4a483e9a5c14cd175ea55bfb1dd8b07e55 100755
--- a/src/ngtsc/sourcemaps/src/source_file_loader.d.ts
+++ b/src/ngtsc/sourcemaps/src/source_file_loader.d.ts
@@ -1,8 +1,8 @@
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/sourcemaps/src/source_file_loader" />
-import { AbsoluteFsPath, ReadonlyFileSystem } from '../../file_system';
-import { Logger } from '../../logging';
-import { MapAndPath } from './raw_source_map';
-import { SourceFile } from './source_file';
+import { AbsoluteFsPath, ReadonlyFileSystem } from '../../file_system/index.js';
+import { Logger } from '../../logging/index.js';
+import { MapAndPath } from './raw_source_map.js';
+import { SourceFile } from './source_file.js';
 /**
  * This class can be used to load a source file, its associated source map and any upstream sources.
  *
diff --git a/src/ngtsc/transform/index.d.ts b/src/ngtsc/transform/index.d.ts
index 5fb9678007f7d4ab3a3f89c0e4aa75b76540034b..2a3b6b40787ad71f5d7022c9cec82f932b93df42 100755
--- a/src/ngtsc/transform/index.d.ts
+++ b/src/ngtsc/transform/index.d.ts
@@ -6,9 +6,9 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/transform" />
-export * from './src/api';
-export { aliasTransformFactory } from './src/alias';
-export { ClassRecord, TraitCompiler } from './src/compilation';
-export { declarationTransformFactory, DtsTransformRegistry, IvyDeclarationDtsTransform } from './src/declaration';
-export { AnalyzedTrait, PendingTrait, ResolvedTrait, SkippedTrait, Trait, TraitState } from './src/trait';
-export { ivyTransformFactory } from './src/transform';
+export * from './src/api.js';
+export { aliasTransformFactory } from './src/alias.js';
+export { ClassRecord, TraitCompiler } from './src/compilation.js';
+export { declarationTransformFactory, DtsTransformRegistry, IvyDeclarationDtsTransform } from './src/declaration.js';
+export { AnalyzedTrait, PendingTrait, ResolvedTrait, SkippedTrait, Trait, TraitState } from './src/trait.js';
+export { ivyTransformFactory } from './src/transform.js';
diff --git a/src/ngtsc/transform/src/api.d.ts b/src/ngtsc/transform/src/api.d.ts
index 197256e511a27ccf63faf0b0b3cd23426873a12a..7d0d9e66000b20345c13165b4cc59fad7733d7ac 100755
--- a/src/ngtsc/transform/src/api.d.ts
+++ b/src/ngtsc/transform/src/api.d.ts
@@ -8,14 +8,14 @@
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/transform/src/api" />
 import { ConstantPool, Expression, Statement, Type } from '@angular/compiler';
 import ts from 'typescript';
-import { Reexport } from '../../imports';
-import { SemanticSymbol } from '../../incremental/semantic_graph';
-import { IndexingContext } from '../../indexer';
-import { ClassDeclaration, Decorator } from '../../reflection';
-import { ImportManager } from '../../translator';
-import { TypeCheckContext } from '../../typecheck/api';
-import { ExtendedTemplateChecker } from '../../typecheck/extended/api';
-import { Xi18nContext } from '../../xi18n';
+import { Reexport } from '../../imports/index.js';
+import { SemanticSymbol } from '../../incremental/semantic_graph/index.js';
+import { IndexingContext } from '../../indexer/index.js';
+import { ClassDeclaration, Decorator } from '../../reflection/index.js';
+import { ImportManager } from '../../translator/index.js';
+import { TypeCheckContext } from '../../typecheck/api.js';
+import { ExtendedTemplateChecker } from '../../typecheck/extended/api.js';
+import { Xi18nContext } from '../../xi18n/index.js';
 /**
  * Specifies the compilation mode that is used for the compilation.
  */
diff --git a/src/ngtsc/transform/src/compilation.d.ts b/src/ngtsc/transform/src/compilation.d.ts
index 21c5312c7ec0c81d1643891fa83ddb4a3aa0e7de..41f9a209a990d0b04dc45a5941894a654a04df0c 100755
--- a/src/ngtsc/transform/src/compilation.d.ts
+++ b/src/ngtsc/transform/src/compilation.d.ts
@@ -8,18 +8,18 @@
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/transform/src/compilation" />
 import { ConstantPool } from '@angular/compiler';
 import ts from 'typescript';
-import { SourceFileTypeIdentifier } from '../../core/api';
-import { IncrementalBuild } from '../../incremental/api';
-import { SemanticDepGraphUpdater, SemanticSymbol } from '../../incremental/semantic_graph';
-import { IndexingContext } from '../../indexer';
-import { PerfRecorder } from '../../perf';
-import { ClassDeclaration, DeclarationNode, Decorator, ReflectionHost } from '../../reflection';
-import { ProgramTypeCheckAdapter, TypeCheckContext } from '../../typecheck/api';
-import { ExtendedTemplateChecker } from '../../typecheck/extended/api';
-import { Xi18nContext } from '../../xi18n';
-import { CompilationMode, CompileResult, DecoratorHandler, HandlerFlags } from './api';
-import { DtsTransformRegistry } from './declaration';
-import { PendingTrait, Trait } from './trait';
+import { SourceFileTypeIdentifier } from '../../core/api/index.js';
+import { IncrementalBuild } from '../../incremental/api.js';
+import { SemanticDepGraphUpdater, SemanticSymbol } from '../../incremental/semantic_graph/index.js';
+import { IndexingContext } from '../../indexer/index.js';
+import { PerfRecorder } from '../../perf/index.js';
+import { ClassDeclaration, DeclarationNode, Decorator, ReflectionHost } from '../../reflection/index.js';
+import { ProgramTypeCheckAdapter, TypeCheckContext } from '../../typecheck/api/index.js';
+import { ExtendedTemplateChecker } from '../../typecheck/extended/api/index.js';
+import { Xi18nContext } from '../../xi18n/index.js';
+import { CompilationMode, CompileResult, DecoratorHandler, HandlerFlags } from './api.js';
+import { DtsTransformRegistry } from './declaration.js';
+import { PendingTrait, Trait } from './trait.js';
 /**
  * Records information about a specific class that has matched traits.
  */
diff --git a/src/ngtsc/transform/src/declaration.d.ts b/src/ngtsc/transform/src/declaration.d.ts
index 693afcd6edf33bea4d0dbb387aa32418ed4cf5fe..e8fcb8e94a912a2d36c6e8ceb0cd615543d67d6a 100755
--- a/src/ngtsc/transform/src/declaration.d.ts
+++ b/src/ngtsc/transform/src/declaration.d.ts
@@ -8,10 +8,10 @@
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/transform/src/declaration" />
 import { Type } from '@angular/compiler';
 import ts from 'typescript';
-import { ImportRewriter } from '../../imports';
-import { ClassDeclaration } from '../../reflection';
-import { ImportManager } from '../../translator';
-import { DtsTransform } from './api';
+import { ImportRewriter } from '../../imports/index.js';
+import { ClassDeclaration } from '../../reflection/index.js';
+import { ImportManager } from '../../translator/index.js';
+import { DtsTransform } from './api.js';
 /**
  * Keeps track of `DtsTransform`s per source file, so that it is known which source files need to
  * have their declaration file transformed.
diff --git a/src/ngtsc/transform/src/trait.d.ts b/src/ngtsc/transform/src/trait.d.ts
index 7e1284db94d1e4f097f9c67fa3a5a7a2e4d6f8ac..00f29ef44384a5cf4a93d8784998861493bf0f4b 100755
--- a/src/ngtsc/transform/src/trait.d.ts
+++ b/src/ngtsc/transform/src/trait.d.ts
@@ -7,8 +7,8 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/transform/src/trait" />
 import ts from 'typescript';
-import { SemanticSymbol } from '../../incremental/semantic_graph';
-import { DecoratorHandler, DetectResult } from './api';
+import { SemanticSymbol } from '../../incremental/semantic_graph/index.js';
+import { DecoratorHandler, DetectResult } from './api.js';
 export declare enum TraitState {
     /**
      * Pending traits are freshly created and have never been analyzed.
diff --git a/src/ngtsc/transform/src/transform.d.ts b/src/ngtsc/transform/src/transform.d.ts
index 9a2533ffb6f5939e720b8d63ba17ac99565436ff..ed1ed815b38d8db6d818debf8f911db191928b80 100755
--- a/src/ngtsc/transform/src/transform.d.ts
+++ b/src/ngtsc/transform/src/transform.d.ts
@@ -7,8 +7,8 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/transform/src/transform" />
 import ts from 'typescript';
-import { DefaultImportTracker, ImportRewriter } from '../../imports';
-import { PerfRecorder } from '../../perf';
-import { ReflectionHost } from '../../reflection';
-import { TraitCompiler } from './compilation';
+import { DefaultImportTracker, ImportRewriter } from '../../imports/index.js';
+import { PerfRecorder } from '../../perf/index.js';
+import { ReflectionHost } from '../../reflection/index.js';
+import { TraitCompiler } from './compilation.js';
 export declare function ivyTransformFactory(compilation: TraitCompiler, reflector: ReflectionHost, importRewriter: ImportRewriter, defaultImportTracker: DefaultImportTracker, perf: PerfRecorder, isCore: boolean, isClosureCompilerEnabled: boolean): ts.TransformerFactory<ts.SourceFile>;
diff --git a/src/ngtsc/transform/src/utils.d.ts b/src/ngtsc/transform/src/utils.d.ts
index be9abaf6810c4d21ce4a023b2fed4dc849e84dee..6584545dc7e0a5f8c77e1507b4b67b35ab804621 100755
--- a/src/ngtsc/transform/src/utils.d.ts
+++ b/src/ngtsc/transform/src/utils.d.ts
@@ -7,7 +7,7 @@
  * found in the LICENSE file at https://angular.io/license
  */
 import ts from 'typescript';
-import { ImportManager } from '../../translator';
+import { ImportManager } from '../../translator/index.js';
 /**
  * Adds extra imports in the import manage for this source file, after the existing imports
  * and before the module body.
diff --git a/src/ngtsc/translator/index.d.ts b/src/ngtsc/translator/index.d.ts
index b0f62ec92e742d23eccd19127c2a79d68e8ca27f..1c33f7e9f9aed00c1a3b24e27cd8b437899ef9b2 100755
--- a/src/ngtsc/translator/index.d.ts
+++ b/src/ngtsc/translator/index.d.ts
@@ -6,11 +6,11 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/translator" />
-export { AstFactory, BinaryOperator, LeadingComment, ObjectLiteralProperty, SourceMapLocation, SourceMapRange, TemplateElement, TemplateLiteral, UnaryOperator, VariableDeclarationType } from './src/api/ast_factory';
-export { ImportGenerator, NamedImport } from './src/api/import_generator';
-export { Context } from './src/context';
-export { Import, ImportManager } from './src/import_manager';
-export { ExpressionTranslatorVisitor, RecordWrappedNodeFn, TranslatorOptions } from './src/translator';
-export { translateType } from './src/type_translator';
-export { attachComments, createTemplateMiddle, createTemplateTail, TypeScriptAstFactory } from './src/typescript_ast_factory';
-export { translateExpression, translateStatement } from './src/typescript_translator';
+export { AstFactory, BinaryOperator, LeadingComment, ObjectLiteralProperty, SourceMapLocation, SourceMapRange, TemplateElement, TemplateLiteral, UnaryOperator, VariableDeclarationType } from './src/api/ast_factory.js';
+export { ImportGenerator, NamedImport } from './src/api/import_generator.js';
+export { Context } from './src/context.js';
+export { Import, ImportManager } from './src/import_manager.js';
+export { ExpressionTranslatorVisitor, RecordWrappedNodeFn, TranslatorOptions } from './src/translator.js';
+export { translateType } from './src/type_translator.js';
+export { attachComments, createTemplateMiddle, createTemplateTail, TypeScriptAstFactory } from './src/typescript_ast_factory.js';
+export { translateExpression, translateStatement } from './src/typescript_translator.js';
diff --git a/src/ngtsc/translator/src/import_manager.d.ts b/src/ngtsc/translator/src/import_manager.d.ts
index 4d8dbd3a6b706ff1679307266f083232ac1d9e34..2b2bf429eb45ad6cba2bc01f7fc39b2165a46edd 100755
--- a/src/ngtsc/translator/src/import_manager.d.ts
+++ b/src/ngtsc/translator/src/import_manager.d.ts
@@ -7,8 +7,8 @@
  * found in the LICENSE file at https://angular.io/license
  */
 import ts from 'typescript';
-import { ImportRewriter } from '../../imports';
-import { ImportGenerator, NamedImport } from './api/import_generator';
+import { ImportRewriter } from '../../imports/index.js';
+import { ImportGenerator, NamedImport } from './api/import_generator.js';
 /**
  * Information about an import that has been added to a module.
  */
diff --git a/src/ngtsc/translator/src/translator.d.ts b/src/ngtsc/translator/src/translator.d.ts
index c2c8d3d9b42f726e4864bea3e2d508324b1c2087..09950261077d569c7fab40a9620c7a1a11de8b8a 100755
--- a/src/ngtsc/translator/src/translator.d.ts
+++ b/src/ngtsc/translator/src/translator.d.ts
@@ -7,9 +7,9 @@
  * found in the LICENSE file at https://angular.io/license
  */
 import * as o from '@angular/compiler';
-import { AstFactory } from './api/ast_factory';
-import { ImportGenerator } from './api/import_generator';
-import { Context } from './context';
+import { AstFactory } from './api/ast_factory.js';
+import { ImportGenerator } from './api/import_generator.js';
+import { Context } from './context.js';
 export declare type RecordWrappedNodeFn<TExpression> = (node: o.WrappedNodeExpr<TExpression>) => void;
 export interface TranslatorOptions<TExpression> {
     downlevelTaggedTemplates?: boolean;
diff --git a/src/ngtsc/translator/src/type_translator.d.ts b/src/ngtsc/translator/src/type_translator.d.ts
index 55da95af066647ee25c70787f827091904b890c7..3b9fc8b3c77cfa34e473de32489b720e0882b21d 100755
--- a/src/ngtsc/translator/src/type_translator.d.ts
+++ b/src/ngtsc/translator/src/type_translator.d.ts
@@ -8,8 +8,8 @@
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/translator/src/type_translator" />
 import * as o from '@angular/compiler';
 import ts from 'typescript';
-import { Context } from './context';
-import { ImportManager } from './import_manager';
+import { Context } from './context.js';
+import { ImportManager } from './import_manager.js';
 export declare function translateType(type: o.Type, imports: ImportManager): ts.TypeNode;
 export declare class TypeTranslatorVisitor implements o.ExpressionVisitor, o.TypeVisitor {
     private imports;
diff --git a/src/ngtsc/translator/src/typescript_ast_factory.d.ts b/src/ngtsc/translator/src/typescript_ast_factory.d.ts
index d638c7274c98e6b827513cbecaa414657c0b26f9..d131cd6b94639cd04474ac3f138fa2a464ab364d 100755
--- a/src/ngtsc/translator/src/typescript_ast_factory.d.ts
+++ b/src/ngtsc/translator/src/typescript_ast_factory.d.ts
@@ -7,7 +7,7 @@
  * found in the LICENSE file at https://angular.io/license
  */
 import ts from 'typescript';
-import { AstFactory, BinaryOperator, LeadingComment, ObjectLiteralProperty, SourceMapRange, TemplateLiteral, UnaryOperator, VariableDeclarationType } from './api/ast_factory';
+import { AstFactory, BinaryOperator, LeadingComment, ObjectLiteralProperty, SourceMapRange, TemplateLiteral, UnaryOperator, VariableDeclarationType } from './api/ast_factory.js';
 /**
  * A TypeScript flavoured implementation of the AstFactory.
  */
diff --git a/src/ngtsc/translator/src/typescript_translator.d.ts b/src/ngtsc/translator/src/typescript_translator.d.ts
index 0cd17ed57d13a0f7012f658cc3382d8626760da8..97f6a61ccf3307175a3f557bccba2e23bf75f864 100755
--- a/src/ngtsc/translator/src/typescript_translator.d.ts
+++ b/src/ngtsc/translator/src/typescript_translator.d.ts
@@ -8,7 +8,7 @@
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/translator/src/typescript_translator" />
 import * as o from '@angular/compiler';
 import ts from 'typescript';
-import { ImportGenerator } from './api/import_generator';
-import { TranslatorOptions } from './translator';
+import { ImportGenerator } from './api/import_generator.js';
+import { TranslatorOptions } from './translator.js';
 export declare function translateExpression(expression: o.Expression, imports: ImportGenerator<ts.Expression>, options?: TranslatorOptions<ts.Expression>): ts.Expression;
 export declare function translateStatement(statement: o.Statement, imports: ImportGenerator<ts.Expression>, options?: TranslatorOptions<ts.Expression>): ts.Statement;
diff --git a/src/ngtsc/tsc_plugin.d.ts b/src/ngtsc/tsc_plugin.d.ts
index 45a8a4cdcbca186890536052d1b6854d834cb640..e1be644edb114df041af36515d1f86f9bc12c511 100755
--- a/src/ngtsc/tsc_plugin.d.ts
+++ b/src/ngtsc/tsc_plugin.d.ts
@@ -7,8 +7,8 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/tsc_plugin" />
 import ts from 'typescript';
-import { NgCompiler } from './core';
-import { UnifiedModulesHost } from './core/api';
+import { NgCompiler } from './core/index.js';
+import { UnifiedModulesHost } from './core/api/index.js';
 /**
  * A `ts.CompilerHost` which also returns a list of input files, out of which the `ts.Program`
  * should be created.
diff --git a/src/ngtsc/typecheck/api/api.d.ts b/src/ngtsc/typecheck/api/api.d.ts
index 16eace05a7573bf9019d7bb11bccc4751089286a..3ae556f6ab4995a4150b99260ea2d0e0d1d085c2 100755
--- a/src/ngtsc/typecheck/api/api.d.ts
+++ b/src/ngtsc/typecheck/api/api.d.ts
@@ -8,10 +8,10 @@
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/typecheck/api/api" />
 import { AbsoluteSourceSpan, BoundTarget, DirectiveMeta, ParseSourceSpan, SchemaMetadata } from '@angular/compiler';
 import ts from 'typescript';
-import { ErrorCode } from '../../diagnostics';
-import { Reference } from '../../imports';
-import { ClassPropertyMapping, DirectiveTypeCheckMeta } from '../../metadata';
-import { ClassDeclaration } from '../../reflection';
+import { ErrorCode } from '../../diagnostics/index.js';
+import { Reference } from '../../imports/index.js';
+import { ClassPropertyMapping, DirectiveTypeCheckMeta } from '../../metadata/index.js';
+import { ClassDeclaration } from '../../reflection/index.js';
 /**
  * Extension of `DirectiveMeta` that includes additional information required to type-check the
  * usage of a particular directive.
diff --git a/src/ngtsc/typecheck/api/checker.d.ts b/src/ngtsc/typecheck/api/checker.d.ts
index 875dd35c9f1bcdd9fac7d3d03c63c531e419ff43..ce20414cde646b384e58ed4e8ef26682ba788b3c 100755
--- a/src/ngtsc/typecheck/api/checker.d.ts
+++ b/src/ngtsc/typecheck/api/checker.d.ts
@@ -8,12 +8,12 @@
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/typecheck/api/checker" />
 import { AST, LiteralPrimitive, ParseSourceSpan, PropertyRead, SafePropertyRead, TmplAstElement, TmplAstNode, TmplAstTemplate, TmplAstTextAttribute } from '@angular/compiler';
 import ts from 'typescript';
-import { AbsoluteFsPath } from '../../../../src/ngtsc/file_system';
-import { ErrorCode } from '../../diagnostics';
-import { FullTemplateMapping, NgTemplateDiagnostic, TypeCheckableDirectiveMeta } from './api';
-import { GlobalCompletion } from './completion';
-import { DirectiveInScope, PipeInScope } from './scope';
-import { ElementSymbol, Symbol, TcbLocation, TemplateSymbol } from './symbols';
+import { AbsoluteFsPath } from '../../../../src/ngtsc/file_system/index.js';
+import { ErrorCode } from '../../diagnostics/index.js';
+import { FullTemplateMapping, NgTemplateDiagnostic, TypeCheckableDirectiveMeta } from './api.js';
+import { GlobalCompletion } from './completion.js';
+import { DirectiveInScope, PipeInScope } from './scope.js';
+import { ElementSymbol, Symbol, TcbLocation, TemplateSymbol } from './symbols.js';
 /**
  * Interface to the Angular Template Type Checker to extract diagnostics and intelligence from the
  * compiler's understanding of component templates.
diff --git a/src/ngtsc/typecheck/api/completion.d.ts b/src/ngtsc/typecheck/api/completion.d.ts
index 5e647e1f85d6788bc7eaef444cd89a26ffba452c..4ed67481acc417e3469fab7705c64a49a0f2ddec 100755
--- a/src/ngtsc/typecheck/api/completion.d.ts
+++ b/src/ngtsc/typecheck/api/completion.d.ts
@@ -7,7 +7,7 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/typecheck/api/completion" />
 import { TmplAstReference, TmplAstVariable } from '@angular/compiler';
-import { TcbLocation } from './symbols';
+import { TcbLocation } from './symbols.js';
 /**
  * An autocompletion source of any kind.
  */
diff --git a/src/ngtsc/typecheck/api/context.d.ts b/src/ngtsc/typecheck/api/context.d.ts
index 839eea491e064f64387825102cb78dc1580d23c5..b35f6d9c4275e73567425b88cfe9b9a53b4017be 100755
--- a/src/ngtsc/typecheck/api/context.d.ts
+++ b/src/ngtsc/typecheck/api/context.d.ts
@@ -8,9 +8,9 @@
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/typecheck/api/context" />
 import { ParseError, ParseSourceFile, R3TargetBinder, SchemaMetadata, TmplAstNode } from '@angular/compiler';
 import ts from 'typescript';
-import { Reference } from '../../imports';
-import { ClassDeclaration } from '../../reflection';
-import { TemplateSourceMapping, TypeCheckableDirectiveMeta } from './api';
+import { Reference } from '../../imports/index.js';
+import { ClassDeclaration } from '../../reflection/index.js';
+import { TemplateSourceMapping, TypeCheckableDirectiveMeta } from './api.js';
 /**
  * A currently pending type checking operation, into which templates for type-checking can be
  * registered.
diff --git a/src/ngtsc/typecheck/api/index.d.ts b/src/ngtsc/typecheck/api/index.d.ts
index b649c4d9673d7fd5bb64716e577c448a04551658..f706db38708cb0861e8fe91ac46f27e42b07dd89 100755
--- a/src/ngtsc/typecheck/api/index.d.ts
+++ b/src/ngtsc/typecheck/api/index.d.ts
@@ -6,9 +6,9 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/typecheck/api" />
-export * from './api';
-export * from './checker';
-export * from './completion';
-export * from './context';
-export * from './scope';
-export * from './symbols';
+export * from './api.js';
+export * from './checker.js';
+export * from './completion.js';
+export * from './context.js';
+export * from './scope.js';
+export * from './symbols.js';
diff --git a/src/ngtsc/typecheck/api/scope.d.ts b/src/ngtsc/typecheck/api/scope.d.ts
index f49a4b4dc0581e2b49f232df87aa16c4d5878e0a..1c25bd8a986b0efc02fb1ba215d2640a20c124df 100755
--- a/src/ngtsc/typecheck/api/scope.d.ts
+++ b/src/ngtsc/typecheck/api/scope.d.ts
@@ -7,8 +7,8 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/typecheck/api/scope" />
 import ts from 'typescript';
-import { ClassDeclaration } from '../../reflection';
-import { SymbolWithValueDeclaration } from '../../util/src/typescript';
+import { ClassDeclaration } from '../../reflection/index.js';
+import { SymbolWithValueDeclaration } from '../../util/src/typescript.js';
 /**
  * Metadata on a directive which is available in the scope of a template.
  */
diff --git a/src/ngtsc/typecheck/api/symbols.d.ts b/src/ngtsc/typecheck/api/symbols.d.ts
index fd040fda40b3994e533f51d8ccb26655327f3fb8..3cd078987efe0e61bf1b55ddaa67c38b3b9e0d57 100755
--- a/src/ngtsc/typecheck/api/symbols.d.ts
+++ b/src/ngtsc/typecheck/api/symbols.d.ts
@@ -8,9 +8,9 @@
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/typecheck/api/symbols" />
 import { TmplAstElement, TmplAstReference, TmplAstTemplate, TmplAstVariable } from '@angular/compiler';
 import ts from 'typescript';
-import { AbsoluteFsPath } from '../../file_system';
-import { SymbolWithValueDeclaration } from '../../util/src/typescript';
-import { DirectiveInScope } from './scope';
+import { AbsoluteFsPath } from '../../file_system/index.js';
+import { SymbolWithValueDeclaration } from '../../util/src/typescript.js';
+import { DirectiveInScope } from './scope.js';
 export declare enum SymbolKind {
     Input = 0,
     Output = 1,
diff --git a/src/ngtsc/typecheck/diagnostics/index.d.ts b/src/ngtsc/typecheck/diagnostics/index.d.ts
index 6a079cd9dcb3fd21d0e226685bb70d8ddbd87123..80bdd2de76ca8babd758e3374c3b1bc438f1ea3d 100755
--- a/src/ngtsc/typecheck/diagnostics/index.d.ts
+++ b/src/ngtsc/typecheck/diagnostics/index.d.ts
@@ -6,5 +6,5 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/typecheck/diagnostics" />
-export * from './src/diagnostic';
-export * from './src/id';
+export * from './src/diagnostic.js';
+export * from './src/id.js';
diff --git a/src/ngtsc/typecheck/diagnostics/src/diagnostic.d.ts b/src/ngtsc/typecheck/diagnostics/src/diagnostic.d.ts
index c21f8c7c3dfb5a324f7d67f9cf6c551d7538c42e..dad9ef1181ef6ac1852582743435314367d66026 100755
--- a/src/ngtsc/typecheck/diagnostics/src/diagnostic.d.ts
+++ b/src/ngtsc/typecheck/diagnostics/src/diagnostic.d.ts
@@ -8,7 +8,7 @@
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/typecheck/diagnostics/src/diagnostic" />
 import { ParseSourceSpan } from '@angular/compiler';
 import ts from 'typescript';
-import { TemplateDiagnostic, TemplateId, TemplateSourceMapping } from '../../api';
+import { TemplateDiagnostic, TemplateId, TemplateSourceMapping } from '../../api.js';
 /**
  * Constructs a `ts.Diagnostic` for a given `ParseSourceSpan` within a template.
  */
diff --git a/src/ngtsc/typecheck/diagnostics/src/id.d.ts b/src/ngtsc/typecheck/diagnostics/src/id.d.ts
index 6585376994f6ac35120f814dee2ed4b4c314f2f2..bf7bc33538a2ebe7a1016f353af16dc418f94a41 100755
--- a/src/ngtsc/typecheck/diagnostics/src/id.d.ts
+++ b/src/ngtsc/typecheck/diagnostics/src/id.d.ts
@@ -6,6 +6,6 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/typecheck/diagnostics/src/id" />
-import { DeclarationNode } from '../../../reflection';
-import { TemplateId } from '../../api';
+import { DeclarationNode } from '../../../reflection/index.js';
+import { TemplateId } from '../../api.js';
 export declare function getTemplateId(clazz: DeclarationNode): TemplateId;
diff --git a/src/ngtsc/typecheck/extended/api/api.d.ts b/src/ngtsc/typecheck/extended/api/api.d.ts
index 7b5606448cef9cf1f055ef7f4576553733cd003d..70b16d7a968eb3cf5502ed9abd4757b4d80b6ca7 100755
--- a/src/ngtsc/typecheck/extended/api/api.d.ts
+++ b/src/ngtsc/typecheck/extended/api/api.d.ts
@@ -8,9 +8,9 @@
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/typecheck/extended/api/api" />
 import { AST, ParseSourceSpan, TmplAstNode } from '@angular/compiler';
 import ts from 'typescript';
-import { NgCompilerOptions } from '../../../core/api';
-import { ErrorCode, ExtendedTemplateDiagnosticName } from '../../../diagnostics';
-import { NgTemplateDiagnostic, TemplateTypeChecker } from '../../api';
+import { NgCompilerOptions } from '../../../core/api/index.js';
+import { ErrorCode, ExtendedTemplateDiagnosticName } from '../../../diagnostics/index.js';
+import { NgTemplateDiagnostic, TemplateTypeChecker } from '../../api.js';
 /**
  * A Template Check receives information about the template it's checking and returns
  * information about the diagnostics to be generated.
diff --git a/src/ngtsc/typecheck/extended/api/extended_template_checker.d.ts b/src/ngtsc/typecheck/extended/api/extended_template_checker.d.ts
index 2a473bde075aef7ec0db422c774214c1edfae300..fb511e8171aea515e92258a147c44d8368fb00b2 100755
--- a/src/ngtsc/typecheck/extended/api/extended_template_checker.d.ts
+++ b/src/ngtsc/typecheck/extended/api/extended_template_checker.d.ts
@@ -7,7 +7,7 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/typecheck/extended/api/extended_template_checker" />
 import ts from 'typescript';
-import { TemplateDiagnostic } from '../../api';
+import { TemplateDiagnostic } from '../../api.js';
 /**
  * Interface to generate extended template diangostics from the component tempaltes.
  */
diff --git a/src/ngtsc/typecheck/extended/api/index.d.ts b/src/ngtsc/typecheck/extended/api/index.d.ts
index 9cb793936af6704f076a1c779cd81d8eef5fa361..a879fd0dada618f30fc77d141f3773faf6db64b9 100755
--- a/src/ngtsc/typecheck/extended/api/index.d.ts
+++ b/src/ngtsc/typecheck/extended/api/index.d.ts
@@ -6,5 +6,5 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/typecheck/extended/api" />
-export * from './api';
-export * from './extended_template_checker';
+export * from './api.js';
+export * from './extended_template_checker.js';
diff --git a/src/ngtsc/typecheck/extended/checks/invalid_banana_in_box/index.d.ts b/src/ngtsc/typecheck/extended/checks/invalid_banana_in_box/index.d.ts
index be96d8fb1bd0780dffb4ec84d0e53d50315d52cb..b41d32766238239a6eed62e226ac9497c62fb5a5 100755
--- a/src/ngtsc/typecheck/extended/checks/invalid_banana_in_box/index.d.ts
+++ b/src/ngtsc/typecheck/extended/checks/invalid_banana_in_box/index.d.ts
@@ -6,6 +6,6 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/typecheck/extended/checks/invalid_banana_in_box" />
-import { ErrorCode, ExtendedTemplateDiagnosticName } from '../../../../diagnostics';
-import { TemplateCheckFactory } from '../../api';
+import { ErrorCode, ExtendedTemplateDiagnosticName } from '../../../../diagnostics/index.js';
+import { TemplateCheckFactory } from '../../api.js';
 export declare const factory: TemplateCheckFactory<ErrorCode.INVALID_BANANA_IN_BOX, ExtendedTemplateDiagnosticName.INVALID_BANANA_IN_BOX>;
diff --git a/src/ngtsc/typecheck/extended/checks/nullish_coalescing_not_nullable/index.d.ts b/src/ngtsc/typecheck/extended/checks/nullish_coalescing_not_nullable/index.d.ts
index d32322e58434d0654a5633cc9c112130c8c0a556..3454c40bcbc610bb0b442005af23414eb61093c8 100755
--- a/src/ngtsc/typecheck/extended/checks/nullish_coalescing_not_nullable/index.d.ts
+++ b/src/ngtsc/typecheck/extended/checks/nullish_coalescing_not_nullable/index.d.ts
@@ -6,6 +6,6 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/typecheck/extended/checks/nullish_coalescing_not_nullable" />
-import { ErrorCode, ExtendedTemplateDiagnosticName } from '../../../../diagnostics';
-import { TemplateCheckFactory } from '../../api';
+import { ErrorCode, ExtendedTemplateDiagnosticName } from '../../../../diagnostics/index.js';
+import { TemplateCheckFactory } from '../../api.js';
 export declare const factory: TemplateCheckFactory<ErrorCode.NULLISH_COALESCING_NOT_NULLABLE, ExtendedTemplateDiagnosticName.NULLISH_COALESCING_NOT_NULLABLE>;
diff --git a/src/ngtsc/typecheck/extended/index.d.ts b/src/ngtsc/typecheck/extended/index.d.ts
index 0ef21f965297ac2812ce26c4ae00f8a7a42d4a0b..aa730710740f7063075581cb92b55d48396551bd 100755
--- a/src/ngtsc/typecheck/extended/index.d.ts
+++ b/src/ngtsc/typecheck/extended/index.d.ts
@@ -6,7 +6,7 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/typecheck/extended" />
-import { ErrorCode, ExtendedTemplateDiagnosticName } from '../../diagnostics';
-import { TemplateCheckFactory } from './api';
-export { ExtendedTemplateCheckerImpl } from './src/extended_template_checker';
+import { ErrorCode, ExtendedTemplateDiagnosticName } from '../../diagnostics/index.js';
+import { TemplateCheckFactory } from './api/index.js';
+export { ExtendedTemplateCheckerImpl } from './src/extended_template_checker.js';
 export declare const ALL_DIAGNOSTIC_FACTORIES: readonly TemplateCheckFactory<ErrorCode, ExtendedTemplateDiagnosticName>[];
diff --git a/src/ngtsc/typecheck/extended/src/extended_template_checker.d.ts b/src/ngtsc/typecheck/extended/src/extended_template_checker.d.ts
index f0dde12628abd36b59ef20c2e935ea19a7b5e46b..bb2abea736a790570355cde9d25023aecfc30589 100755
--- a/src/ngtsc/typecheck/extended/src/extended_template_checker.d.ts
+++ b/src/ngtsc/typecheck/extended/src/extended_template_checker.d.ts
@@ -7,10 +7,10 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/typecheck/extended/src/extended_template_checker" />
 import ts from 'typescript';
-import { NgCompilerOptions } from '../../../core/api';
-import { ErrorCode, ExtendedTemplateDiagnosticName } from '../../../diagnostics';
-import { TemplateDiagnostic, TemplateTypeChecker } from '../../api';
-import { ExtendedTemplateChecker, TemplateCheckFactory } from '../api';
+import { NgCompilerOptions } from '../../../core/api/index.js';
+import { ErrorCode, ExtendedTemplateDiagnosticName } from '../../../diagnostics/index.js';
+import { TemplateDiagnostic, TemplateTypeChecker } from '../../api.js';
+import { ExtendedTemplateChecker, TemplateCheckFactory } from '../api.js';
 export declare class ExtendedTemplateCheckerImpl implements ExtendedTemplateChecker {
     private readonly partialCtx;
     private readonly templateChecks;
diff --git a/src/ngtsc/typecheck/index.d.ts b/src/ngtsc/typecheck/index.d.ts
index 999fa111bd77f3589198d1c86f814c52fba07686..3bbc1e02e6d83a57fc6b236d374c57a516381c51 100755
--- a/src/ngtsc/typecheck/index.d.ts
+++ b/src/ngtsc/typecheck/index.d.ts
@@ -6,7 +6,7 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/typecheck" />
-export { FileTypeCheckingData, TemplateTypeCheckerImpl } from './src/checker';
-export { TypeCheckContextImpl } from './src/context';
-export { TypeCheckShimGenerator } from './src/shim';
-export { typeCheckFilePath } from './src/type_check_file';
+export { FileTypeCheckingData, TemplateTypeCheckerImpl } from './src/checker.js';
+export { TypeCheckContextImpl } from './src/context.js';
+export { TypeCheckShimGenerator } from './src/shim.js';
+export { typeCheckFilePath } from './src/type_check_file.js';
diff --git a/src/ngtsc/typecheck/src/checker.d.ts b/src/ngtsc/typecheck/src/checker.d.ts
index e86870e2087b4963ca850e06f23a17a1f9b69537..23d3edcf0ee52e52174789d09af025d0e39b9c1c 100755
--- a/src/ngtsc/typecheck/src/checker.d.ts
+++ b/src/ngtsc/typecheck/src/checker.d.ts
@@ -8,17 +8,17 @@
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/typecheck/src/checker" />
 import { AST, LiteralPrimitive, ParseSourceSpan, PropertyRead, SafePropertyRead, TmplAstElement, TmplAstNode, TmplAstTemplate, TmplAstTextAttribute } from '@angular/compiler';
 import ts from 'typescript';
-import { ErrorCode } from '../../diagnostics';
-import { AbsoluteFsPath } from '../../file_system';
-import { ReferenceEmitter } from '../../imports';
-import { IncrementalBuild } from '../../incremental/api';
-import { PerfRecorder } from '../../perf';
-import { ProgramDriver } from '../../program_driver';
-import { ReflectionHost } from '../../reflection';
-import { ComponentScopeReader, TypeCheckScopeRegistry } from '../../scope';
-import { DirectiveInScope, ElementSymbol, FullTemplateMapping, GlobalCompletion, NgTemplateDiagnostic, OptimizeFor, PipeInScope, ProgramTypeCheckAdapter, TcbLocation, TemplateSymbol, TemplateTypeChecker, TypeCheckableDirectiveMeta, TypeCheckingConfig } from '../api';
-import { ShimTypeCheckingData } from './context';
-import { TemplateSourceManager } from './source';
+import { ErrorCode } from '../../diagnostics/index.js';
+import { AbsoluteFsPath } from '../../file_system/index.js';
+import { ReferenceEmitter } from '../../imports/index.js';
+import { IncrementalBuild } from '../../incremental/api.js';
+import { PerfRecorder } from '../../perf/index.js';
+import { ProgramDriver } from '../../program_driver/index.js';
+import { ReflectionHost } from '../../reflection/index.js';
+import { ComponentScopeReader, TypeCheckScopeRegistry } from '../../scope/index.js';
+import { DirectiveInScope, ElementSymbol, FullTemplateMapping, GlobalCompletion, NgTemplateDiagnostic, OptimizeFor, PipeInScope, ProgramTypeCheckAdapter, TcbLocation, TemplateSymbol, TemplateTypeChecker, TypeCheckableDirectiveMeta, TypeCheckingConfig } from '../api/index.js';
+import { ShimTypeCheckingData } from './context.js';
+import { TemplateSourceManager } from './source.js';
 /**
  * Primary template type-checking engine, which performs type-checking using a
  * `TypeCheckingProgramStrategy` for type-checking program maintenance, and the
diff --git a/src/ngtsc/typecheck/src/completion.d.ts b/src/ngtsc/typecheck/src/completion.d.ts
index c61e7741fd940bd18264b1c434cdaf0e42c193b1..1c104a9a31fbd7953f03ed7cc1e1751791c0fae9 100755
--- a/src/ngtsc/typecheck/src/completion.d.ts
+++ b/src/ngtsc/typecheck/src/completion.d.ts
@@ -8,9 +8,9 @@
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/typecheck/src/completion" />
 import { AST, LiteralPrimitive, PropertyRead, PropertyWrite, SafePropertyRead, TmplAstNode, TmplAstTemplate, TmplAstTextAttribute } from '@angular/compiler';
 import ts from 'typescript';
-import { AbsoluteFsPath } from '../../file_system';
-import { GlobalCompletion, TcbLocation } from '../api';
-import { TemplateData } from './context';
+import { AbsoluteFsPath } from '../../file_system/index.js';
+import { GlobalCompletion, TcbLocation } from '../api.js';
+import { TemplateData } from './context.js';
 /**
  * Powers autocompletion for a specific component.
  *
diff --git a/src/ngtsc/typecheck/src/context.d.ts b/src/ngtsc/typecheck/src/context.d.ts
index cc140ab8e601e6f98b7a260387303e476d23cb60..134c78222cd1ad14e6ef202eafbd1033c38cdc6a 100755
--- a/src/ngtsc/typecheck/src/context.d.ts
+++ b/src/ngtsc/typecheck/src/context.d.ts
@@ -8,16 +8,16 @@
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/typecheck/src/context" />
 import { BoundTarget, ParseError, ParseSourceFile, R3TargetBinder, SchemaMetadata, TmplAstNode } from '@angular/compiler';
 import ts from 'typescript';
-import { AbsoluteFsPath } from '../../file_system';
-import { Reference, ReferenceEmitter } from '../../imports';
-import { PerfRecorder } from '../../perf';
-import { FileUpdate } from '../../program_driver';
-import { ClassDeclaration, ReflectionHost } from '../../reflection';
-import { TemplateDiagnostic, TemplateId, TemplateSourceMapping, TypeCheckableDirectiveMeta, TypeCheckContext, TypeCheckingConfig, TypeCtorMetadata } from '../api';
-import { DomSchemaChecker } from './dom';
-import { OutOfBandDiagnosticRecorder } from './oob';
-import { TemplateSourceManager } from './source';
-import { TypeCheckFile } from './type_check_file';
+import { AbsoluteFsPath } from '../../file_system/index.js';
+import { Reference, ReferenceEmitter } from '../../imports/index.js';
+import { PerfRecorder } from '../../perf/index.js';
+import { FileUpdate } from '../../program_driver/index.js';
+import { ClassDeclaration, ReflectionHost } from '../../reflection/index.js';
+import { TemplateDiagnostic, TemplateId, TemplateSourceMapping, TypeCheckableDirectiveMeta, TypeCheckContext, TypeCheckingConfig, TypeCtorMetadata } from '../api.js';
+import { DomSchemaChecker } from './dom.js';
+import { OutOfBandDiagnosticRecorder } from './oob.js';
+import { TemplateSourceManager } from './source.js';
+import { TypeCheckFile } from './type_check_file.js';
 export interface ShimTypeCheckingData {
     /**
      * Path to the shim file.
diff --git a/src/ngtsc/typecheck/src/diagnostics.d.ts b/src/ngtsc/typecheck/src/diagnostics.d.ts
index dcd583028ce97cd54b1d43335206717d5c085935..cd624537c4fbfeef0f36e48d493da825ffe0b2aa 100755
--- a/src/ngtsc/typecheck/src/diagnostics.d.ts
+++ b/src/ngtsc/typecheck/src/diagnostics.d.ts
@@ -8,8 +8,8 @@
  */
 import { AbsoluteSourceSpan, ParseSourceSpan } from '@angular/compiler';
 import ts from 'typescript';
-import { TemplateDiagnostic, TemplateId } from '../api';
-import { TemplateSourceResolver } from './tcb_util';
+import { TemplateDiagnostic, TemplateId } from '../api.js';
+import { TemplateSourceResolver } from './tcb_util.js';
 /**
  * Wraps the node in parenthesis such that inserted span comments become attached to the proper
  * node. This is an alias for `ts.factory.createParenthesizedExpression` with the benefit that it
diff --git a/src/ngtsc/typecheck/src/dom.d.ts b/src/ngtsc/typecheck/src/dom.d.ts
index ebae0de32e976a9dee268b7dc594b217d7fbe9bf..08af5403e1e55fe6315c29fa216b959a7f317278 100755
--- a/src/ngtsc/typecheck/src/dom.d.ts
+++ b/src/ngtsc/typecheck/src/dom.d.ts
@@ -7,8 +7,8 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/typecheck/src/dom" />
 import { ParseSourceSpan, SchemaMetadata, TmplAstElement } from '@angular/compiler';
-import { TemplateDiagnostic, TemplateId } from '../api';
-import { TemplateSourceResolver } from './tcb_util';
+import { TemplateDiagnostic, TemplateId } from '../api.js';
+import { TemplateSourceResolver } from './tcb_util.js';
 /**
  * Checks every non-Angular element/property processed in a template and potentially produces
  * `ts.Diagnostic`s related to improper usage.
diff --git a/src/ngtsc/typecheck/src/environment.d.ts b/src/ngtsc/typecheck/src/environment.d.ts
index a8af5aa3ccc2d84afe3d33a9d787bb2c194e2c0c..8929176076982735110e4712312cbbbfe48ca51a 100755
--- a/src/ngtsc/typecheck/src/environment.d.ts
+++ b/src/ngtsc/typecheck/src/environment.d.ts
@@ -8,11 +8,11 @@
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/typecheck/src/environment" />
 import { Type } from '@angular/compiler';
 import ts from 'typescript';
-import { Reference, ReferenceEmitter } from '../../imports';
-import { ClassDeclaration, ReflectionHost } from '../../reflection';
-import { ImportManager } from '../../translator';
-import { TypeCheckableDirectiveMeta, TypeCheckingConfig } from '../api';
-import { ReferenceEmitEnvironment } from './tcb_util';
+import { Reference, ReferenceEmitter } from '../../imports/index.js';
+import { ClassDeclaration, ReflectionHost } from '../../reflection/index.js';
+import { ImportManager } from '../../translator/index.js';
+import { TypeCheckableDirectiveMeta, TypeCheckingConfig } from '../api/index.js';
+import { ReferenceEmitEnvironment } from './tcb_util.js';
 /**
  * A context which hosts one or more Type Check Blocks (TCBs).
  *
diff --git a/src/ngtsc/typecheck/src/expression.d.ts b/src/ngtsc/typecheck/src/expression.d.ts
index d28ebb63f9e3f5d56ef63d2691333880e410a791..2ae56ccde2a171f81b52d1bc82de3d0a029c517b 100755
--- a/src/ngtsc/typecheck/src/expression.d.ts
+++ b/src/ngtsc/typecheck/src/expression.d.ts
@@ -8,7 +8,7 @@
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/typecheck/src/expression" />
 import { AST } from '@angular/compiler';
 import ts from 'typescript';
-import { TypeCheckingConfig } from '../api';
+import { TypeCheckingConfig } from '../api.js';
 export declare const NULL_AS_ANY: ts.AsExpression;
 /**
  * Convert an `AST` to TypeScript code directly, without going through an intermediate `Expression`
diff --git a/src/ngtsc/typecheck/src/oob.d.ts b/src/ngtsc/typecheck/src/oob.d.ts
index f84c432a8144b48acb2a884f3f637d54b857ecf7..00b534861197406264052011b24353973bce214e 100755
--- a/src/ngtsc/typecheck/src/oob.d.ts
+++ b/src/ngtsc/typecheck/src/oob.d.ts
@@ -7,9 +7,9 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/typecheck/src/oob" />
 import { BindingPipe, PropertyWrite, TmplAstBoundAttribute, TmplAstBoundEvent, TmplAstElement, TmplAstReference, TmplAstVariable } from '@angular/compiler';
-import { ClassDeclaration } from '../../reflection';
-import { TemplateDiagnostic, TemplateId } from '../api';
-import { TemplateSourceResolver } from './tcb_util';
+import { ClassDeclaration } from '../../reflection/index.js';
+import { TemplateDiagnostic, TemplateId } from '../api.js';
+import { TemplateSourceResolver } from './tcb_util.js';
 /**
  * Collects `ts.Diagnostic`s on problems which occur in the template which aren't directly sourced
  * from Type Check Blocks.
diff --git a/src/ngtsc/typecheck/src/shim.d.ts b/src/ngtsc/typecheck/src/shim.d.ts
index c26c387e590a3c4f9dc2c0b403583d7089d4f04b..29b842ceb5f9e08b19c4d07d4286509351d3088f 100755
--- a/src/ngtsc/typecheck/src/shim.d.ts
+++ b/src/ngtsc/typecheck/src/shim.d.ts
@@ -7,8 +7,8 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/typecheck/src/shim" />
 import ts from 'typescript';
-import { AbsoluteFsPath } from '../../file_system';
-import { PerFileShimGenerator } from '../../shims/api';
+import { AbsoluteFsPath } from '../../file_system/index.js';
+import { PerFileShimGenerator } from '../../shims/api.js';
 /**
  * A `ShimGenerator` which adds type-checking files to the `ts.Program`.
  *
diff --git a/src/ngtsc/typecheck/src/source.d.ts b/src/ngtsc/typecheck/src/source.d.ts
index 14fff3199ad1f8cb8bbbf7199b5aea6691c76bab..a380478b250452f86954df4381ef9528c0e59332 100755
--- a/src/ngtsc/typecheck/src/source.d.ts
+++ b/src/ngtsc/typecheck/src/source.d.ts
@@ -8,8 +8,8 @@
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/typecheck/src/source" />
 import { AbsoluteSourceSpan, ParseSourceFile, ParseSourceSpan } from '@angular/compiler';
 import ts from 'typescript';
-import { TemplateId, TemplateSourceMapping } from '../api';
-import { TemplateSourceResolver } from './tcb_util';
+import { TemplateId, TemplateSourceMapping } from '../api.js';
+import { TemplateSourceResolver } from './tcb_util.js';
 /**
  * Represents the source of a template that was processed during type-checking. This information is
  * used when translating parse offsets in diagnostics back to their original line/column location.
diff --git a/src/ngtsc/typecheck/src/tcb_util.d.ts b/src/ngtsc/typecheck/src/tcb_util.d.ts
index 5a9f214071232dcf5c7e87b7d836d3ac29a2521e..c6fcb599bf2498efa6cb9a33ae9b367a91a7738e 100755
--- a/src/ngtsc/typecheck/src/tcb_util.d.ts
+++ b/src/ngtsc/typecheck/src/tcb_util.d.ts
@@ -8,9 +8,9 @@
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/typecheck/src/tcb_util" />
 import { AbsoluteSourceSpan, ParseSourceSpan } from '@angular/compiler';
 import ts from 'typescript';
-import { ClassDeclaration, ReflectionHost } from '../../../../src/ngtsc/reflection';
-import { Reference } from '../../imports';
-import { FullTemplateMapping, SourceLocation, TemplateId, TemplateSourceMapping } from '../api';
+import { ClassDeclaration, ReflectionHost } from '../../../../src/ngtsc/reflection/index.js';
+import { Reference } from '../../imports/index.js';
+import { FullTemplateMapping, SourceLocation, TemplateId, TemplateSourceMapping } from '../api.js';
 /**
  * Represents the origin environment from where reference will be emitted. This interface exists
  * as an indirection for the `Environment` type, which would otherwise introduce a (type-only)
diff --git a/src/ngtsc/typecheck/src/template_semantics.d.ts b/src/ngtsc/typecheck/src/template_semantics.d.ts
index deb662c3436327b8e8db7e27efe25a82dca1bc60..55e105b39cace9c54509457764fcd85adb33ee7c 100755
--- a/src/ngtsc/typecheck/src/template_semantics.d.ts
+++ b/src/ngtsc/typecheck/src/template_semantics.d.ts
@@ -7,8 +7,8 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/typecheck/src/template_semantics" />
 import { AST, BoundTarget, PropertyWrite, RecursiveAstVisitor } from '@angular/compiler';
-import { TemplateId } from '../api';
-import { OutOfBandDiagnosticRecorder } from './oob';
+import { TemplateId } from '../api/index.js';
+import { OutOfBandDiagnosticRecorder } from './oob.js';
 /**
  * Visits a template and records any semantic errors within its expressions.
  */
diff --git a/src/ngtsc/typecheck/src/template_symbol_builder.d.ts b/src/ngtsc/typecheck/src/template_symbol_builder.d.ts
index 1770ff62f469ec402b6f2cc2c3615a0ea3815e78..b8fbea9cdbbeee8e532379a2e3aa1e131398440e 100755
--- a/src/ngtsc/typecheck/src/template_symbol_builder.d.ts
+++ b/src/ngtsc/typecheck/src/template_symbol_builder.d.ts
@@ -8,10 +8,10 @@
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/typecheck/src/template_symbol_builder" />
 import { AST, TmplAstElement, TmplAstNode, TmplAstReference, TmplAstTemplate, TmplAstVariable } from '@angular/compiler';
 import ts from 'typescript';
-import { AbsoluteFsPath } from '../../file_system';
-import { ComponentScopeReader } from '../../scope';
-import { ElementSymbol, ReferenceSymbol, Symbol, TemplateSymbol, VariableSymbol } from '../api';
-import { TemplateData } from './context';
+import { AbsoluteFsPath } from '../../file_system/index.js';
+import { ComponentScopeReader } from '../../scope/index.js';
+import { ElementSymbol, ReferenceSymbol, Symbol, TemplateSymbol, VariableSymbol } from '../api/index.js';
+import { TemplateData } from './context.js';
 /**
  * Generates and caches `Symbol`s for various template structures for a given component.
  *
diff --git a/src/ngtsc/typecheck/src/ts_util.d.ts b/src/ngtsc/typecheck/src/ts_util.d.ts
index 6943171ad430389db859d9521d22d18d861f2834..7364bf933a3c38b5360489d72053de5f85d6b825 100755
--- a/src/ngtsc/typecheck/src/ts_util.d.ts
+++ b/src/ngtsc/typecheck/src/ts_util.d.ts
@@ -7,7 +7,7 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/typecheck/src/ts_util" />
 import ts from 'typescript';
-import { ClassDeclaration } from '../../reflection';
+import { ClassDeclaration } from '../../reflection/index.js';
 export declare function tsCastToAny(expr: ts.Expression): ts.Expression;
 /**
  * Create an expression which instantiates an element by its HTML tagName.
diff --git a/src/ngtsc/typecheck/src/type_check_block.d.ts b/src/ngtsc/typecheck/src/type_check_block.d.ts
index 6a8898957ca646b4f374fb4d304509935f058551..55b4da3542abe2237c9e7ca766df00d5eeb83978 100755
--- a/src/ngtsc/typecheck/src/type_check_block.d.ts
+++ b/src/ngtsc/typecheck/src/type_check_block.d.ts
@@ -8,12 +8,12 @@
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/typecheck/src/type_check_block" />
 import { BoundTarget, SchemaMetadata, TmplAstElement, TmplAstNode, TmplAstReference, TmplAstTemplate, TmplAstVariable } from '@angular/compiler';
 import ts from 'typescript';
-import { Reference } from '../../imports';
-import { ClassDeclaration } from '../../reflection';
-import { TemplateId, TypeCheckableDirectiveMeta, TypeCheckBlockMetadata } from '../api';
-import { DomSchemaChecker } from './dom';
-import { Environment } from './environment';
-import { OutOfBandDiagnosticRecorder } from './oob';
+import { Reference } from '../../imports/index.js';
+import { ClassDeclaration } from '../../reflection/index.js';
+import { TemplateId, TypeCheckableDirectiveMeta, TypeCheckBlockMetadata } from '../api/index.js';
+import { DomSchemaChecker } from './dom.js';
+import { Environment } from './environment.js';
+import { OutOfBandDiagnosticRecorder } from './oob.js';
 /**
  * Controls how generics for the component context class will be handled during TCB generation.
  */
diff --git a/src/ngtsc/typecheck/src/type_check_file.d.ts b/src/ngtsc/typecheck/src/type_check_file.d.ts
index 664c9cdb208e5abfba40f64913451d4995f97527..48ac00b66c557560858181b9f3957c304b0c2f3b 100755
--- a/src/ngtsc/typecheck/src/type_check_file.d.ts
+++ b/src/ngtsc/typecheck/src/type_check_file.d.ts
@@ -7,14 +7,14 @@
  * found in the LICENSE file at https://angular.io/license
  */
 import ts from 'typescript';
-import { AbsoluteFsPath } from '../../file_system';
-import { Reference, ReferenceEmitter } from '../../imports';
-import { ClassDeclaration, ReflectionHost } from '../../reflection';
-import { TypeCheckBlockMetadata, TypeCheckingConfig } from '../api';
-import { DomSchemaChecker } from './dom';
-import { Environment } from './environment';
-import { OutOfBandDiagnosticRecorder } from './oob';
-import { TcbGenericContextBehavior } from './type_check_block';
+import { AbsoluteFsPath } from '../../file_system/index.js';
+import { Reference, ReferenceEmitter } from '../../imports/index.js';
+import { ClassDeclaration, ReflectionHost } from '../../reflection/index.js';
+import { TypeCheckBlockMetadata, TypeCheckingConfig } from '../api.js';
+import { DomSchemaChecker } from './dom.js';
+import { Environment } from './environment.js';
+import { OutOfBandDiagnosticRecorder } from './oob.js';
+import { TcbGenericContextBehavior } from './type_check_block.js';
 /**
  * An `Environment` representing the single type-checking file into which most (if not all) Type
  * Check Blocks (TCBs) will be generated.
diff --git a/src/ngtsc/typecheck/src/type_constructor.d.ts b/src/ngtsc/typecheck/src/type_constructor.d.ts
index 08b572bcfc85e7e2ab2212f5d0fa9d97ebe7df91..c39efeb5448305bd9402eb17c9a467a0856a2798 100755
--- a/src/ngtsc/typecheck/src/type_constructor.d.ts
+++ b/src/ngtsc/typecheck/src/type_constructor.d.ts
@@ -7,9 +7,9 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/typecheck/src/type_constructor" />
 import ts from 'typescript';
-import { ClassDeclaration, ReflectionHost } from '../../reflection';
-import { TypeCtorMetadata } from '../api';
-import { ReferenceEmitEnvironment } from './tcb_util';
+import { ClassDeclaration, ReflectionHost } from '../../reflection/index.js';
+import { TypeCtorMetadata } from '../api.js';
+import { ReferenceEmitEnvironment } from './tcb_util.js';
 export declare function generateTypeCtorDeclarationFn(node: ClassDeclaration<ts.ClassDeclaration>, meta: TypeCtorMetadata, nodeTypeRef: ts.EntityName, typeParams: ts.TypeParameterDeclaration[] | undefined): ts.Statement;
 /**
  * Generate an inline type constructor for the given class and metadata.
diff --git a/src/ngtsc/typecheck/src/type_parameter_emitter.d.ts b/src/ngtsc/typecheck/src/type_parameter_emitter.d.ts
index 9f195d4ffa522b609979555ec23ed92b339bad91..e9fc9d0375cdb0d6435dafd3f51df60af806777c 100755
--- a/src/ngtsc/typecheck/src/type_parameter_emitter.d.ts
+++ b/src/ngtsc/typecheck/src/type_parameter_emitter.d.ts
@@ -7,8 +7,8 @@
  * found in the LICENSE file at https://angular.io/license
  */
 import ts from 'typescript';
-import { Reference } from '../../imports';
-import { ReflectionHost } from '../../reflection';
+import { Reference } from '../../imports/index.js';
+import { ReflectionHost } from '../../reflection/index.js';
 /**
  * See `TypeEmitter` for more information on the emitting process.
  */
diff --git a/src/ngtsc/util/src/typescript.d.ts b/src/ngtsc/util/src/typescript.d.ts
index d80425bffad746aa994bd24ed11b24d2eceab736..fdb3d10fdf43ec55532a4238a8d4b1b74f6292eb 100755
--- a/src/ngtsc/util/src/typescript.d.ts
+++ b/src/ngtsc/util/src/typescript.d.ts
@@ -7,8 +7,8 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/util/src/typescript" />
 import ts from 'typescript';
-import { AbsoluteFsPath } from '../../file_system';
-import { DeclarationNode } from '../../reflection';
+import { AbsoluteFsPath } from '../../file_system/index.js';
+import { DeclarationNode } from '../../reflection/index.js';
 /**
  * Type describing a symbol that is guaranteed to have a value declaration.
  */
diff --git a/src/ngtsc/xi18n/index.d.ts b/src/ngtsc/xi18n/index.d.ts
index ff81dcc3b6d3fc103cf60b5aa6358ea4dcab3cac..0abfcf4b2ee037a5b43795120403e7e42b4d78a6 100755
--- a/src/ngtsc/xi18n/index.d.ts
+++ b/src/ngtsc/xi18n/index.d.ts
@@ -6,4 +6,4 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/src/ngtsc/xi18n" />
-export * from './src/context';
+export * from './src/context.js';
diff --git a/src/perform_compile.d.ts b/src/perform_compile.d.ts
index ae1b75ee0b11b0a1014452edafca39db35dfe527..9290d509e88f460b89f5af466329277fc4c7ca69 100755
--- a/src/perform_compile.d.ts
+++ b/src/perform_compile.d.ts
@@ -7,8 +7,8 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/perform_compile" />
 import ts from 'typescript';
-import { AbsoluteFsPath, ReadonlyFileSystem } from '../src/ngtsc/file_system';
-import * as api from './transformers/api';
+import { AbsoluteFsPath, ReadonlyFileSystem } from '../src/ngtsc/file_system/index.js';
+import * as api from './transformers/api.js';
 export declare function formatDiagnostics(diags: ReadonlyArray<ts.Diagnostic>, host?: ts.FormatDiagnosticsHost): string;
 /** Used to read configuration files. */
 export declare type ConfigurationHost = Pick<ReadonlyFileSystem, 'readFile' | 'exists' | 'lstat' | 'resolve' | 'join' | 'dirname' | 'extname' | 'pwd'>;
diff --git a/src/perform_watch.d.ts b/src/perform_watch.d.ts
index 5062c5f5cedfed6abc24ac72ac9ac0ffb4e45c83..da4a31816f9fdefb49b8123f192f22ee098ed706 100755
--- a/src/perform_watch.d.ts
+++ b/src/perform_watch.d.ts
@@ -7,8 +7,8 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/perform_watch" />
 import ts from 'typescript';
-import { ParsedConfiguration } from './perform_compile';
-import * as api from './transformers/api';
+import { ParsedConfiguration } from './perform_compile.js';
+import * as api from './transformers/api.js';
 export declare enum FileChangeEvent {
     Change = 0,
     CreateDelete = 1,
diff --git a/src/transformers/api.d.ts b/src/transformers/api.d.ts
index e5ce30328157fdd724ab0174f23088b375afcf18..66fd033513ba3098f118f6a7bb48f4da8f6ce5a9 100755
--- a/src/transformers/api.d.ts
+++ b/src/transformers/api.d.ts
@@ -7,7 +7,7 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/transformers/api" />
 import ts from 'typescript';
-import { ExtendedTsCompilerHost, NgCompilerOptions } from '../ngtsc/core/api';
+import { ExtendedTsCompilerHost, NgCompilerOptions } from '../ngtsc/core/api/index.js';
 export declare const DEFAULT_ERROR_CODE = 100;
 export declare const UNKNOWN_ERROR_CODE = 500;
 export declare const SOURCE: "angular";
diff --git a/src/transformers/compiler_host.d.ts b/src/transformers/compiler_host.d.ts
index 9dcc597bea0f19c2260d4ee67224897d65e22830..bf7d4c74e853563db46f2afb17bc74f9611842a8 100755
--- a/src/transformers/compiler_host.d.ts
+++ b/src/transformers/compiler_host.d.ts
@@ -7,7 +7,7 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/transformers/compiler_host" />
 import ts from 'typescript';
-import { CompilerHost, CompilerOptions } from './api';
+import { CompilerHost, CompilerOptions } from './api.js';
 export declare function setWrapHostForTest(wrapFn: ((host: ts.CompilerHost) => ts.CompilerHost) | null): void;
 export declare function createCompilerHost({ options, tsHost }: {
     options: CompilerOptions;
diff --git a/src/transformers/downlevel_decorators_transform/downlevel_decorators_transform.d.ts b/src/transformers/downlevel_decorators_transform/downlevel_decorators_transform.d.ts
index a07c9cbb0766f69c2d79f8594f51d35f26be4f6e..81ede0d8338eb1574031c18e06ef43a03f82a27b 100755
--- a/src/transformers/downlevel_decorators_transform/downlevel_decorators_transform.d.ts
+++ b/src/transformers/downlevel_decorators_transform/downlevel_decorators_transform.d.ts
@@ -7,7 +7,7 @@
  */
 /// <amd-module name="@angular/compiler-cli/src/transformers/downlevel_decorators_transform/downlevel_decorators_transform" />
 import ts from 'typescript';
-import { ReflectionHost } from '../../ngtsc/reflection';
+import { ReflectionHost } from '../../ngtsc/reflection/index.js';
 /**
  * Gets a transformer for downleveling Angular decorators.
  * @param typeChecker Reference to the program's type checker.
diff --git a/src/transformers/downlevel_decorators_transform/index.d.ts b/src/transformers/downlevel_decorators_transform/index.d.ts
index e4144727d7b56e87e841f392242311f2854bd4a0..2f0151bc0dcb8bcd3d19ef31e6f237195af312fa 100755
--- a/src/transformers/downlevel_decorators_transform/index.d.ts
+++ b/src/transformers/downlevel_decorators_transform/index.d.ts
@@ -6,4 +6,4 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/src/transformers/downlevel_decorators_transform" />
-export { getDownlevelDecoratorsTransform } from './downlevel_decorators_transform';
+export { getDownlevelDecoratorsTransform } from './downlevel_decorators_transform.js';
diff --git a/src/transformers/entry_points.d.ts b/src/transformers/entry_points.d.ts
index 54032c4f553a042e82ae5a944e0c22f1dad6574a..a41e52d8dd82160318e006c294534400d92d6f68 100755
--- a/src/transformers/entry_points.d.ts
+++ b/src/transformers/entry_points.d.ts
@@ -6,5 +6,5 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/src/transformers/entry_points" />
-export { createCompilerHost } from './compiler_host';
-export { createProgram } from './program';
+export { createCompilerHost } from './compiler_host.js';
+export { createProgram } from './program.js';
diff --git a/src/transformers/i18n.d.ts b/src/transformers/i18n.d.ts
index 1ff9ad38f99cee8c5dcbe1a0512ce75caf40b23c..0b85be6c045593d3eace78a4342350e75f3783a4 100755
--- a/src/transformers/i18n.d.ts
+++ b/src/transformers/i18n.d.ts
@@ -8,7 +8,7 @@
 /// <amd-module name="@angular/compiler-cli/src/transformers/i18n" />
 import { MessageBundle } from '@angular/compiler';
 import ts from 'typescript';
-import { CompilerOptions } from './api';
+import { CompilerOptions } from './api.js';
 export declare function i18nGetExtension(formatName: string): string;
 export declare function i18nExtract(formatName: string | null, outFile: string | null, host: ts.CompilerHost, options: CompilerOptions, bundle: MessageBundle, pathResolve?: (...segments: string[]) => string): string[];
 export declare function i18nSerialize(bundle: MessageBundle, formatName: string, options: CompilerOptions): string;
diff --git a/src/transformers/program.d.ts b/src/transformers/program.d.ts
index 66ae7d5823d06f07d70f2e76c2d3602fb101275d..edc77528749d63ec8d899272c8be27019115ccc0 100755
--- a/src/transformers/program.d.ts
+++ b/src/transformers/program.d.ts
@@ -6,7 +6,7 @@
  * found in the LICENSE file at https://angular.io/license
  */
 /// <amd-module name="@angular/compiler-cli/src/transformers/program" />
-import { CompilerHost, CompilerOptions, Program } from './api';
+import { CompilerHost, CompilerOptions, Program } from './api.js';
 export declare function createProgram({ rootNames, options, host, oldProgram }: {
     rootNames: ReadonlyArray<string>;
     options: CompilerOptions;
